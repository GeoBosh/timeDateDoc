[{"path":"https://geobosh.github.io/timeDateDoc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Diethelm Wuertz. Author.            original code Tobias Setz. Author. Yohan Chalabi. Author. Martin Maechler. Contributor. Joe W. Byers. Contributor. Georgi N. Boshnakov. Maintainer, author.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wuertz D, Setz T, Chalabi Y, Boshnakov GN (2023). timeDate: Rmetrics - Chronological Calendar Objects. R package version 4032.109.9000, https://r-forge.r-project.org/scm/viewvc.php/pkg/timeDate/?root=rmetrics (devel), https://www.rmetrics.org, https://geobosh.github.io/timeDateDoc/ (doc).","code":"@Manual{,   title = {timeDate: Rmetrics - Chronological and Calendar Objects},   author = {Diethelm Wuertz and Tobias Setz and Yohan Chalabi and Georgi N. Boshnakov},   year = {2023},   note = {R package version 4032.109.9000, https://r-forge.r-project.org/scm/viewvc.php/pkg/timeDate/?root=rmetrics (devel), https://www.rmetrics.org},   url = {https://geobosh.github.io/timeDateDoc/ (doc)}, }"},{"path":"https://geobosh.github.io/timeDateDoc/index.html","id":"installing-timedate","dir":"","previous_headings":"","what":"Rmetrics - Chronological and Calendar Objects","title":"Rmetrics - Chronological and Calendar Objects","text":"Install latest stable version timeDate CRAN: can install development version timeDate R-forge: report bugs visit Rmetrics.","code":"install.packages(\"timeDate\") install.packages(\"timeDate\", repos = \"http://R-Forge.R-project.org\")"},{"path":"https://geobosh.github.io/timeDateDoc/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Rmetrics - Chronological and Calendar Objects","text":"can view documentation timeDate timeDateDoc (html site created ‘pkgdown’) download reference manual latest release CRAN.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/00timeDate-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities and tools package — timeDate-package","title":"Utilities and tools package — timeDate-package","text":"Package calendar, date, time tools utilities Rmetrics.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/00timeDate-package.html","id":"overview-of-topics","dir":"Reference","previous_headings":"","what":"Overview of Topics","title":"Utilities and tools package — timeDate-package","text":"help file describes concepts methods behind S4   \"timeDate\" class used Rmetrics financial data time    management together management public ecclesiastical   holidays. \"timeDate\" class fulfils conventions ISO 8601    standard well ANSI C POSIX standards. Beyond   standards provides \"Financial Center\" concept   allows handle data records collected different time    zones mix always proper time stamps    respect personal financial center, alternatively GMT   reference time. can thus also handle time stamps historical    data records time zone, even financial    centers changed day light saving times different calendar   dates. Moreover \"timeDate\" almost compatible \"timeDate\"   class Insightful's SPlus \"timeDate\" class. move    two worlds R SPlus, rewrite   code. important business applications. \"timeDate\" class offers date time functionality   also offers sophisticated calendar manipulations   business days, weekends, public ecclesiastical holidays. help page presented four sections: 1. S4 \"timeDate\" Class Functions    2. Operations \"timeDate\" Objects    3. Daylight Saving Time Financial Centers    4. Holidays Holiday Calendars","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/00timeDate-package.html","id":"-s-timedate-class-and-generator-functions","dir":"Reference","previous_headings":"","what":"1. S4 \"timeDate\" Class and Generator Functions","title":"Utilities and tools package — timeDate-package","text":"Date time stamps represented S4 object class \"timeDate\".  three slots.  @Data slot holds time   stamps POSIXct formatted specified    @format slot. time stamps local belong    financial center expressed slot @FinCenter. several possibilities generate \"timeDate\" object.   forward procedure use one following functions: timeDate -- Creates \"timeDate\" object scratch, timeSequence -- creates sequence \"timeDate\" objects, timeCalendar -- creates \"timeDate\" object calendar   atoms, Sys.timeDate -- returns current date time   \"timeDate\" object. function timeDate can create \"timeDate\" objects    scratch specifying character vector time stamps   financial center character vector belongs . \"GMT\" used   default  reference date/time operations.   can set variable myFinCenter local   financial center reference  want reference dates/time   . Examples: NOTE: Rmetrics implemented automated date/time format identifier   many common date/time formats tries automatically recognise     format character vector dates times. can   look whichFormat(charvec). NOTE: Rmetrics always uses midnight standard dates   times. can see  .midnightStandard(\"2008-01-31 24:00:00\") Alternatively can create sequence \"timeDate\" objects   help function timeSequence. can done several   ways, either specifying range data arguments   , missing, setting   argument length.desired series. Note case   monthly sequence, options. example can   generate series first last day month, use   complex rules like last n-th Friday every month. Examples: third possibility create \"timeDate\" objects calendar     atoms. can specify values vectors equal length integers    denoting year, month, day, hour, minute seconds. every day    time stamp, can just add offset. Examples:","code":"setClass(\"timeDate\",     representation(     Data = \"POSIXct\",     format = \"character\",     FinCenter = \"character\"     )) # Show My local Financial Center - Note, by Default this is \"GMT\"     getRmetricsOptions(\"myFinCenter\")          # Compose Character Vectors of Dates and Times:     Dates <- c(\"1989-09-28\",\"2001-01-15\",\"2004-08-30\",\"1990-02-09\")     Times <- c(  \"23:12:55\",  \"10:34:02\",  \"08:30:00\",  \"11:18:23\")     charvec = paste(Dates, Times)          # Create a 'timeDate' object     timeDate(charvec)          # Create a 'timeDate' object with my financial center set to Zurich     myFinCenter <- \"Zurich\"     timeDate(charvec)      # if the 'timeDate' was recorded in a different financial center, it     # will be automatically converted to your financial center,     # i.e. \"Zurich\".      timeDate(charvec, zone = \"Tokyo\")      # You can also convert a recorded 'timeDate' from your financial     # center \"Zurich\" to another one, for example \"NewYork\".     timeDate(charvec, FinCenter = \"NewYork\") # Lets work in an international environment:     setRmetricsOptions(myFinCenter = \"GMT\")          # Your 'timeDate' is now in the Financial Center \"GMT\"     timeDate(charvec)          # Daily January 2008 Sequence:     timeSequence(from = \"2008-01-01\", to = \"2008-01-31\", by = \"day\")          # Monthly 2008 Sequence:     tS = timeSequence(from = \"2008-01-01\", to = \"2008-12-31\", by = \"month\")     tS          # Do you want the last Day or the last Friday in Month Data ?     timeLastDayInMonth(tS)     timeLastNdayInMonth(tS, nday = 5) # Monthly calendar for Current Year     getRmetricsOptions(\"currentYear\")     timeCalendar()           # Daily 'timeDate' for January data from Tokyo local time 16:00     timeCalendar(2008, m=1, d=1:31, h=16, zone=\"Tokyo\", FinCenter=\"Zurich\")          # Or add16 hours in seconds ...     timeCalendar(2008, m=1, d=1:31, zone=\"Tokyo\", FinCenter=\"Zurich\") + 16*3600"},{"path":"https://geobosh.github.io/timeDateDoc/reference/00timeDate-package.html","id":"-operations-on-timedate-objects","dir":"Reference","previous_headings":"","what":"2. Operations on \"timeDate\" Objects","title":"Utilities and tools package — timeDate-package","text":"Many operations can performed \"timeDate\" objects. can add   subtract, round truncate, subset, coerce transform   objects. options among many others. Math Operations Math operations can add subtract dates times,   perform logical operations \"timeDate\" objects. Examples: Lagging can generate suitable lagged iterated differences: diff.timeDate -- Returns suitably lagged iterated differences. Examples: Rounding Truncating Dates times can rounded truncated. useful lower   frequencies seconds, example hourly. round -- rounds objects class \"timeDate\", trunc -- truncates objects class \"timeDate\". Examples: Subsetting Subsetting \"timeDate\" important issue management    dates times. Rmetrics offers several functions useful    context: \"[\" -- Extracts replaces subsets \"timeDate\" objects,   window, cut -- extract piece \"timeDate\" object, context also important know start   end time stamp together total number   time stamps. start -- extracts first entry \"timeDate\" object, end -- extracts last entry \"timeDate\" object, length -- returns length \"timeDate\" object. Examples: Weekdays, weekends, business days, holidays can easily   obtained following functions: isWeekday -- tests date weekday , isWeekend -- tests date weekend day , isBizday -- tests date business day , isHoliday -- tests date holiday day . Examples: functions blockStart blockEnd gives    time stamps equally sized blocks. blockStart -- Creates start dates equally sized blocks, blockEnd -- Creates end dates equally sized blocks. Examples: Coercions Transformations \"timeDate\" objects living isolated world. Coercions     transformations allow \"timeDate\" objects communicate    formatted time stamps. aware cases information can    lost date.time classes support functionality.   exist several methods coerce transform \"timeDate\"   objects objects. .timeDate -- Implements Use Method, .timeDate.default -- default Method, .timeDate.POSIXt -- returns 'POSIX' object \"timeDate\"   object, .timeDate.Date -- returns 'POSIX' object \"timeDate\"   object. .character.timeDate -- Returns \"timeDate\" object   'character' string, .double.timeDate -- returns \"timeDate\" object 'numeric'   object, .data.frame.timeDate -- returns \"timeDate\" object   'data.frame' object, .POSIXct.timeDate -- returns \"timeDate\" object 'POSIXct'   object, .POSIXlt.timeDate -- returns \"timeDate\" object 'POSIXlt'   object, .Date.timeDate -- returns \"timeDate\" object 'Date'   object. Users maintainers date/time classes can add    generic functions. example .timeDate.zoo    .zoo.timeDate. Concatenations Reorderings might sometimes useful concatenate reorder \"timeDate\"   objects. generic functions concatenate, replicate, sort,   re-sample, unify revert \"timeDate\" objects : c -- Concatenates \"timeDate\" objects, rep -- replicates \"timeDate\" object, sort -- sorts \"timeDate\" object, sample -- resamples \"timeDate\" object,unique -- makes \"timeDate\" object unique, rev -- reverts \"timeDate\" object. NOTE: function c \"timeDate\" objects takes care   possible different financial centers specific object   concatenated. cases, time stamps transformed   financial center first time stamp used   concatenation: Examples:","code":"# Date and Time Now:     now = Sys.timeDate()          # One Hour Later:     now + 3600          # Which date/time is earlier or later ?     tC = timeCalendar()      tR = tC + round(3600*rnorm(12))     tR > tC # Monthly Dates 2008 and January 2009:     tC = c(timeCalendar(2008), timeCalendar(2009)[1])          # Number of days in months and total 2008:     diff(tC)     sum(as.integer(diff(tC))) # Round the Random Time Stamps to the Nearest Hour:     tC = timeCalendar()     tR = tC + round(3600*rnorm(12))     tR     round(tR, \"h\")          # Truncate by Hour or to the Next Full Hour::     trunc(tR, \"h\")     trunc(tR + 3600, \"h\") # Create Monthly Calendar for next year     tC = timeCalendar(getRmetricsOptions(\"currentYear\") + 1)     tC      # Start, end and length of 'timeDate' objects     start(tC)     end(tC)     length(tC)          # The first Quarter - Several Alternative Solutions:     tC[1:3]     tC[-(4:length(tC))]     window(tC, start = tC[1], end = tC[3])     cut(tC, from = tC[1], to = tC[3])     tC[tC < tC[4]]          # The Quarterly Series:     tC[seq(3, 12, by = 3)] # A 'timeDate' Sequence around Easter 2008     Easter(2008)     tS <- timeSequence(Easter(2008, -14), Easter(2008, +14))     tS          # Subset weekdays and business days:     tW <- tS[isWeekday(tS)]; tW     dayOfWeek(tW)     tB <- tS[isBizday(tS, holidayZURICH())]; tB     dayOfWeek(tB) # 'timeDate' object for the last 365 days:     tS = timeSequence(length.out = 360)     tS          # Subset Pointers for blocks of exactly 30 days:     blockStart(tS, 30)     blockEnd(tS, 30)     Sys.timeDate() # Concatenate the local time stamps to Zurich time ...     ZH = timeDate(\"2008-01-01 16:00:00\", zone = \"GMT\", FinCenter = \"Zurich\")     NY = timeDate(\"2008-01-01 18:00:00\", zone = \"GMT\", FinCenter = \"NewYork\")     c(ZH, NY)     c(NY, ZH)          # Rordering:     tC = timeCalendar(); tC     tS = sample(tC); tS     tO = sort(tS); tO     tV = rev(tO); tV     tU = unique(c(tS, tS)); tU"},{"path":"https://geobosh.github.io/timeDateDoc/reference/00timeDate-package.html","id":"-daylight-saving-time-and-financial-centers","dir":"Reference","previous_headings":"","what":"3. Daylight Saving Time and Financial Centers","title":"Utilities and tools package — timeDate-package","text":"financial center worldwide function    returns Daylight Saving Time Rules. Almost 400   prototypes made available Olson time zone   data base. cities regions can listed using   command listFinCenter. DST rules specific   financial center can viewed name, e.g. Zurich().   Additional financial centers can added user taking care   format specification DST functions. Setting Financial Centers time stamps handled according time zone daylight   saving time rules specified center variable   myFinCenter. variable set default \"GMT\"   can changed local financial center   financial center want use. NOTE: setting financial center continent/city    lies outside time zone used computer change   time settings environment variables used computer. change name financial center one setting another   just assign variable myFinCenter desired name   city: Examples: now , dates times handled within middle European    time zone DST rules valid Zurich. List Financial Centers many financial centers supported Rmetrics.   can displayed function listFinCenter. can also   display partial lists wildcards regular expressions: Examples: DST Rules financial center function available. keeps   information time zones DST rules. functions return   data.frame 4Columns :  first column describes time changed, second   gives offset \"GMT\", third returns daylight savings time   flag positive force, zero , negative   unknown.  last column gives name time zone. can   look function Zurich() : Examples:","code":"# What is my current Financial Center ?     getRmetricsOptions(\"myFinCenter\")      # Change to Zurich:     setRmetricsOptions(myFinCenter = \"Zurich\")     getRmetricsOptions(\"myFinCenter\") # List all supported Financial Centers Worldwide:     listFinCenter()          # List European Financial Centers:     listFinCenter(\"Europe/*\") Zurich offSet isdst TimeZone     ...     62  2008-03-30 01:00:00   7200     1     CEST     63  2008-10-26 01:00:00   3600     0      CET     ... # Show the DST Rules for Zurich:     Zurich()          # List European Financial Centers:     listFinCenter(\"Europe/*\")"},{"path":"https://geobosh.github.io/timeDateDoc/reference/00timeDate-package.html","id":"-holidays-and-holiday-calendars","dir":"Reference","previous_headings":"","what":"3. Holidays and Holiday Calendars","title":"Utilities and tools package — timeDate-package","text":"non-trivial implement function business days, weekends   holidays. difficult algorithmic sense, can   become tedious implement rules calendar ,   example date Easter. following section briefly summarise functions can    calculate dates ecclesiastical public holidays.    help functions can also create business holiday    calendars. Special Dates: implemented functions can compute last day given    month year, dates month n-day    (e.g. n- = Sun) given date, dates    month n-day specified date,    n-th occurrences n-day specified year/month vectors,    last n-day specified year/month value vector. NOTE: n-days numbered 0 6 0 correspond    Sunday 6 Saturday. timeFirstDayInMonth -- Computes first day given month   year, timeLastDayInMonth -- Computes last day given month   year, timeFirstDayInQuarter -- Computes first day given   quarter year, timeLastDayInQuarter -- Computes last day given   quarter year, timeNdayOnOrAfter -- Computes date \"--\"   n-day, timeNdayOnOrBefore --b Computes date \"--\"   n-day, timeNthNdayInMonth -- Computes n-th occurrence n-day   year/month, timeLastNdayInMonth -- Computes last n-day   year/month. Holidays: Holidays may two origins: ecclesiastical public/federal.    ecclesiastical calendars Christian churches based cycles    movable immovable feasts. Christmas, December 25,    principal immovable feast. Easter principal movable feast,    dates movable feasts determined   respect Easter. However, movable feasts Advent   Epiphany seasons Sundays reckoned Christmas Feast   Epiphany, respectively. Examples: Holiday Calendars: holidayZURICH -- Zurich Business Calendar, holidayNYSE -- NYSE Stock Exchange Holiday Calendar, holidayZURICH -- TSX Holiday Calendar. like thanks Rmetrics users gave us many additional   information concerning local holidays.","code":"# List Holidays available in Rmetrics     listHolidays()          # The date of Easter for the next 5 years:     currentYear <- getRmetricsOptions(\"currentYear\")     Easter(currentYear:(currentYear+5))"},{"path":"https://geobosh.github.io/timeDateDoc/reference/00timeDate-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Utilities and tools package — timeDate-package","text":"Bateman R., (2000);   Time Functionality Standard C Library,   Novell AppNotes, September 2000 Issue, 73--85. Becker R.., Chambers J.M., Wilks .R. (1988);   New S Language, Wadsworth & Brooks/Cole. ISO-8601, (1988);   Data Elements Interchange Formats -     Information Interchange, Representation Dates Time,   International Organization Standardization,   Reference Number ISO 8601, 14 pages. James D.., Pregibon D. (1992),   Chronological Objects Data Analysis,   Reprint. Ripley B.D., Hornik K. (2001);   Date-Time Classes,   R-News, Vol. 1/2 June 2001, 8--12. Zivot, E., Wang J. (2003);   Modeling Financial Time Series S-Plus,   Springer, New-York.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-c.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenating 'timeDate' objects — c","title":"Concatenating 'timeDate' objects — c","text":"Concatenates \"timeDate\" objects.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenating 'timeDate' objects — c","text":"","code":"# S3 method for timeDate c(..., recursive = FALSE)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenating 'timeDate' objects — c","text":"recursive logical. recursive  set TRUE, function          recursively descends lists combining elements          vector. ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenating 'timeDate' objects — c","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenating 'timeDate' objects — c","text":"","code":"## timeCalendar -    # Create Character Vectors:    GMT = timeCalendar(zone = \"GMT\", FinCenter = \"GMT\") + 16*3600    ZUR = timeCalendar(zone = \"GMT\", FinCenter = \"Zurich\") + 16*3600     ## c -     # Concatenate and Replicate timeDate Objects:    sort(c(GMT, ZUR)) #> GMT #>  [1] [2023-01-01 16:00:00] [2023-01-01 16:00:00] [2023-02-01 16:00:00] #>  [4] [2023-02-01 16:00:00] [2023-03-01 16:00:00] [2023-03-01 16:00:00] #>  [7] [2023-04-01 16:00:00] [2023-04-01 16:00:00] [2023-05-01 16:00:00] #> [10] [2023-05-01 16:00:00] [2023-06-01 16:00:00] [2023-06-01 16:00:00] #> [13] [2023-07-01 16:00:00] [2023-07-01 16:00:00] [2023-08-01 16:00:00] #> [16] [2023-08-01 16:00:00] [2023-09-01 16:00:00] [2023-09-01 16:00:00] #> [19] [2023-10-01 16:00:00] [2023-10-01 16:00:00] [2023-11-01 16:00:00] #> [22] [2023-11-01 16:00:00] [2023-12-01 16:00:00] [2023-12-01 16:00:00]    sort(c(ZUR, GMT)) #> Zurich #>  [1] [2023-01-01 17:00:00] [2023-01-01 17:00:00] [2023-02-01 17:00:00] #>  [4] [2023-02-01 17:00:00] [2023-03-01 17:00:00] [2023-03-01 17:00:00] #>  [7] [2023-04-01 18:00:00] [2023-04-01 18:00:00] [2023-05-01 18:00:00] #> [10] [2023-05-01 18:00:00] [2023-06-01 18:00:00] [2023-06-01 18:00:00] #> [13] [2023-07-01 18:00:00] [2023-07-01 18:00:00] [2023-08-01 18:00:00] #> [16] [2023-08-01 18:00:00] [2023-09-01 18:00:00] [2023-09-01 18:00:00] #> [19] [2023-10-01 18:00:00] [2023-10-01 18:00:00] [2023-11-01 17:00:00] #> [22] [2023-11-01 17:00:00] [2023-12-01 17:00:00] [2023-12-01 17:00:00]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Lagged 'timeDate' differences — diff","title":"Lagged 'timeDate' differences — diff","text":"Returns suitably lagged iterated differences.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lagged 'timeDate' differences — diff","text":"","code":"# S3 method for timeDate diff(x, lag = 1, differences = 1, ...)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lagged 'timeDate' differences — diff","text":"x object class \"timeDate\". lag integer indicating lag use. differences integer indicating order difference. ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lagged 'timeDate' differences — diff","text":"function, diff.timeDate, x vector      length n differences=1, computed result      equal successive differences x[(1+lag):n] - x[1:(n-lag)].      difference larger one algorithm applied     recursively x. Note returned value vector      shorter x.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lagged 'timeDate' differences — diff","text":"","code":"## Create Character Vectors:    dts = c(\"1989-09-28\", \"2001-01-15\", \"2004-08-30\", \"1990-02-09\")    dts #> [1] \"1989-09-28\" \"2001-01-15\" \"2004-08-30\" \"1990-02-09\"    tms = c(  \"23:12:55\",   \"10:34:02\",   \"08:30:00\",   \"11:18:23\")    tms #> [1] \"23:12:55\" \"10:34:02\" \"08:30:00\" \"11:18:23\"     ## timeDate -     GMT = timeDate(dts, zone = \"GMT\", FinCenter = \"GMT\") + 24*3600    GMT #> GMT #> [1] [1989-09-29] [2001-01-16] [2004-08-31] [1990-02-10]    ZUR = timeDate(dts, zone = \"GMT\", FinCenter = \"Europe/Zurich\")    ZUR #> Europe/Zurich #> [1] [1989-09-28 01:00:00] [2001-01-15 01:00:00] [2004-08-30 02:00:00] #> [4] [1990-02-09 01:00:00]  ## diff -     # Suitably Lagged and Iterated Differences:    diff(GMT) #> Time differences in days #> [1]  4127  1323 -5316    diff(GMT, lag = 2) #> Time differences in days #> [1]  5450 -3993    diff(GMT, lag = 1, diff = 2) #> Time differences in days #> [1] -2804 -6639"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-difftimeDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Difference of two 'timeDate' objects — difftimeDate","title":"Difference of two 'timeDate' objects — difftimeDate","text":"Returns difference two 'timeDate' objects.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-difftimeDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Difference of two 'timeDate' objects — difftimeDate","text":"","code":"difftimeDate(time1, time2,      units = c(\"auto\", \"secs\", \"mins\", \"hours\", \"days\", \"weeks\"))"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-difftimeDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Difference of two 'timeDate' objects — difftimeDate","text":"time1, time2 two objects objects class \"timeDate\". units character string denoting date/time units          results desired.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-difftimeDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Difference of two 'timeDate' objects — difftimeDate","text":"function, difftimeDate, takes difference two  \"timeDate\" objects returns object class  \"difftime\" attribute indicating units.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-difftimeDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Difference of two 'timeDate' objects — difftimeDate","text":"","code":"## Create Character Vectors:    dts = c(\"1989-09-28\", \"2001-01-15\", \"2004-08-30\", \"1990-02-09\")    dts #> [1] \"1989-09-28\" \"2001-01-15\" \"2004-08-30\" \"1990-02-09\"     ## timeDate -     GMT = timeDate(dts, zone = \"GMT\", FinCenter = \"GMT\")     GMT #> GMT #> [1] [1989-09-28] [2001-01-15] [2004-08-30] [1990-02-09]  ## diff -     # Suitably Lagged and Iterated Differences:    difftimeDate(GMT[1:2], GMT[-(1:2)])   #> Time differences in days #> [1] -5450  3993"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-format.html","id":null,"dir":"Reference","previous_headings":"","what":"Format methods — format-methods","title":"Format methods — format-methods","text":"Formats \"timeDate\" objects ISO conform character strings.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format methods — format-methods","text":"","code":"# S3 method for timeDate format(x, format = \"\", tz = \"\", usetz = FALSE, ...)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format methods — format-methods","text":"format character string describing format. tz timezone specification used conversion. usetz logical. x object class \"timeDate\". ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format methods — format-methods","text":"ISO conforming formatted character string","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format methods — format-methods","text":"","code":"## timeCalendar -    # Time Calendar 16:00    tC = timeCalendar() + 16*3600    tC #> GMT #>  [1] [2023-01-01 16:00:00] [2023-02-01 16:00:00] [2023-03-01 16:00:00] #>  [4] [2023-04-01 16:00:00] [2023-05-01 16:00:00] [2023-06-01 16:00:00] #>  [7] [2023-07-01 16:00:00] [2023-08-01 16:00:00] [2023-09-01 16:00:00] #> [10] [2023-10-01 16:00:00] [2023-11-01 16:00:00] [2023-12-01 16:00:00]     ## Format as ISO Character String:     format(tC) #>  [1] \"2023-01-01 16:00:00\" \"2023-02-01 16:00:00\" \"2023-03-01 16:00:00\" #>  [4] \"2023-04-01 16:00:00\" \"2023-05-01 16:00:00\" \"2023-06-01 16:00:00\" #>  [7] \"2023-07-01 16:00:00\" \"2023-08-01 16:00:00\" \"2023-09-01 16:00:00\" #> [10] \"2023-10-01 16:00:00\" \"2023-11-01 16:00:00\" \"2023-12-01 16:00:00\""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-length.html","id":null,"dir":"Reference","previous_headings":"","what":"Length of a 'timeDate' object — length","title":"Length of a 'timeDate' object — length","text":"Returns length \"timeDate\" object.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length of a 'timeDate' object — length","text":"","code":"# S3 method for timeDate length(x)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length of a 'timeDate' object — length","text":"x object class \"timeDate\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of a 'timeDate' object — length","text":"integer length 1","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Length of a 'timeDate' object — length","text":"","code":"## timCalendar -    tC = timeCalendar()     ## length -     length(tC) #> [1] 12"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Replicating 'timeDate' objects — rep","title":"Replicating 'timeDate' objects — rep","text":"Replicates \"timeDate\" objects.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replicating 'timeDate' objects — rep","text":"","code":"# S3 method for timeDate rep(x, ...)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replicating 'timeDate' objects — rep","text":"x object class \"timeDate\". ... arguments passed method 'POSIXct',     rep.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replicating 'timeDate' objects — rep","text":"object class \"timeDate\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-rep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replicating 'timeDate' objects — rep","text":"","code":"## rep -     dts = c(\"1989-09-28\", \"2001-01-15\", \"2004-08-30\", \"1990-02-09\")    ZUR = timeDate(dts, zone = \"GMT\", FinCenter = \"Europe/Zurich\")     rep(ZUR[2], times = 3) #> Europe/Zurich #> [1] [2001-01-15 01:00:00] [2001-01-15 01:00:00] [2001-01-15 01:00:00]    rep(ZUR[2:3], times = 2)   #> Europe/Zurich #> [1] [2001-01-15 01:00:00] [2004-08-30 02:00:00] [2001-01-15 01:00:00] #> [4] [2004-08-30 02:00:00]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-rev.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse 'timeDate' objects — rev","title":"Reverse 'timeDate' objects — rev","text":"Reverse \"timeDate\" object.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-rev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse 'timeDate' objects — rev","text":"","code":"# S3 method for timeDate rev(x)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-rev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse 'timeDate' objects — rev","text":"x object class \"timeDate\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-rev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse 'timeDate' objects — rev","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-rev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse 'timeDate' objects — rev","text":"","code":"dts = c(\"1989-09-28\", \"2001-01-15\", \"2004-08-30\", \"1990-02-09\") ZUR = timeDate(dts, zone = \"GMT\", FinCenter = \"Europe/Zurich\") ZUR #> Europe/Zurich #> [1] [1989-09-28 01:00:00] [2001-01-15 01:00:00] [2004-08-30 02:00:00] #> [4] [1990-02-09 01:00:00] rev(ZUR) #> Europe/Zurich #> [1] [1990-02-09 01:00:00] [2004-08-30 02:00:00] [2001-01-15 01:00:00] #> [4] [1989-09-28 01:00:00]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-round.html","id":null,"dir":"Reference","previous_headings":"","what":"Rounding and truncating 'timeDate' objects — round","title":"Rounding and truncating 'timeDate' objects — round","text":"Rounds truncates objects class 'timeDate'.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-round.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rounding and truncating 'timeDate' objects — round","text":"","code":"# S3 method for timeDate round(x, digits = c(\"days\", \"hours\", \"mins\"))   # S3 method for timeDate trunc(x, units = c(\"days\", \"hours\", \"mins\"), ...)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-round.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rounding and truncating 'timeDate' objects — round","text":"digits, units character string denoting date/time units      results desired. x object class \"timeDate\". ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-round.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rounding and truncating 'timeDate' objects — round","text":"two functions round trunc allow round   truncate \"timeDate\" objects specified unit return   \"timeDate\" objects. inconsistency round uses digits   argument units.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-round.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rounding and truncating 'timeDate' objects — round","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-round.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rounding and truncating 'timeDate' objects — round","text":"","code":"## round -   ## truncate -"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Resampling 'timeDate' objects — sample","title":"Resampling 'timeDate' objects — sample","text":"Resamples \"timeDate\" object.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resampling 'timeDate' objects — sample","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resampling 'timeDate' objects — sample","text":"","code":"## c -    # Create Character Vectors:    dts = c(\"1989-09-28\", \"2001-01-15\", \"2004-08-30\", \"1990-02-09\")    dts #> [1] \"1989-09-28\" \"2001-01-15\" \"2004-08-30\" \"1990-02-09\"    tms = c(  \"23:12:55\",   \"10:34:02\",   \"08:30:00\",   \"11:18:23\")    tms #> [1] \"23:12:55\" \"10:34:02\" \"08:30:00\" \"11:18:23\"     ## \"+/-\" -     # Add One Day to a Given timeDate Object:    GMT = timeDate(dts, zone = \"GMT\", FinCenter = \"GMT\")    GMT #> GMT #> [1] [1989-09-28] [2001-01-15] [2004-08-30] [1990-02-09]    ZUR = timeDate(dts, zone = \"GMT\", FinCenter = \"Europe/Zurich\")    ZUR #> Europe/Zurich #> [1] [1989-09-28 01:00:00] [2001-01-15 01:00:00] [2004-08-30 02:00:00] #> [4] [1990-02-09 01:00:00]     ## c -     # Concatenate and Replicate timeDate Objects:    c(GMT[1:2], ZUR[1:2]) #> GMT #> [1] [1989-09-28] [2001-01-15] [1989-09-28] [2001-01-15]    c(ZUR[1:2], GMT[1:2]) #> Europe/Zurich #> [1] [1989-09-28 01:00:00] [2001-01-15 01:00:00] [1989-09-28 01:00:00] #> [4] [2001-01-15 01:00:00]     ## rep -     rep(ZUR[2], times = 3) #> Europe/Zurich #> [1] [2001-01-15 01:00:00] [2001-01-15 01:00:00] [2001-01-15 01:00:00]    rep(ZUR[2:3], times = 2)   #> Europe/Zurich #> [1] [2001-01-15 01:00:00] [2004-08-30 02:00:00] [2001-01-15 01:00:00] #> [4] [2004-08-30 02:00:00]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-sort.html","id":null,"dir":"Reference","previous_headings":"","what":"Sorting 'timeDate' objects — sort","title":"Sorting 'timeDate' objects — sort","text":"Sorts \"timeDate\" object.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sorting 'timeDate' objects — sort","text":"","code":"# S3 method for timeDate sort(x, ...)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sorting 'timeDate' objects — sort","text":"x object class \"timeDate\". ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sorting 'timeDate' objects — sort","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-sort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sorting 'timeDate' objects — sort","text":"","code":"## c -    # Create Character Vectors:    dts = c(\"1989-09-28\", \"2001-01-15\", \"2004-08-30\", \"1990-02-09\")    dts #> [1] \"1989-09-28\" \"2001-01-15\" \"2004-08-30\" \"1990-02-09\"    tms = c(  \"23:12:55\",   \"10:34:02\",   \"08:30:00\",   \"11:18:23\")    tms #> [1] \"23:12:55\" \"10:34:02\" \"08:30:00\" \"11:18:23\"     ## \"+/-\" -     # Add One Day to a Given timeDate Object:    GMT = timeDate(dts, zone = \"GMT\", FinCenter = \"GMT\")    GMT #> GMT #> [1] [1989-09-28] [2001-01-15] [2004-08-30] [1990-02-09]    ZUR = timeDate(dts, zone = \"GMT\", FinCenter = \"Europe/Zurich\")    ZUR #> Europe/Zurich #> [1] [1989-09-28 01:00:00] [2001-01-15 01:00:00] [2004-08-30 02:00:00] #> [4] [1990-02-09 01:00:00]     ## c -     # Concatenate and Replicate timeDate Objects:    c(GMT[1:2], ZUR[1:2]) #> GMT #> [1] [1989-09-28] [2001-01-15] [1989-09-28] [2001-01-15]    c(ZUR[1:2], GMT[1:2]) #> Europe/Zurich #> [1] [1989-09-28 01:00:00] [2001-01-15 01:00:00] [1989-09-28 01:00:00] #> [4] [2001-01-15 01:00:00]     ## rep -     rep(ZUR[2], times = 3) #> Europe/Zurich #> [1] [2001-01-15 01:00:00] [2001-01-15 01:00:00] [2001-01-15 01:00:00]    rep(ZUR[2:3], times = 2)   #> Europe/Zurich #> [1] [2001-01-15 01:00:00] [2004-08-30 02:00:00] [2001-01-15 01:00:00] #> [4] [2004-08-30 02:00:00]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-start.html","id":null,"dir":"Reference","previous_headings":"","what":"Terminal times and range — start","title":"Terminal times and range — start","text":"Extracts time first last observation taken,   computes range dates \"timeDate\" object.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminal times and range — start","text":"","code":"# S3 method for timeDate start(x, ...)  # S3 method for timeDate end(x, ...)  # S3 method for timeDate min(..., na.rm = FALSE)  # S3 method for timeDate max(..., na.rm = FALSE)  # S3 method for timeDate range(..., na.rm = FALSE)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-start.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Terminal times and range — start","text":"x object class \"timeDate\". ... ignored start end;      'timeDate' object min, max, range. na.rm used.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-start.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Terminal times and range — start","text":"Conceptually, \"timeDate\" object sorted   computations. particular, start necessarilly   first element object similarly functions. min max equivalent start end   end, respectively. range returns earlies latest times   \"timeDate\" object. remaining functions return one   , suggested names.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-start.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Terminal times and range — start","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-start.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Terminal times and range — start","text":"","code":"## timeCalendar -     # Random Calendar Dates: set.seed(1234)    tR = sample(timeCalendar())    sort(tR) #> GMT #>  [1] [2023-01-01] [2023-02-01] [2023-03-01] [2023-04-01] [2023-05-01] #>  [6] [2023-06-01] [2023-07-01] [2023-08-01] [2023-09-01] [2023-10-01] #> [11] [2023-11-01] [2023-12-01]    tR #> GMT #>  [1] [2023-12-01] [2023-10-01] [2023-06-01] [2023-05-01] [2023-04-01] #>  [6] [2023-07-01] [2023-01-01] [2023-09-01] [2023-02-01] [2023-08-01] #> [11] [2023-11-01] [2023-03-01]      ## start | end  -    start(tR) #> GMT #> [1] [2023-01-01]    end(tR) #> GMT #> [1] [2023-12-01]     ## The First and Last Time Stamp:    tR[1] #> GMT #> [1] [2023-12-01]    tR[length(tR)] #> GMT #> [1] [2023-03-01]    rev(tR)[1] #> GMT #> [1] [2023-03-01]     ## The Range:    c(start(tR), end(tR)) #> GMT #> [1] [2023-01-01] [2023-12-01]    range(tR) #> GMT #> [1] [2023-01-01] [2023-12-01]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsetting a 'timeDate' object — subset","title":"Subsetting a 'timeDate' object — subset","text":"Extracts replaces subsets \"timeDate\" objects.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsetting a 'timeDate' object — subset","text":"object class \"timeDate\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subsetting a 'timeDate' object — subset","text":"","code":"## timeCalendar -    tS = timeCalendar()   ## [ -     # Subsetting Second Quarter:    tS[4:6]  #> GMT #> [1] [2023-04-01] [2023-05-01] [2023-06-01]     ## [<-    # Replacing:"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method — summary-methods","title":"Summary method — summary-methods","text":"Summarizes details \"timeDate\" object.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method — summary-methods","text":"","code":"# S3 method for timeDate summary(object, ...)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method — summary-methods","text":"object object class \"timeDate\". ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary method — summary-methods","text":"Creates summary report details \"timeDate\"   object. includes starting end date, number dates   format financial center use.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method — summary-methods","text":"object S3 class \"timeDate_summary\", print   method","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method — summary-methods","text":"","code":"tC = timeCalendar() summary(tC) #> Start Record: 2023-01-01  #> End Record:   2023-12-01  #> Observations: 12  #> Format:       %Y-%m-%d  #> FinCenter:    GMT  #>"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove duplicated dates from 'timeDate' objects — unique","title":"Remove duplicated dates from 'timeDate' objects — unique","text":"Remove duplicated dates \"timeDate\" objects.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove duplicated dates from 'timeDate' objects — unique","text":"","code":"# S3 method for timeDate unique(x, ...)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove duplicated dates from 'timeDate' objects — unique","text":"x object class \"timeDate\". ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove duplicated dates from 'timeDate' objects — unique","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/base-unique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove duplicated dates from 'timeDate' objects — unique","text":"","code":"## c -    # Create Character Vectors:    dts = c(\"1989-09-28\", \"2001-01-15\", \"2004-08-30\", \"1990-02-09\")    dts #> [1] \"1989-09-28\" \"2001-01-15\" \"2004-08-30\" \"1990-02-09\"    tms = c(  \"23:12:55\",   \"10:34:02\",   \"08:30:00\",   \"11:18:23\")    tms #> [1] \"23:12:55\" \"10:34:02\" \"08:30:00\" \"11:18:23\"     ## \"+/-\" -     # Add One Day to a Given timeDate Object:    GMT = timeDate(dts, zone = \"GMT\", FinCenter = \"GMT\")    GMT #> GMT #> [1] [1989-09-28] [2001-01-15] [2004-08-30] [1990-02-09]    ZUR = timeDate(dts, zone = \"GMT\", FinCenter = \"Europe/Zurich\")    ZUR #> Europe/Zurich #> [1] [1989-09-28 01:00:00] [2001-01-15 01:00:00] [2004-08-30 02:00:00] #> [4] [1990-02-09 01:00:00]     ## c -     # Concatenate and Replicate timeDate Objects:    c(GMT[1:2], ZUR[1:2]) #> GMT #> [1] [1989-09-28] [2001-01-15] [1989-09-28] [2001-01-15]    c(ZUR[1:2], GMT[1:2]) #> Europe/Zurich #> [1] [1989-09-28 01:00:00] [2001-01-15 01:00:00] [1989-09-28 01:00:00] #> [4] [2001-01-15 01:00:00]     ## rep -     rep(ZUR[2], times = 3) #> Europe/Zurich #> [1] [2001-01-15 01:00:00] [2001-01-15 01:00:00] [2001-01-15 01:00:00]    rep(ZUR[2:3], times = 2)   #> Europe/Zurich #> [1] [2001-01-15 01:00:00] [2004-08-30 02:00:00] [2001-01-15 01:00:00] #> [4] [2004-08-30 02:00:00]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-Easter.html","id":null,"dir":"Reference","previous_headings":"","what":"Date of Easter — Easter","title":"Date of Easter — Easter","text":"Returns date Easter.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-Easter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date of Easter — Easter","text":"","code":"Easter(year = getRmetricsOptions(\"currentYear\"), shift = 0)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-Easter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date of Easter — Easter","text":"year integer value integer vector year(s). shift integer value, number days shifted Easter     date. Negative integers allowed.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-Easter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Date of Easter — Easter","text":"Holidays may two origins, ecclesiastical public/federal.      ecclesiastical calendars Christian churches based      cycles moveable immoveable feasts. Christmas, December 25th,      principal immoveable feast. Easter principal moveable      feast, dates moveable feasts determined      respect Easter. date Easter evaluated complex procedure whose detailed      explanation goes beyond description. reason calculation      complicate , date Easter linked (     inaccurate version ) Hebrew calendar. nevertheless short      answer question \"Easter?\" following: Easter      Sunday first Sunday first full moon vernal      equinox. long answer refer Toendering (1998). algorithm computes date Easter based algorithm      Oudin (1940). valid Gregorian Calendar year.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-Easter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date of Easter — Easter","text":"date Easter object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-Easter.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Date of Easter — Easter","text":"options compute Eastern Orthodox Easter dates.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-Easter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date of Easter — Easter","text":"","code":"## Easter -     # Current Year:    Easter() #> GMT #> [1] [2023-04-09]        # From 2001 to 2010:    Easter(2001:2010) #> GMT #>  [1] [2001-04-15] [2002-03-31] [2003-04-20] [2004-04-11] [2005-03-27] #>  [6] [2006-04-16] [2007-04-08] [2008-03-23] [2009-04-12] [2010-04-04]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-align.html","id":null,"dir":"Reference","previous_headings":"","what":"Align a 'timeDate' object to regular date/time stamps — align","title":"Align a 'timeDate' object to regular date/time stamps — align","text":"Aligns \"timeDate\" object regular date/time stamps.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-align.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align a 'timeDate' object to regular date/time stamps — align","text":"","code":"# S4 method for timeDate align(x, by = \"1d\", offset = \"0s\")  alignDaily(x, include.weekends=FALSE) alignMonthly(x, include.weekends=FALSE) alignQuarterly(x, include.weekends=FALSE)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-align.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align a 'timeDate' object to regular date/time stamps — align","text":"x object class \"timeDate\". character string formed integer length     period identifier. Valid values     \"w\", \"d\", \"h\", \"m\", \"s\",     weeks, days, hours, minutes seconds. example     bi-weekly period expressed \"2w\". offset character string set offset formed integer     length period identifier way     argument . include.weekends logical value indicating whether weekends     included.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-align.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Align a 'timeDate' object to regular date/time stamps — align","text":"functions alignDaily, alignMonthly,   alignMonthly simple use functions   generate end--day, end--month, end-quarter   \"timeDate\" objects. Weekends excluded   default. Optionally can added setting   argument include.weekends = TRUE.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-align.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align a 'timeDate' object to regular date/time stamps — align","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-align.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align a 'timeDate' object to regular date/time stamps — align","text":"","code":"## align -  # Align Bi-Weekly with a 3 Days Offset: (tC <- timeCalendar()) #> GMT #>  [1] [2023-01-01] [2023-02-01] [2023-03-01] [2023-04-01] [2023-05-01] #>  [6] [2023-06-01] [2023-07-01] [2023-08-01] [2023-09-01] [2023-10-01] #> [11] [2023-11-01] [2023-12-01] align(tC, by = \"2w\", offset = \"3d\") #> GMT #>  [1] [2023-01-04] [2023-01-18] [2023-02-01] [2023-02-15] [2023-03-01] #>  [6] [2023-03-15] [2023-03-29] [2023-04-12] [2023-04-26] [2023-05-10] #> [11] [2023-05-24] [2023-06-07] [2023-06-21] [2023-07-05] [2023-07-19] #> [16] [2023-08-02] [2023-08-16] [2023-08-30] [2023-09-13] [2023-09-27] #> [21] [2023-10-11] [2023-10-25] [2023-11-08] [2023-11-22]  ## alignDaily -  # Simple to use Functions: alignDaily(tC) #> GMT #>   [1] [2023-01-02] [2023-01-03] [2023-01-04] [2023-01-05] [2023-01-06] #>   [6] [2023-01-09] [2023-01-10] [2023-01-11] [2023-01-12] [2023-01-13] #>  [11] [2023-01-16] [2023-01-17] [2023-01-18] [2023-01-19] [2023-01-20] #>  [16] [2023-01-23] [2023-01-24] [2023-01-25] [2023-01-26] [2023-01-27] #>  [21] [2023-01-30] [2023-01-31] [2023-02-01] [2023-02-02] [2023-02-03] #>  [26] [2023-02-06] [2023-02-07] [2023-02-08] [2023-02-09] [2023-02-10] #>  [31] [2023-02-13] [2023-02-14] [2023-02-15] [2023-02-16] [2023-02-17] #>  [36] [2023-02-20] [2023-02-21] [2023-02-22] [2023-02-23] [2023-02-24] #>  [41] [2023-02-27] [2023-02-28] [2023-03-01] [2023-03-02] [2023-03-03] #>  [46] [2023-03-06] [2023-03-07] [2023-03-08] [2023-03-09] [2023-03-10] #>  [51] [2023-03-13] [2023-03-14] [2023-03-15] [2023-03-16] [2023-03-17] #>  [56] [2023-03-20] [2023-03-21] [2023-03-22] [2023-03-23] [2023-03-24] #>  [61] [2023-03-27] [2023-03-28] [2023-03-29] [2023-03-30] [2023-03-31] #>  [66] [2023-04-03] [2023-04-04] [2023-04-05] [2023-04-06] [2023-04-07] #>  [71] [2023-04-10] [2023-04-11] [2023-04-12] [2023-04-13] [2023-04-14] #>  [76] [2023-04-17] [2023-04-18] [2023-04-19] [2023-04-20] [2023-04-21] #>  [81] [2023-04-24] [2023-04-25] [2023-04-26] [2023-04-27] [2023-04-28] #>  [86] [2023-05-01] [2023-05-02] [2023-05-03] [2023-05-04] [2023-05-05] #>  [91] [2023-05-08] [2023-05-09] [2023-05-10] [2023-05-11] [2023-05-12] #>  [96] [2023-05-15] [2023-05-16] [2023-05-17] [2023-05-18] [2023-05-19] #> ... #>  [ reached getRmetricsOption('max.print') | getOption('max.print') -- omitted 140 rows ]] alignDaily(tC, include.weekends=TRUE) #> GMT #>   [1] [2023-01-01] [2023-01-02] [2023-01-03] [2023-01-04] [2023-01-05] #>   [6] [2023-01-06] [2023-01-07] [2023-01-08] [2023-01-09] [2023-01-10] #>  [11] [2023-01-11] [2023-01-12] [2023-01-13] [2023-01-14] [2023-01-15] #>  [16] [2023-01-16] [2023-01-17] [2023-01-18] [2023-01-19] [2023-01-20] #>  [21] [2023-01-21] [2023-01-22] [2023-01-23] [2023-01-24] [2023-01-25] #>  [26] [2023-01-26] [2023-01-27] [2023-01-28] [2023-01-29] [2023-01-30] #>  [31] [2023-01-31] [2023-02-01] [2023-02-02] [2023-02-03] [2023-02-04] #>  [36] [2023-02-05] [2023-02-06] [2023-02-07] [2023-02-08] [2023-02-09] #>  [41] [2023-02-10] [2023-02-11] [2023-02-12] [2023-02-13] [2023-02-14] #>  [46] [2023-02-15] [2023-02-16] [2023-02-17] [2023-02-18] [2023-02-19] #>  [51] [2023-02-20] [2023-02-21] [2023-02-22] [2023-02-23] [2023-02-24] #>  [56] [2023-02-25] [2023-02-26] [2023-02-27] [2023-02-28] [2023-03-01] #>  [61] [2023-03-02] [2023-03-03] [2023-03-04] [2023-03-05] [2023-03-06] #>  [66] [2023-03-07] [2023-03-08] [2023-03-09] [2023-03-10] [2023-03-11] #>  [71] [2023-03-12] [2023-03-13] [2023-03-14] [2023-03-15] [2023-03-16] #>  [76] [2023-03-17] [2023-03-18] [2023-03-19] [2023-03-20] [2023-03-21] #>  [81] [2023-03-22] [2023-03-23] [2023-03-24] [2023-03-25] [2023-03-26] #>  [86] [2023-03-27] [2023-03-28] [2023-03-29] [2023-03-30] [2023-03-31] #>  [91] [2023-04-01] [2023-04-02] [2023-04-03] [2023-04-04] [2023-04-05] #>  [96] [2023-04-06] [2023-04-07] [2023-04-08] [2023-04-09] [2023-04-10] #> ... #>  [ reached getRmetricsOption('max.print') | getOption('max.print') -- omitted 235 rows ]]  # Align to end-of-month Dates: alignMonthly(tC) #> GMT #>  [1] [2023-01-31] [2023-02-28] [2023-03-31] [2023-04-29] [2023-05-31] #>  [6] [2023-06-30] [2023-07-31] [2023-08-31] [2023-09-29] [2023-10-31] #> [11] [2023-11-30] [2023-12-30]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-dayOfWeek.html","id":null,"dir":"Reference","previous_headings":"","what":"Day of the week — dayOfWeek","title":"Day of the week — dayOfWeek","text":"Returns days week data \"timeDate\"   object.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-dayOfWeek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day of the week — dayOfWeek","text":"","code":"dayOfWeek(x)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-dayOfWeek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Day of the week — dayOfWeek","text":"x object class \"timeDate\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-dayOfWeek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Day of the week — dayOfWeek","text":"character vector giving days week corresponding   elements x. names English, abbreviated    three letters.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-dayOfWeek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Day of the week — dayOfWeek","text":"","code":"## timeCalendar -      tC = timeCalendar(2022)         ## The days of the Year:    dayOfWeek(tC) #> 2022-01-01 2022-02-01 2022-03-01 2022-04-01 2022-05-01 2022-06-01 2022-07-01  #>      \"Sat\"      \"Tue\"      \"Tue\"      \"Fri\"      \"Sun\"      \"Wed\"      \"Fri\"  #> 2022-08-01 2022-09-01 2022-10-01 2022-11-01 2022-12-01  #>      \"Mon\"      \"Thu\"      \"Sat\"      \"Tue\"      \"Thu\""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-dayOfYear.html","id":null,"dir":"Reference","previous_headings":"","what":"Day of the year — dayOfYear","title":"Day of the year — dayOfYear","text":"Returns days year data \"timeDate\"   object.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-dayOfYear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Day of the year — dayOfYear","text":"","code":"dayOfYear(x)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-dayOfYear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Day of the year — dayOfYear","text":"x object class \"timeDate\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-dayOfYear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Day of the year — dayOfYear","text":"vector integers representing number days since beginning   year. January, 1st one.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-dayOfYear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Day of the year — dayOfYear","text":"","code":"## timeCalendar -      tC = timeCalendar(2022)         ## The days of the Year:    dayOfYear(tC) #> 2022-01-01 2022-02-01 2022-03-01 2022-04-01 2022-05-01 2022-06-01 2022-07-01  #>          1         32         60         91        121        152        182  #> 2022-08-01 2022-09-01 2022-10-01 2022-11-01 2022-12-01  #>        213        244        274        305        335"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-endpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Endpoints indexes — .endpoints","title":"Endpoints indexes — .endpoints","text":"Returns endpoint indexes \"timeDate\" object.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-endpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Endpoints indexes — .endpoints","text":"","code":".endpoints(x, on = c(\"months\", \"years\", \"quarters\", \"weeks\", \"days\",     \"hours\", \"minutes\", \"seconds\"), k=1)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-endpoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Endpoints indexes — .endpoints","text":"x \"timeDate\" object. periods endpoints find character string.  Select :     \"months\", \"years\", \"quarters\", \"weeks\",     \"days\", \"hours\", \"minutes\", \"seconds\".  k along every k-th element.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-endpoints.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Endpoints indexes — .endpoints","text":".endpoints returns integer vector corresponding last   observation period specified , zero added   beginning vector, index last observation   x end.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-endpoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Endpoints indexes — .endpoints","text":"integer vector endpoints beginning 0 ending   value equal length x argument","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-endpoints.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Endpoints indexes — .endpoints","text":"Jeff Ryan, modified Diethelm Wuertz \"timeDate\" objects.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-endpoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Endpoints indexes — .endpoints","text":"","code":"## endpoints -     # Weekly Endpoints:    .endpoints(timeCalendar(), on=\"w\") #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-firstDay.html","id":null,"dir":"Reference","previous_headings":"","what":"First and last days — firstDay","title":"First and last days — firstDay","text":"Computes first/last day given month/quarter.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-firstDay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"First and last days — firstDay","text":"","code":"timeFirstDayInMonth(charvec, format = \"%Y-%m-%d\", zone = \"\",      FinCenter = \"\") timeLastDayInMonth(charvec, format = \"%Y-%m-%d\", zone = \"\",      FinCenter = \"\")  timeFirstDayInQuarter(charvec, format = \"%Y-%m-%d\", zone = \"\",      FinCenter = \"\") timeLastDayInQuarter(charvec, format = \"%Y-%m-%d\", zone = \"\",      FinCenter = \"\")"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-firstDay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"First and last days — firstDay","text":"charvec character vector dates times. format format specification input character vector. zone time zone financial center data recorded. FinCenter character location financial center named     \"continent/city\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-firstDay.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"First and last days — firstDay","text":"functions timeLastDayInMonth timeLastDayInMonth   return last first day, respectively, given month year. functionality quarterly time horizons returned   functions timeLastDayInQuarter timeLastDayInQuarter.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-firstDay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"First and last days — firstDay","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-firstDay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"First and last days — firstDay","text":"","code":"## Date as character String:    charvec = \"2006-04-16\"    myFinCenter = getRmetricsOptions(\"myFinCenter\")  ## timeLastDayInMonth-    # What date has the last day in a month for a given date ?    timeLastDayInMonth(charvec, format = \"%Y-%m-%d\",       zone = myFinCenter, FinCenter = myFinCenter) #> GMT #> [1] [2006-04-30]    timeLastDayInMonth(charvec) #> GMT #> [1] [2006-04-30]    timeLastDayInMonth(charvec, FinCenter = \"Zurich\") #> Zurich #> [1] [2006-04-30 02:00:00]     ## timeFirstDayInMonth -    # What date has the first day in a month for a given date ?    timeFirstDayInMonth(charvec) #> GMT #> [1] [2006-04-01]      ## timeLastDayInQuarter -    # What date has the last day in a quarter for a given date ?    timeLastDayInQuarter(charvec) #> GMT #> [1] [2006-06-30]      ## timeFirstDayInQuarter -    # What date has the first day in a quarter for a given date ?    timeFirstDayInQuarter(charvec) #> GMT #> [1] [2006-04-01]      ## timeNdayOnOrAfter    # What date has the first Monday on or after March 15, 1986 ?    timeNdayOnOrAfter(\"1986-03-15\", 1) #> GMT #> [1] [1986-03-17]      ## timeNdayOnOrBefore    # What date has Friday on or before April 22, 1977 ?    timeNdayOnOrBefore(\"1986-03-15\", 5) #> GMT #> [1] [1986-03-14]      ## timeNthNdayInMonth -    # What date is the second Monday in April 2004 ?    timeNthNdayInMonth(\"2004-04-01\", 1, 2) #> GMT #> [1] [2004-04-12]      ## timeLastNdayInMonth -    # What date has the last Tuesday in May, 1996 ?    timeLastNdayInMonth(\"1996-05-01\", 2) #> GMT #> [1] [1996-05-28]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-isBizday.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if dates are business or holidays — isBizday","title":"Check if dates are business or holidays — isBizday","text":"Tests date business day .","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-isBizday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if dates are business or holidays — isBizday","text":"","code":"isBizday(x, holidays = holidayNYSE(), wday = 1:5) isHoliday(x, holidays = holidayNYSE(), wday = 1:5)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-isBizday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if dates are business or holidays — isBizday","text":"x object class \"timeDate\". holidays holiday dates holiday calendar.  object class     \"timeDate\". wday Specify days considered weekdays. default     Mondays Fridays.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-isBizday.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if dates are business or holidays — isBizday","text":"Returns logical vector length x indicating   date business day, holiday, respectively.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-isBizday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if dates are business or holidays — isBizday","text":"logical vector length x","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-isBizday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if dates are business or holidays — isBizday","text":"","code":"## Dates in April, currentYear:    currentYear = getRmetricsOptions(\"currentYear\")    tS = timeSequence(       from = paste(currentYear, \"-03-01\", sep = \"\"),       to = paste(currentYear, \"-04-30\", sep = \"\"))    tS #> GMT #>  [1] [2023-03-01] [2023-03-02] [2023-03-03] [2023-03-04] [2023-03-05] #>  [6] [2023-03-06] [2023-03-07] [2023-03-08] [2023-03-09] [2023-03-10] #> [11] [2023-03-11] [2023-03-12] [2023-03-13] [2023-03-14] [2023-03-15] #> [16] [2023-03-16] [2023-03-17] [2023-03-18] [2023-03-19] [2023-03-20] #> [21] [2023-03-21] [2023-03-22] [2023-03-23] [2023-03-24] [2023-03-25] #> [26] [2023-03-26] [2023-03-27] [2023-03-28] [2023-03-29] [2023-03-30] #> [31] [2023-03-31] [2023-04-01] [2023-04-02] [2023-04-03] [2023-04-04] #> [36] [2023-04-05] [2023-04-06] [2023-04-07] [2023-04-08] [2023-04-09] #> [41] [2023-04-10] [2023-04-11] [2023-04-12] [2023-04-13] [2023-04-14] #> [46] [2023-04-15] [2023-04-16] [2023-04-17] [2023-04-18] [2023-04-19] #> [51] [2023-04-20] [2023-04-21] [2023-04-22] [2023-04-23] [2023-04-24] #> [56] [2023-04-25] [2023-04-26] [2023-04-27] [2023-04-28] [2023-04-29] #> [61] [2023-04-30]  ## Subset Business Days at NYSE:    holidayNYSE() #> NewYork #>  [1] [2023-01-02] [2023-01-16] [2023-02-20] [2023-04-07] [2023-05-29] #>  [6] [2023-06-19] [2023-07-04] [2023-09-04] [2023-11-23] [2023-12-25]    isBizday(tS, holidayNYSE()) #> 2023-03-01 2023-03-02 2023-03-03 2023-03-04 2023-03-05 2023-03-06 2023-03-07  #>       TRUE       TRUE       TRUE      FALSE      FALSE       TRUE       TRUE  #> 2023-03-08 2023-03-09 2023-03-10 2023-03-11 2023-03-12 2023-03-13 2023-03-14  #>       TRUE       TRUE       TRUE      FALSE      FALSE       TRUE       TRUE  #> 2023-03-15 2023-03-16 2023-03-17 2023-03-18 2023-03-19 2023-03-20 2023-03-21  #>       TRUE       TRUE       TRUE      FALSE      FALSE       TRUE       TRUE  #> 2023-03-22 2023-03-23 2023-03-24 2023-03-25 2023-03-26 2023-03-27 2023-03-28  #>       TRUE       TRUE       TRUE      FALSE      FALSE       TRUE       TRUE  #> 2023-03-29 2023-03-30 2023-03-31 2023-04-01 2023-04-02 2023-04-03 2023-04-04  #>       TRUE       TRUE       TRUE      FALSE      FALSE       TRUE       TRUE  #> 2023-04-05 2023-04-06 2023-04-07 2023-04-08 2023-04-09 2023-04-10 2023-04-11  #>       TRUE       TRUE      FALSE      FALSE      FALSE       TRUE       TRUE  #> 2023-04-12 2023-04-13 2023-04-14 2023-04-15 2023-04-16 2023-04-17 2023-04-18  #>       TRUE       TRUE       TRUE      FALSE      FALSE       TRUE       TRUE  #> 2023-04-19 2023-04-20 2023-04-21 2023-04-22 2023-04-23 2023-04-24 2023-04-25  #>       TRUE       TRUE       TRUE      FALSE      FALSE       TRUE       TRUE  #> 2023-04-26 2023-04-27 2023-04-28 2023-04-29 2023-04-30  #>       TRUE       TRUE       TRUE      FALSE      FALSE     tS[isBizday(tS, holidayNYSE())] #> GMT #>  [1] [2023-03-01] [2023-03-02] [2023-03-03] [2023-03-06] [2023-03-07] #>  [6] [2023-03-08] [2023-03-09] [2023-03-10] [2023-03-13] [2023-03-14] #> [11] [2023-03-15] [2023-03-16] [2023-03-17] [2023-03-20] [2023-03-21] #> [16] [2023-03-22] [2023-03-23] [2023-03-24] [2023-03-27] [2023-03-28] #> [21] [2023-03-29] [2023-03-30] [2023-03-31] [2023-04-03] [2023-04-04] #> [26] [2023-04-05] [2023-04-06] [2023-04-10] [2023-04-11] [2023-04-12] #> [31] [2023-04-13] [2023-04-14] [2023-04-17] [2023-04-18] [2023-04-19] #> [36] [2023-04-20] [2023-04-21] [2023-04-24] [2023-04-25] [2023-04-26] #> [41] [2023-04-27] [2023-04-28]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-isRegular.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a date/time vector is regular — isRegular","title":"Checks if a date/time vector is regular — isRegular","text":"Checks date/time vector regular. .e. daily,   monthly, quarterly date/time vector. date/time vector   regular frequency can determined calling function frequency.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-isRegular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a date/time vector is regular — isRegular","text":"","code":"# S4 method for timeDate isDaily(x) # S4 method for timeDate isMonthly(x) # S4 method for timeDate isQuarterly(x)  # S4 method for timeDate isRegular(x)  # S4 method for timeDate frequency(x, ...)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-isRegular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a date/time vector is regular — isRegular","text":"x object class \"timeDate\". ... arguments passed.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-isRegular.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks if a date/time vector is regular — isRegular","text":"date/time vector defined daily vector    one date/time stamp per day. date/time vector defined monthly vector    one date/time stamp per month. date/time vector defined quarterly vector    one date/time stamp per quarter. monthly date/time vector also daily vector, quarterly date/time   vector also monthly vector. regular date/time vector either monthly quarterly vector. yet implemented case weekly vectors.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-isRegular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a date/time vector is regular — isRegular","text":"* functions return TRUE FALSE depending    whether date/time vector fulfills condition . function frequency returns general 1, quarterly date/time   vectors 4, monthly vectors 12.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-isRegular.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if a date/time vector is regular — isRegular","text":"","code":"## None"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-isWeekday.html","id":null,"dir":"Reference","previous_headings":"","what":"Weekdays and weekends — isWeekday","title":"Weekdays and weekends — isWeekday","text":"Tests date weekday .","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-isWeekday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weekdays and weekends — isWeekday","text":"","code":"isWeekday(x, wday = 1:5) isWeekend(x, wday = 1:5)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-isWeekday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weekdays and weekends — isWeekday","text":"x object class \"timeDate\". wday Specify days considered weekdays. default     Mondays Fridays.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-isWeekday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weekdays and weekends — isWeekday","text":"logical vector indicating date weekday weekend day","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-isWeekday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weekdays and weekends — isWeekday","text":"","code":"## Dates in April, currentYear:    currentYear = getRmetricsOptions(\"currentYear\")    tS = timeSequence(       from = paste(currentYear, \"-03-01\", sep = \"\"),       to = paste(currentYear, \"-04-30\", sep = \"\"))    tS #> GMT #>  [1] [2023-03-01] [2023-03-02] [2023-03-03] [2023-03-04] [2023-03-05] #>  [6] [2023-03-06] [2023-03-07] [2023-03-08] [2023-03-09] [2023-03-10] #> [11] [2023-03-11] [2023-03-12] [2023-03-13] [2023-03-14] [2023-03-15] #> [16] [2023-03-16] [2023-03-17] [2023-03-18] [2023-03-19] [2023-03-20] #> [21] [2023-03-21] [2023-03-22] [2023-03-23] [2023-03-24] [2023-03-25] #> [26] [2023-03-26] [2023-03-27] [2023-03-28] [2023-03-29] [2023-03-30] #> [31] [2023-03-31] [2023-04-01] [2023-04-02] [2023-04-03] [2023-04-04] #> [36] [2023-04-05] [2023-04-06] [2023-04-07] [2023-04-08] [2023-04-09] #> [41] [2023-04-10] [2023-04-11] [2023-04-12] [2023-04-13] [2023-04-14] #> [46] [2023-04-15] [2023-04-16] [2023-04-17] [2023-04-18] [2023-04-19] #> [51] [2023-04-20] [2023-04-21] [2023-04-22] [2023-04-23] [2023-04-24] #> [56] [2023-04-25] [2023-04-26] [2023-04-27] [2023-04-28] [2023-04-29] #> [61] [2023-04-30]  ## Subset of Weekends:    isWeekend(tS) #> 2023-03-01 2023-03-02 2023-03-03 2023-03-04 2023-03-05 2023-03-06 2023-03-07  #>      FALSE      FALSE      FALSE       TRUE       TRUE      FALSE      FALSE  #> 2023-03-08 2023-03-09 2023-03-10 2023-03-11 2023-03-12 2023-03-13 2023-03-14  #>      FALSE      FALSE      FALSE       TRUE       TRUE      FALSE      FALSE  #> 2023-03-15 2023-03-16 2023-03-17 2023-03-18 2023-03-19 2023-03-20 2023-03-21  #>      FALSE      FALSE      FALSE       TRUE       TRUE      FALSE      FALSE  #> 2023-03-22 2023-03-23 2023-03-24 2023-03-25 2023-03-26 2023-03-27 2023-03-28  #>      FALSE      FALSE      FALSE       TRUE       TRUE      FALSE      FALSE  #> 2023-03-29 2023-03-30 2023-03-31 2023-04-01 2023-04-02 2023-04-03 2023-04-04  #>      FALSE      FALSE      FALSE       TRUE       TRUE      FALSE      FALSE  #> 2023-04-05 2023-04-06 2023-04-07 2023-04-08 2023-04-09 2023-04-10 2023-04-11  #>      FALSE      FALSE      FALSE       TRUE       TRUE      FALSE      FALSE  #> 2023-04-12 2023-04-13 2023-04-14 2023-04-15 2023-04-16 2023-04-17 2023-04-18  #>      FALSE      FALSE      FALSE       TRUE       TRUE      FALSE      FALSE  #> 2023-04-19 2023-04-20 2023-04-21 2023-04-22 2023-04-23 2023-04-24 2023-04-25  #>      FALSE      FALSE      FALSE       TRUE       TRUE      FALSE      FALSE  #> 2023-04-26 2023-04-27 2023-04-28 2023-04-29 2023-04-30  #>      FALSE      FALSE      FALSE       TRUE       TRUE     tS[isWeekend(tS)] #> GMT #>  [1] [2023-03-04] [2023-03-05] [2023-03-11] [2023-03-12] [2023-03-18] #>  [6] [2023-03-19] [2023-03-25] [2023-03-26] [2023-04-01] [2023-04-02] #> [11] [2023-04-08] [2023-04-09] [2023-04-15] [2023-04-16] [2023-04-22] #> [16] [2023-04-23] [2023-04-29] [2023-04-30]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-julian.html","id":null,"dir":"Reference","previous_headings":"","what":"Julian counts and calendar atoms — julian","title":"Julian counts and calendar atoms — julian","text":"Returns Julian day counts, date/time atoms \"timeDate\" object,   extracts month atoms \"timeDate\" object.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-julian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Julian counts and calendar atoms — julian","text":"","code":"# S4 method for timeDate julian(x, origin = timeDate(\"1970-01-01\"),      units = c(\"auto\", \"secs\", \"mins\", \"hours\", \"days\", \"weeks\"),      zone = NULL, FinCenter = NULL, ...)  # S4 method for timeDate atoms(x, ...)  # S4 method for timeDate months(x, abbreviate = NULL)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-julian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Julian counts and calendar atoms — julian","text":"x object class \"timeDate\". origin length-one object inheriting class \"timeDate\"     setting origin julian counter. units character string denoting date/time units      results desired. zone time zone financial center data recorded. FinCenter character string location       financial center named \"continent/city\". abbreviate currently used. ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-julian.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Julian counts and calendar atoms — julian","text":"Generic functions extract properties \"timeDate\"   objects. julian months generics base R,   atoms generic defined package. julian extracts number days since origin (can   fractional), see also julian. atoms extracts calendar atoms \"timeDate\"   object, .e., year, month, day, optionally, hour, minute   second.  result data frame financial center   atrribute \"control\". months extracts months integers 1 12, unlike   base::months returns names months.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-julian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Julian counts and calendar atoms — julian","text":"julian, difftime object; atoms, data.frame attribute \"control\" containing financial center input vector x.    data frame following components: Y year, m month, d day, H hour, M minute, S scond; months, numeric vector attribute \"control\" containing financial center.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-julian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Julian counts and calendar atoms — julian","text":"","code":"## julian -    tC = timeCalendar(2022)    julian(tC)[1:3] #> Time differences in days #> [1] 18993 19024 19052     ## atoms -    atoms(tC) #>       Y  m d H M S #> 1  2022  1 1 0 0 0 #> 2  2022  2 1 0 0 0 #> 3  2022  3 1 0 0 0 #> 4  2022  4 1 0 0 0 #> 5  2022  5 1 0 0 0 #> 6  2022  6 1 0 0 0 #> 7  2022  7 1 0 0 0 #> 8  2022  8 1 0 0 0 #> 9  2022  9 1 0 0 0 #> 10 2022 10 1 0 0 0 #> 11 2022 11 1 0 0 0 #> 12 2022 12 1 0 0 0     ## months -    months(tC) #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 #> attr(,\"control\") #> FinCenter  #>     \"GMT\""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-nDay.html","id":null,"dir":"Reference","previous_headings":"","what":"n-th n-day dates — nDay","title":"n-th n-day dates — nDay","text":"Computes date n-th last occurrence n-day   year/month.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-nDay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"n-th n-day dates — nDay","text":"","code":"timeNthNdayInMonth(charvec, nday = 1, nth = 1, format = \"%Y-%m-%d\",     zone = \"\", FinCenter = \"\")  timeLastNdayInMonth(charvec, nday = 1, format = \"%Y-%m-%d\",     zone = \"\", FinCenter = \"\")"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-nDay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"n-th n-day dates — nDay","text":"charvec character vector dates times. nday integer vector entries ranging 0     (Sunday) 6 (Saturday). nth integer vector numbering n-th occurence. format format specification input character vector. zone time zone financial center data recorded. FinCenter character location financial     center named \"continent/city\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-nDay.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"n-th n-day dates — nDay","text":"timeNthNdayInMonth returns nth occurrence n-day   (nth = 1,...,5) year, month. timeLastNdayInMonth returns last nday   year, month.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-nDay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"n-th n-day dates — nDay","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-nDay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"n-th n-day dates — nDay","text":"","code":"## timeNthNdayInMonth -    # What date is the second Monday in April 2004 ?    timeNthNdayInMonth(\"2004-04-01\", 1, 2) #> GMT #> [1] [2004-04-12]  ## timeLastNdayInMonth -    # What date has the last Tuesday in May, 1996 ?    timeLastNdayInMonth(\"1996-05-01\", 2) #> GMT #> [1] [1996-05-28]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-onOrAfter.html","id":null,"dir":"Reference","previous_headings":"","what":"On-or-after/before dates — onOrAfter","title":"On-or-after/before dates — onOrAfter","text":"Compute date \"--\" \"--\" n-day.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-onOrAfter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"On-or-after/before dates — onOrAfter","text":"","code":"timeNdayOnOrAfter(charvec, nday = 1, format = \"%Y-%m-%d\",      zone = \"\", FinCenter = \"\")      timeNdayOnOrBefore(charvec, nday = 1, format = \"%Y-%m-%d\",      zone = \"\", FinCenter = \"\")"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-onOrAfter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"On-or-after/before dates — onOrAfter","text":"charvec character vector dates times. nday integer vector entries ranging      0 (Sunday) 6 (Saturday). format format specification input character vector. zone time zone financial center data recorded. FinCenter character location       financial center named \"continent/city\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-onOrAfter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"On-or-after/before dates — onOrAfter","text":"timeNdayOnOrAfter returns date specified month   n-day (e.g. Sunday) given date. Month date   given argument charvec. function timeNdayOnOrBefore returns date   n-day given date.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-onOrAfter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"On-or-after/before dates — onOrAfter","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-onOrAfter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"On-or-after/before dates — onOrAfter","text":"","code":"## Date as character String:    charvec = \"2006-04-16\"     ## timeNdayOnOrAfter    # What date has the first Monday on or after March 15, 1986 ?    timeNdayOnOrAfter(\"1986-03-15\", 1) #> GMT #> [1] [1986-03-17]      ## timeNdayOnOrBefore    # What date has Friday on or before April 22, 1977 ?    timeNdayOnOrBefore(\"1986-03-15\", 5) #> GMT #> [1] [1986-03-14]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-periods.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling periods — periods","title":"Rolling periods — periods","text":"Returns start end dates rolling periods.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-periods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rolling periods — periods","text":"","code":"periods(x, period = \"12m\", by = \"1m\", offset = \"0d\") periodicallyRolling(x, period = \"52w\", by = \"4w\", offset = \"0d\") monthlyRolling(x, period = \"12m\", by = \"1m\")"},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-periods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling periods — periods","text":"x object class timeDate. period span string, consisting length integer       unit value, e.g. \"52w\" 52 weeks. span string, consisting length integer       unit value, e.g. \"4w\" 4 weeks. offset span string, consisting length integer       unit value, e.g. \"0d\" offset.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-periods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling periods — periods","text":"Periodically Rolling - Allowed unit values \"m\" 4 weeks, \"w\"   weeks, \"d\" days, \"H\" hours, \"M\" minutes, \"S\"   seconds. Monthly Calendar Rolling - allowed allowed unit value \"m\"   monthly periods. Express quarterly period \"3m\", semester   \"6m\", year \"12m\" etc.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/calendar-periods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling periods — periods","text":"","code":"## Create Time Sequence -    x <- timeSequence(from = \"2001-01-01\", to = \"2009-01-01\", by = \"day\")  ## Generate Periods -    periods(x, \"12m\", \"1m\") #> $from #> GMT #>  [1] [2001-01-01] [2001-02-01] [2001-03-01] [2001-04-01] [2001-05-01] #>  [6] [2001-06-01] [2001-07-01] [2001-08-01] [2001-09-01] [2001-10-01] #> [11] [2001-11-01] [2001-12-01] [2002-01-01] [2002-02-01] [2002-03-01] #> [16] [2002-04-01] [2002-05-01] [2002-06-01] [2002-07-01] [2002-08-01] #> [21] [2002-09-01] [2002-10-01] [2002-11-01] [2002-12-01] [2003-01-01] #> [26] [2003-02-01] [2003-03-01] [2003-04-01] [2003-05-01] [2003-06-01] #> [31] [2003-07-01] [2003-08-01] [2003-09-01] [2003-10-01] [2003-11-01] #> [36] [2003-12-01] [2004-01-01] [2004-02-01] [2004-03-01] [2004-04-01] #> [41] [2004-05-01] [2004-06-01] [2004-07-01] [2004-08-01] [2004-09-01] #> [46] [2004-10-01] [2004-11-01] [2004-12-01] [2005-01-01] [2005-02-01] #> [51] [2005-03-01] [2005-04-01] [2005-05-01] [2005-06-01] [2005-07-01] #> [56] [2005-08-01] [2005-09-01] [2005-10-01] [2005-11-01] [2005-12-01] #> [61] [2006-01-01] [2006-02-01] [2006-03-01] [2006-04-01] [2006-05-01] #> [66] [2006-06-01] [2006-07-01] [2006-08-01] [2006-09-01] [2006-10-01] #> [71] [2006-11-01] [2006-12-01] [2007-01-01] [2007-02-01] [2007-03-01] #> [76] [2007-04-01] [2007-05-01] [2007-06-01] [2007-07-01] [2007-08-01] #> [81] [2007-09-01] [2007-10-01] [2007-11-01] [2007-12-01] [2008-01-01] #> [86] [2008-02-01] #>  #> $to #> GMT #>  [1] [2001-12-31] [2002-01-31] [2002-02-28] [2002-03-31] [2002-04-30] #>  [6] [2002-05-31] [2002-06-30] [2002-07-31] [2002-08-31] [2002-09-30] #> [11] [2002-10-31] [2002-11-30] [2002-12-31] [2003-01-31] [2003-02-28] #> [16] [2003-03-31] [2003-04-30] [2003-05-31] [2003-06-30] [2003-07-31] #> [21] [2003-08-31] [2003-09-30] [2003-10-31] [2003-11-30] [2003-12-31] #> [26] [2004-01-31] [2004-02-29] [2004-03-31] [2004-04-30] [2004-05-31] #> [31] [2004-06-30] [2004-07-31] [2004-08-31] [2004-09-30] [2004-10-31] #> [36] [2004-11-30] [2004-12-31] [2005-01-31] [2005-02-28] [2005-03-31] #> [41] [2005-04-30] [2005-05-31] [2005-06-30] [2005-07-31] [2005-08-31] #> [46] [2005-09-30] [2005-10-31] [2005-11-30] [2005-12-31] [2006-01-31] #> [51] [2006-02-28] [2006-03-31] [2006-04-30] [2006-05-31] [2006-06-30] #> [56] [2006-07-31] [2006-08-31] [2006-09-30] [2006-10-31] [2006-11-30] #> [61] [2006-12-31] [2007-01-31] [2007-02-28] [2007-03-31] [2007-04-30] #> [66] [2007-05-31] [2007-06-30] [2007-07-31] [2007-08-31] [2007-09-30] #> [71] [2007-10-31] [2007-11-30] [2007-12-31] [2008-01-31] [2008-02-29] #> [76] [2008-03-31] [2008-04-30] [2008-05-31] [2008-06-30] [2008-07-31] #> [81] [2008-08-31] [2008-09-30] [2008-10-31] [2008-11-30] [2008-12-31] #> [86] [2009-01-31] #>  #> attr(,\"control\") #> GMT #>        start          end  #> [2001-01-01] [2009-01-01]     periods(x, \"52w\", \"4w\") #> $from #> GMT #>  [1] [2001-01-01] [2001-01-29] [2001-02-26] [2001-03-26] [2001-04-23] #>  [6] [2001-05-21] [2001-06-18] [2001-07-16] [2001-08-13] [2001-09-10] #> [11] [2001-10-08] [2001-11-05] [2001-12-03] [2001-12-31] [2002-01-28] #> [16] [2002-02-25] [2002-03-25] [2002-04-22] [2002-05-20] [2002-06-17] #> [21] [2002-07-15] [2002-08-12] [2002-09-09] [2002-10-07] [2002-11-04] #> [26] [2002-12-02] [2002-12-30] [2003-01-27] [2003-02-24] [2003-03-24] #> [31] [2003-04-21] [2003-05-19] [2003-06-16] [2003-07-14] [2003-08-11] #> [36] [2003-09-08] [2003-10-06] [2003-11-03] [2003-12-01] [2003-12-29] #> [41] [2004-01-26] [2004-02-23] [2004-03-22] [2004-04-19] [2004-05-17] #> [46] [2004-06-14] [2004-07-12] [2004-08-09] [2004-09-06] [2004-10-04] #> [51] [2004-11-01] [2004-11-29] [2004-12-27] [2005-01-24] [2005-02-21] #> [56] [2005-03-21] [2005-04-18] [2005-05-16] [2005-06-13] [2005-07-11] #> [61] [2005-08-08] [2005-09-05] [2005-10-03] [2005-10-31] [2005-11-28] #> [66] [2005-12-26] [2006-01-23] [2006-02-20] [2006-03-20] [2006-04-17] #> [71] [2006-05-15] [2006-06-12] [2006-07-10] [2006-08-07] [2006-09-04] #> [76] [2006-10-02] [2006-10-30] [2006-11-27] [2006-12-25] [2007-01-22] #> [81] [2007-02-19] [2007-03-19] [2007-04-16] [2007-05-14] [2007-06-11] #> [86] [2007-07-09] [2007-08-06] [2007-09-03] [2007-10-01] [2007-10-29] #> [91] [2007-11-26] [2007-12-24] #>  #> $to #> GMT #>  [1] [2001-12-31] [2002-01-28] [2002-02-25] [2002-03-25] [2002-04-22] #>  [6] [2002-05-20] [2002-06-17] [2002-07-15] [2002-08-12] [2002-09-09] #> [11] [2002-10-07] [2002-11-04] [2002-12-02] [2002-12-30] [2003-01-27] #> [16] [2003-02-24] [2003-03-24] [2003-04-21] [2003-05-19] [2003-06-16] #> [21] [2003-07-14] [2003-08-11] [2003-09-08] [2003-10-06] [2003-11-03] #> [26] [2003-12-01] [2003-12-29] [2004-01-26] [2004-02-23] [2004-03-22] #> [31] [2004-04-19] [2004-05-17] [2004-06-14] [2004-07-12] [2004-08-09] #> [36] [2004-09-06] [2004-10-04] [2004-11-01] [2004-11-29] [2004-12-27] #> [41] [2005-01-24] [2005-02-21] [2005-03-21] [2005-04-18] [2005-05-16] #> [46] [2005-06-13] [2005-07-11] [2005-08-08] [2005-09-05] [2005-10-03] #> [51] [2005-10-31] [2005-11-28] [2005-12-26] [2006-01-23] [2006-02-20] #> [56] [2006-03-20] [2006-04-17] [2006-05-15] [2006-06-12] [2006-07-10] #> [61] [2006-08-07] [2006-09-04] [2006-10-02] [2006-10-30] [2006-11-27] #> [66] [2006-12-25] [2007-01-22] [2007-02-19] [2007-03-19] [2007-04-16] #> [71] [2007-05-14] [2007-06-11] [2007-07-09] [2007-08-06] [2007-09-03] #> [76] [2007-10-01] [2007-10-29] [2007-11-26] [2007-12-24] [2008-01-21] #> [81] [2008-02-18] [2008-03-17] [2008-04-14] [2008-05-12] [2008-06-09] #> [86] [2008-07-07] [2008-08-04] [2008-09-01] [2008-09-29] [2008-10-27] #> [91] [2008-11-24] [2008-12-22] #>  #> attr(,\"control\") #> GMT #>        start          end  #> [2001-01-01] [2009-01-01]   ## Roll Periodically -    periodicallyRolling(x) #> $from #> GMT #>  [1] [2001-01-01] [2001-01-29] [2001-02-26] [2001-03-26] [2001-04-23] #>  [6] [2001-05-21] [2001-06-18] [2001-07-16] [2001-08-13] [2001-09-10] #> [11] [2001-10-08] [2001-11-05] [2001-12-03] [2001-12-31] [2002-01-28] #> [16] [2002-02-25] [2002-03-25] [2002-04-22] [2002-05-20] [2002-06-17] #> [21] [2002-07-15] [2002-08-12] [2002-09-09] [2002-10-07] [2002-11-04] #> [26] [2002-12-02] [2002-12-30] [2003-01-27] [2003-02-24] [2003-03-24] #> [31] [2003-04-21] [2003-05-19] [2003-06-16] [2003-07-14] [2003-08-11] #> [36] [2003-09-08] [2003-10-06] [2003-11-03] [2003-12-01] [2003-12-29] #> [41] [2004-01-26] [2004-02-23] [2004-03-22] [2004-04-19] [2004-05-17] #> [46] [2004-06-14] [2004-07-12] [2004-08-09] [2004-09-06] [2004-10-04] #> [51] [2004-11-01] [2004-11-29] [2004-12-27] [2005-01-24] [2005-02-21] #> [56] [2005-03-21] [2005-04-18] [2005-05-16] [2005-06-13] [2005-07-11] #> [61] [2005-08-08] [2005-09-05] [2005-10-03] [2005-10-31] [2005-11-28] #> [66] [2005-12-26] [2006-01-23] [2006-02-20] [2006-03-20] [2006-04-17] #> [71] [2006-05-15] [2006-06-12] [2006-07-10] [2006-08-07] [2006-09-04] #> [76] [2006-10-02] [2006-10-30] [2006-11-27] [2006-12-25] [2007-01-22] #> [81] [2007-02-19] [2007-03-19] [2007-04-16] [2007-05-14] [2007-06-11] #> [86] [2007-07-09] [2007-08-06] [2007-09-03] [2007-10-01] [2007-10-29] #> [91] [2007-11-26] [2007-12-24] #>  #> $to #> GMT #>  [1] [2001-12-31] [2002-01-28] [2002-02-25] [2002-03-25] [2002-04-22] #>  [6] [2002-05-20] [2002-06-17] [2002-07-15] [2002-08-12] [2002-09-09] #> [11] [2002-10-07] [2002-11-04] [2002-12-02] [2002-12-30] [2003-01-27] #> [16] [2003-02-24] [2003-03-24] [2003-04-21] [2003-05-19] [2003-06-16] #> [21] [2003-07-14] [2003-08-11] [2003-09-08] [2003-10-06] [2003-11-03] #> [26] [2003-12-01] [2003-12-29] [2004-01-26] [2004-02-23] [2004-03-22] #> [31] [2004-04-19] [2004-05-17] [2004-06-14] [2004-07-12] [2004-08-09] #> [36] [2004-09-06] [2004-10-04] [2004-11-01] [2004-11-29] [2004-12-27] #> [41] [2005-01-24] [2005-02-21] [2005-03-21] [2005-04-18] [2005-05-16] #> [46] [2005-06-13] [2005-07-11] [2005-08-08] [2005-09-05] [2005-10-03] #> [51] [2005-10-31] [2005-11-28] [2005-12-26] [2006-01-23] [2006-02-20] #> [56] [2006-03-20] [2006-04-17] [2006-05-15] [2006-06-12] [2006-07-10] #> [61] [2006-08-07] [2006-09-04] [2006-10-02] [2006-10-30] [2006-11-27] #> [66] [2006-12-25] [2007-01-22] [2007-02-19] [2007-03-19] [2007-04-16] #> [71] [2007-05-14] [2007-06-11] [2007-07-09] [2007-08-06] [2007-09-03] #> [76] [2007-10-01] [2007-10-29] [2007-11-26] [2007-12-24] [2008-01-21] #> [81] [2008-02-18] [2008-03-17] [2008-04-14] [2008-05-12] [2008-06-09] #> [86] [2008-07-07] [2008-08-04] [2008-09-01] [2008-09-29] [2008-10-27] #> [91] [2008-11-24] [2008-12-22] #>  #> attr(,\"control\") #> GMT #>        start          end  #> [2001-01-01] [2009-01-01]   ## Roll Monthly -    monthlyRolling(x) #> $from #> GMT #>  [1] [2001-01-01] [2001-02-01] [2001-03-01] [2001-04-01] [2001-05-01] #>  [6] [2001-06-01] [2001-07-01] [2001-08-01] [2001-09-01] [2001-10-01] #> [11] [2001-11-01] [2001-12-01] [2002-01-01] [2002-02-01] [2002-03-01] #> [16] [2002-04-01] [2002-05-01] [2002-06-01] [2002-07-01] [2002-08-01] #> [21] [2002-09-01] [2002-10-01] [2002-11-01] [2002-12-01] [2003-01-01] #> [26] [2003-02-01] [2003-03-01] [2003-04-01] [2003-05-01] [2003-06-01] #> [31] [2003-07-01] [2003-08-01] [2003-09-01] [2003-10-01] [2003-11-01] #> [36] [2003-12-01] [2004-01-01] [2004-02-01] [2004-03-01] [2004-04-01] #> [41] [2004-05-01] [2004-06-01] [2004-07-01] [2004-08-01] [2004-09-01] #> [46] [2004-10-01] [2004-11-01] [2004-12-01] [2005-01-01] [2005-02-01] #> [51] [2005-03-01] [2005-04-01] [2005-05-01] [2005-06-01] [2005-07-01] #> [56] [2005-08-01] [2005-09-01] [2005-10-01] [2005-11-01] [2005-12-01] #> [61] [2006-01-01] [2006-02-01] [2006-03-01] [2006-04-01] [2006-05-01] #> [66] [2006-06-01] [2006-07-01] [2006-08-01] [2006-09-01] [2006-10-01] #> [71] [2006-11-01] [2006-12-01] [2007-01-01] [2007-02-01] [2007-03-01] #> [76] [2007-04-01] [2007-05-01] [2007-06-01] [2007-07-01] [2007-08-01] #> [81] [2007-09-01] [2007-10-01] [2007-11-01] [2007-12-01] [2008-01-01] #> [86] [2008-02-01] #>  #> $to #> GMT #>  [1] [2001-12-31] [2002-01-31] [2002-02-28] [2002-03-31] [2002-04-30] #>  [6] [2002-05-31] [2002-06-30] [2002-07-31] [2002-08-31] [2002-09-30] #> [11] [2002-10-31] [2002-11-30] [2002-12-31] [2003-01-31] [2003-02-28] #> [16] [2003-03-31] [2003-04-30] [2003-05-31] [2003-06-30] [2003-07-31] #> [21] [2003-08-31] [2003-09-30] [2003-10-31] [2003-11-30] [2003-12-31] #> [26] [2004-01-31] [2004-02-29] [2004-03-31] [2004-04-30] [2004-05-31] #> [31] [2004-06-30] [2004-07-31] [2004-08-31] [2004-09-30] [2004-10-31] #> [36] [2004-11-30] [2004-12-31] [2005-01-31] [2005-02-28] [2005-03-31] #> [41] [2005-04-30] [2005-05-31] [2005-06-30] [2005-07-31] [2005-08-31] #> [46] [2005-09-30] [2005-10-31] [2005-11-30] [2005-12-31] [2006-01-31] #> [51] [2006-02-28] [2006-03-31] [2006-04-30] [2006-05-31] [2006-06-30] #> [56] [2006-07-31] [2006-08-31] [2006-09-30] [2006-10-31] [2006-11-30] #> [61] [2006-12-31] [2007-01-31] [2007-02-28] [2007-03-31] [2007-04-30] #> [66] [2007-05-31] [2007-06-30] [2007-07-31] [2007-08-31] [2007-09-30] #> [71] [2007-10-31] [2007-11-30] [2007-12-31] [2008-01-31] [2008-02-29] #> [76] [2008-03-31] [2008-04-30] [2008-05-31] [2008-06-30] [2008-07-31] #> [81] [2008-08-31] [2008-09-30] [2008-10-31] [2008-11-30] [2008-12-31] #> [86] [2009-01-31] #>  #> attr(,\"control\") #> GMT #>        start          end  #> [2001-01-01] [2009-01-01]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/class-timeDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Class \"timeDate\" represents date time objects.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/class-timeDate.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls functions   timeDate, timeSequence   timeCalendar, among others.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/class-timeDate.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Data: Object class \"POSIXct\":        vector POSIXct dates times always related       \"GMT\". format: Object class \"character\":        character string denoting format specification        input data character vector. FinCenter: Object class \"character\":        character string location       financial center named \"continent/city\", just \"city\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/class-timeDate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class ","text":"management chronological objects R three concepts   available: first implementation date time R's   chron package neglecting locals, time zones day light saving   times. approach cases appropriate economic time    series. second approach, available R's base package implements    POSIX standard date time objects, named \"POSIXt\". Unfortunately, representation objects cases   operating system dependent especially MS Windows several    problems appeared time management time zones    day light saving times. Rmetrics overcomes difficulties    POSIX objects introduce new S4 class \"timeDate\" objects    allow powerful methods represent dates times    different financial centers around world. Many basic functionalities objects common    S-Plus' \"timeDate\" objects thus many privately    written functions SPlus/FinMetrics may also used within   R/Rmetrics environment. major difference time zone concept replaced   \"Financial Center\" concept. FinCenter character variable   specifies living financial center   working. variable myFinCenter can overwrite   default setting personal settings. specification    FinCenter system knows rules rules day    light saving times applied, holiday calendar,    currency, interest rate conventions.    (specifications already implemented.) Many   aspects can easily accessed financial center named.   can distinguish Frankfurt Zurich, belong   time zone, differed DST changes eighties   different holiday calendars. Futhermore, since underlying time   refers \"GMT\" DST rules information available   local (ASCII) databases, sure, R/Rmetrics delivers    date/time concept every computer independent operating    systemin use, identical results. Another important feature \"timeDate\" concept used   fact rely American European ways write dates.   use consequently ISO-8601 standard date time notations. Generation \"timeDate\" Objects defined \"timeDate\" class many aspects similar   S-Plus class name, also important   advantageous differeneces. S4 class four Slots, Data   slot holds date time 'POSIXct' objects standard   ISO-8601 format, Dim slot gives dimension   data object (.e. length), format specification    slot FinCenter slot holds name financial    center. default value Three functions allow cgenerate date/time objects: \"timeDate\"   character vectors, timeCalendar date time atoms,   timeSequence \"/\" \"/length\" sequence   specification. Note, time zone transformations easily handled   \"timeDate\" functions can also take \"timeDate\"   POSIXt objects inputs, transforming   financial centers /time zones specified arguments zone   FinCenter. Finally function Sys.timeDate returns   current system time form \"timeDate\" object. Tests Representation timeDate Objects: Rmetrics implemented several methods represent   \"timeDate\" objects. example,    print method returns date/time square \"[]\" brackets    distinguish output date time objects.    top date   time output name FinCenter printed. summary   method returns printed report information   \"timeDate\" object. Finally, format methods allows   transform objects ISO conform formatted character strings. Mathematical Operations: Rmetrics supports methods   perform many mathematical operations. Included methods    extract    replace subsets \"timeDate\" objects,    perform arithmetic \"+\" \"-\" operations,    group Ops generic functions,   return suitably lagged iterated differences diff,    return differences difftimeDate two \"timeDate\"    objects, concatenate objects, replicate objects,    round objects,    truncate objects using trunc,    extract first last entry vector,    sort objects elements date/time vector,    revert \"timeDate\" vector objects, among functions. Transformation Objects: Rmetrics also functions transform dat/time objects    different representations. Included methods transform    \"timeDate\" objects character strings, data frames,    POSIXct POSIXlt objects, julian   counts. One can extract date/time atoms calendar    dates, months atoms \"timeDate\"    object.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/class-timeDate.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class ","text":"Originally, functions written Rmetrics users using R   Rmetrics Microsoft's Windows XP operating system time zones,   daylight saving times holiday calendars insufficiently   supported. usage Ical Library introduction FinCenter   concept originally develloped R Version 1.5.   \"timeDate\" timeSeries objects added   R Version 1.8.1. Minor changes made adapt functions   R Version 1.9.1. consequence, newer concepts like   Date objects yet considered included   collection date time concepts. R Version 2.3.0 major   update made adding many new generic functions renaming   already existing functions, please aware . Note, date/time conversion arbitrary time zone GMT   unique, since date/time objects appear twice hour   DST changes isdt flag recorded. bookkeeping    takes care DST effective yet included.    However, applications necessary since markets    closed weekends, especially times DST usually changes.    planned future implement DST supporting   facility. ISO-8601 midnight standard implemented. Note,   example \"2005-01-01 24:00:00\" accepted valid date/time string. Also available automated format recognition, user   specify format string common date/time   formats.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/class-timeDate.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":"timeDate signature(charvec = \"timeDate\"):       create objects class \"timeDate\", see timeDate; show signature(object = \"timeDate\"):        prints object class \"timeDate\"; plot signature(x = \"timeDate\"): points signature(x = \"timeDate\"): lines signature(x = \"timeDate\"): abline signature(= \"\", b = \"\", h = \"\", v =\"timeDate\"):        see plot-methods. [ signature(x = \"timeDate\", = \"\", j = \"missing\"): [ signature(x = \"timeDate\", = \"character\", j = \"missing\"): [ signature(x = \"timeDate\", = \"logical\", j = \"missing\"): [ signature(x = \"timeDate\", = \"missing\", j = \"missing\"): [ signature(x = \"timeDate\", = \"numeric\", j =\t\"missing\"):         take parts \"timeDate\" object, see subset. finCenter signature(x = \"timeDate\"): finCenter<- signature(x = \"timeDate\"):       see finCenter. atoms signature(x = \"timeDate\"): months signature(x = \"timeDate\"): julian signature(x = \"timeDate\"):       see julian. align signature(x = \"timeDate\"):       see align. isDaily signature(x = \"timeDate\"): isMonthly signature(x = \"timeDate\"): isQuarterly signature(x = \"timeDate\"): isRegular signature(x = \"timeDate\"):       see see isRegular. frequency signature(x = \"timeDate\"):       see frequency. .na signature(x = \"timeDate\"):       see .na-methods. sample signature(x = \"timeDate\"):       see sample. Ops signature(e1 = \"timeDate\", e2 = \"timeDate\"): + signature(e1 = \"numeric\", e2 = \"timeDate\"): + signature(e1 = \"timeDate\", e2 = \"numeric\"): + signature(e1 = \"timeDate\", e2 = \"timeDate\"): - signature(e1 = \"numeric\", e2 = \"timeDate\"): - signature(e1 = \"timeDate\", e2 = \"numeric\"): - signature(e1 = \"timeDate\", e2 = \"timeDate\"):       see timeDateMathOps. coerce signature(= \"\", = \"timeDate\"): coerce signature(= \"Date\", = \"timeDate\"): coerce signature(= \"POSIXt\", = \"timeDate\"): coerce signature(= \"timeDate\", = \"character\"): coerce signature(= \"timeDate\", = \"data.frame\"): coerce signature(= \"timeDate\", = \"Date\"): coerce signature(= \"timeDate\", = \"list\"): coerce signature(= \"timeDate\", = \"numeric\"): coerce signature(= \"timeDate\", = \"POSIXct\"): coerce signature(= \"timeDate\", = \"POSIXlt\"):       convert /\"timeDate\" objects.        methods , used syntax       (, ), object       converted desired target class.       conversions can also done specialised functions       .character .timeDate, see       .timeDate. names signature(x = \"timeDate\"): names<- signature(x = \"timeDate\"):       see names-methods. getDataPart signature(object = \"timeDate\"): ... initialize signature(.Object = \"timeDate\"): ...","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/class-timeDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"## Examples for Objects of class 'timeDate':  ## timeDate -     # Sys.timeDate()           # direct    # timeDate(Sys.time())     # transformed from \"POSIX(c)t\"        # # Local Time in Zurich    # timeDate(Sys.time(), FinCenter = \"Zurich\")    # Character Vector Strings: dts = c(\"1989-09-28\", \"2001-01-15\", \"2004-08-30\", \"1990-02-09\") dts #> [1] \"1989-09-28\" \"2001-01-15\" \"2004-08-30\" \"1990-02-09\" tms = c(  \"23:12:55\",   \"10:34:02\",   \"08:30:00\",   \"11:18:23\") tms #> [1] \"23:12:55\" \"10:34:02\" \"08:30:00\" \"11:18:23\"  t1 <- timeDate(dts, format = \"%Y-%m-%d\", FinCenter = \"GMT\" ) t1 #> GMT #> [1] [1989-09-28] [2001-01-15] [2004-08-30] [1990-02-09]  stopifnot(identical(t1, timeDate(dts, FinC = \"GMT\"))) # auto-format  timeDate(dts, format = \"%Y-%m-%d\", FinCenter = \"Europe/Zurich\") #> Europe/Zurich #> [1] [1989-09-28 01:00:00] [2001-01-15 01:00:00] [2004-08-30 02:00:00] #> [4] [1990-02-09 01:00:00]  timeDate(paste(dts, tms), format = \"%Y-%m-%d %H:%M:%S\",   zone = \"GMT\", FinCenter = \"GMT\") #> GMT #> [1] [1989-09-28 23:12:55] [2001-01-15 10:34:02] [2004-08-30 08:30:00] #> [4] [1990-02-09 11:18:23]  timeDate(paste(dts, tms),    zone = \"Europe/Zurich\", FinCenter = \"Europe/Zurich\") #> Europe/Zurich #> [1] [1989-09-28 23:12:55] [2001-01-15 10:34:02] [2004-08-30 08:30:00] #> [4] [1990-02-09 11:18:23]  timeDate(paste(dts, tms), format = \"%Y-%m-%d %H:%M:%S\",   zone = \"GMT\", FinCenter = \"Europe/Zurich\") #> Europe/Zurich #> [1] [1989-09-29 00:12:55] [2001-01-15 11:34:02] [2004-08-30 10:30:00] #> [4] [1990-02-09 12:18:23]  ## Non Standard Format: timeDate(paste(20:31, \"03.2005\", sep=\".\"), format = \"%d.%m.%Y\") #> GMT #>  [1] [2005-03-20] [2005-03-21] [2005-03-22] [2005-03-23] [2005-03-24] #>  [6] [2005-03-25] [2005-03-26] [2005-03-27] [2005-03-28] [2005-03-29] #> [11] [2005-03-30] [2005-03-31]  # Note, ISO and American Formats are Auto-Detected: timeDate(\"2004-12-31\", FinCenter = \"GMT\") #> GMT #> [1] [2004-12-31] timeDate(\"12/11/2004\", FinCenter = \"GMT\") #> GMT #> [1] [2004-12-11] timeDate(\"1/31/2004\") # auto-detect American format #> GMT #> [1] [2004-01-31]  ## ... from POSIX?t, and Using NAs: ## lsec <- as.POSIXlt(.leap.seconds)  ## lsec[c(2,4:6)] <- NA ## timeDate(lsec)  ## dtms <- paste(dts,tms) ## dtms[2:3] <- NA ## timeDate(dtms, FinCenter = \"Europe/Zurich\") # but in GMT      ## timeCalendar -     ## getRmetricsOptions(\"currentYear\") ## timeCalendar()  # 12 months of current year  timeCalendar(2022) # 12 months of 2022 #> GMT #>  [1] [2022-01-01] [2022-02-01] [2022-03-01] [2022-04-01] [2022-05-01] #>  [6] [2022-06-01] [2022-07-01] [2022-08-01] [2022-09-01] [2022-10-01] #> [11] [2022-11-01] [2022-12-01] timeCalendar(y = c(1989, 2001, 2004, 1990),      m = c(9, 1, 8, 2), d = c(28, 15, 30, 9), FinCenter = \"GMT\") #> GMT #> [1] [1989-09-28] [2001-01-15] [2004-08-30] [1990-02-09] timeCalendar(y = c(1989, 2001, 2004, 1990),     m = c(9, 1, 8, 2), d = c(28, 15, 30, 9), FinCenter = \"Europe/Zurich\") #> Europe/Zurich #> [1] [1989-09-28 01:00:00] [2001-01-15 01:00:00] [2004-08-30 02:00:00] #> [4] [1990-02-09 01:00:00]  ## timeCalendar(h = c(9, 14), min = c(15, 23)) timeCalendar(2022, h = c(9, 14), min = c(15, 23)) #> GMT #>  [1] [2022-01-01 09:15:00] [2022-02-01 14:23:00] [2022-03-01 09:15:00] #>  [4] [2022-04-01 14:23:00] [2022-05-01 09:15:00] [2022-06-01 14:23:00] #>  [7] [2022-07-01 09:15:00] [2022-08-01 14:23:00] [2022-09-01 09:15:00] #> [10] [2022-10-01 14:23:00] [2022-11-01 09:15:00] [2022-12-01 14:23:00]  ## timeSequence -     timeSequence(from = \"2004-03-12\", to = \"2004-04-11\",   format = \"%Y-%m-%d\", FinCenter = \"GMT\") #> GMT #>  [1] [2004-03-12] [2004-03-13] [2004-03-14] [2004-03-15] [2004-03-16] #>  [6] [2004-03-17] [2004-03-18] [2004-03-19] [2004-03-20] [2004-03-21] #> [11] [2004-03-22] [2004-03-23] [2004-03-24] [2004-03-25] [2004-03-26] #> [16] [2004-03-27] [2004-03-28] [2004-03-29] [2004-03-30] [2004-03-31] #> [21] [2004-04-01] [2004-04-02] [2004-04-03] [2004-04-04] [2004-04-05] #> [26] [2004-04-06] [2004-04-07] [2004-04-08] [2004-04-09] [2004-04-10] #> [31] [2004-04-11] timeSequence(from = \"2004-03-12\", to = \"2004-04-11\",   format = \"%Y-%m-%d\", FinCenter = \"Europe/Zurich\") #> Europe/Zurich #>  [1] [2004-03-12 01:00:00] [2004-03-13 01:00:00] [2004-03-14 01:00:00] #>  [4] [2004-03-15 01:00:00] [2004-03-16 01:00:00] [2004-03-17 01:00:00] #>  [7] [2004-03-18 01:00:00] [2004-03-19 01:00:00] [2004-03-20 01:00:00] #> [10] [2004-03-21 01:00:00] [2004-03-22 01:00:00] [2004-03-23 01:00:00] #> [13] [2004-03-24 01:00:00] [2004-03-25 01:00:00] [2004-03-26 01:00:00] #> [16] [2004-03-27 01:00:00] [2004-03-28 02:00:00] [2004-03-29 02:00:00] #> [19] [2004-03-30 02:00:00] [2004-03-31 02:00:00] [2004-04-01 02:00:00] #> [22] [2004-04-02 02:00:00] [2004-04-03 02:00:00] [2004-04-04 02:00:00] #> [25] [2004-04-05 02:00:00] [2004-04-06 02:00:00] [2004-04-07 02:00:00] #> [28] [2004-04-08 02:00:00] [2004-04-09 02:00:00] [2004-04-10 02:00:00] #> [31] [2004-04-11 02:00:00]  ## print | summary | format -     tC = timeCalendar(2022)    print(tC) #> GMT #>  [1] [2022-01-01] [2022-02-01] [2022-03-01] [2022-04-01] [2022-05-01] #>  [6] [2022-06-01] [2022-07-01] [2022-08-01] [2022-09-01] [2022-10-01] #> [11] [2022-11-01] [2022-12-01]    summary(tC) #> Start Record: 2022-01-01  #> End Record:   2022-12-01  #> Observations: 12  #> Format:       %Y-%m-%d  #> FinCenter:    GMT  #>     format(tC) #>  [1] \"2022-01-01\" \"2022-02-01\" \"2022-03-01\" \"2022-04-01\" \"2022-05-01\" #>  [6] \"2022-06-01\" \"2022-07-01\" \"2022-08-01\" \"2022-09-01\" \"2022-10-01\" #> [11] \"2022-11-01\" \"2022-12-01\""},{"path":"https://geobosh.github.io/timeDateDoc/reference/earlyCloseNYSE.html","id":null,"dir":"Reference","previous_headings":"","what":"Early closings of the New York Stock exchange — earlyCloseNYSE","title":"Early closings of the New York Stock exchange — earlyCloseNYSE","text":"Get dates early closings New York Stock exchange (NYSE).","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/earlyCloseNYSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Early closings of the New York Stock exchange — earlyCloseNYSE","text":"","code":"earlyCloseNYSE(year)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/earlyCloseNYSE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Early closings of the New York Stock exchange — earlyCloseNYSE","text":"year vector integers representing years (4 digits).","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/earlyCloseNYSE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Early closings of the New York Stock exchange — earlyCloseNYSE","text":"earlyCloseNYSE gives dates times NYSE closed   early. closing scheduled (e.g. 1pm day   holiday), others unscheduled. information incomplete, particularly 2011.   dates values computed using explicitly declared rules ,   available, ones derived recent years.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/earlyCloseNYSE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Early closings of the New York Stock exchange — earlyCloseNYSE","text":"\"timeDate\" object containing dates (closing times)   early closings","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/earlyCloseNYSE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Early closings of the New York Stock exchange — earlyCloseNYSE","text":"https://archive.fo/XecDq","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/earlyCloseNYSE.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Early closings of the New York Stock exchange — earlyCloseNYSE","text":"Georgi N. Boshnakov","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/earlyCloseNYSE.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Early closings of the New York Stock exchange — earlyCloseNYSE","text":"function somewhat experimental type result   change.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeDateDoc/reference/earlyCloseNYSE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Early closings of the New York Stock exchange — earlyCloseNYSE","text":"","code":"earlyCloseNYSE(1990) #> GMT #> [1] [1990-07-03 13:00:00] [1990-11-23 13:00:00] [1990-12-24 13:00:00] #> [4] [1990-12-24 14:00:00]  earlyCloseNYSE(2022:2024) # early closings #> GMT #> [1] [2022-11-25 13:00:00] [2023-07-03 13:00:00] [2023-11-24 13:00:00] #> [4] [2024-07-03 13:00:00] [2024-11-29 13:00:00] [2024-12-24 13:00:00] holidayNYSE(2022:2024)    # holidays #> NewYork #>  [1] [2022-01-17] [2022-02-21] [2022-04-15] [2022-05-30] [2022-06-20] #>  [6] [2022-07-04] [2022-09-05] [2022-11-24] [2022-12-26] [2023-01-02] #> [11] [2023-01-16] [2023-02-20] [2023-04-07] [2023-05-29] [2023-06-19] #> [16] [2023-07-04] [2023-09-04] [2023-11-23] [2023-12-25] [2024-01-01] #> [21] [2024-01-15] [2024-02-19] [2024-03-29] [2024-05-27] [2024-06-19] #> [26] [2024-07-04] [2024-09-02] [2024-11-28] [2024-12-25] ## early closings & holidays combined c(earlyCloseNYSE(2022:2024), holidayNYSE(2022:2024)) #> GMT #>  [1] [2022-11-25 13:00:00] [2023-07-03 13:00:00] [2023-11-24 13:00:00] #>  [4] [2024-07-03 13:00:00] [2024-11-29 13:00:00] [2024-12-24 13:00:00] #>  [7] [2022-01-17 05:00:00] [2022-02-21 05:00:00] [2022-04-15 04:00:00] #> [10] [2022-05-30 04:00:00] [2022-06-20 04:00:00] [2022-07-04 04:00:00] #> [13] [2022-09-05 04:00:00] [2022-11-24 05:00:00] [2022-12-26 05:00:00] #> [16] [2023-01-02 05:00:00] [2023-01-16 05:00:00] [2023-02-20 05:00:00] #> [19] [2023-04-07 04:00:00] [2023-05-29 04:00:00] [2023-06-19 04:00:00] #> [22] [2023-07-04 04:00:00] [2023-09-04 04:00:00] [2023-11-23 05:00:00] #> [25] [2023-12-25 05:00:00] [2024-01-01 05:00:00] [2024-01-15 05:00:00] #> [28] [2024-02-19 05:00:00] [2024-03-29 04:00:00] [2024-05-27 04:00:00] #> [31] [2024-06-19 04:00:00] [2024-07-04 04:00:00] [2024-09-02 04:00:00] #> [34] [2024-11-28 05:00:00] [2024-12-25 05:00:00]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/graphics-plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot methods — plot-methods","title":"Plot methods — plot-methods","text":"Plot methods \"timeDate\" objects.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/graphics-plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot methods — plot-methods","text":"","code":"# S4 method for timeDate plot(x, y, ...) # S4 method for timeDate lines(x, y, ...) # S4 method for timeDate points(x, y, ...)  axis.timeDate(side, x, at, format = NULL, labels = TRUE, ...)  # S3 method for timeDate pretty(x, n=5, min.n=n%/%3, shrink.sml=0.75,         high.u.bias=1.5, u5.bias=0.5+1.5*high.u.bias,         eps.correct=0, ...)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/graphics-plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot methods — plot-methods","text":"x, y, object class timeDate. side integer specifying side plot axis     drawn . axis placed follows:     1=, 2=left, 3=4=right. format POSIX format string, e.g. \"%Y-%m-%d\". labels either logical value specifying whether annotations     made tickmarks, vector character     strings placed tickpoints. n integer giving desired number intervals. min.n nonnegative integer giving minimal     number intervals. shrink.sml positive numeric default     scale shrunk case range(x)     small. high.u.bias non-negative numeric, typically > 1.     Larger high.u.bias values favor larger units. u5.bias non-negative numeric multiplier favoring     factor 5 2. eps.correct integer code, one 0, 1, 2.     non-0, correction made boundaries. ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/graphics-plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot methods — plot-methods","text":"returns summary report details \"timeDate\" object. includes starting end date, number dates   format financial center use.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/graphics-plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot methods — plot-methods","text":"","code":"## timeCalendar -    x <- timeCalendar()    y <- rnorm(12)   ## Plotting :     plot(x, y, type = \"l\")    points(x, y, pch = 19, col = \"red\")      plot(x, y, type = \"l\", xaxt = \"n\")    axis.timeDate(1, at = x[c(1, 3, 5, 7, 9, 11)], format = \"%b\")    axis.timeDate(1, at = x[12], format = \"%Y\")"},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-Dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Public and ecclesiastical holidays — holidayDate","title":"Public and ecclesiastical holidays — holidayDate","text":"collection functions giving holiday dates G7 countries   Switzerland.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-Dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Public and ecclesiastical holidays — holidayDate","text":"","code":"Septuagesima(year = getRmetricsOptions(\"currentYear\"),               value = \"timeDate\", na_drop = TRUE, ...)  Quinquagesima(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  AshWednesday(year = getRmetricsOptions(\"currentYear\"),               value = \"timeDate\", na_drop = TRUE, ...)  PalmSunday(year = getRmetricsOptions(\"currentYear\"),             value = \"timeDate\", na_drop = TRUE, ...)  GoodFriday(year = getRmetricsOptions(\"currentYear\"),             value = \"timeDate\", na_drop = TRUE, ...)  EasterSunday(year = getRmetricsOptions(\"currentYear\"),               value = \"timeDate\", na_drop = TRUE, ...)  EasterMonday(year = getRmetricsOptions(\"currentYear\"),               value = \"timeDate\", na_drop = TRUE, ...)  RogationSunday(year = getRmetricsOptions(\"currentYear\"),                 value = \"timeDate\", na_drop = TRUE, ...)  Ascension(year = getRmetricsOptions(\"currentYear\"), value = \"timeDate\",            na_drop = TRUE, ...)  Pentecost(year = getRmetricsOptions(\"currentYear\"), value = \"timeDate\",            na_drop = TRUE, ...)  PentecostMonday(year = getRmetricsOptions(\"currentYear\"),                  value = \"timeDate\", na_drop = TRUE, ...)  TrinitySunday(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  CorpusChristi(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  ChristTheKing(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  Advent1st(year = getRmetricsOptions(\"currentYear\"), value = \"timeDate\",            na_drop = TRUE, ...)  Advent2nd(year = getRmetricsOptions(\"currentYear\"), value = \"timeDate\",            na_drop = TRUE, ...)  Advent3rd(year = getRmetricsOptions(\"currentYear\"), value = \"timeDate\",            na_drop = TRUE, ...)  Advent4th(year = getRmetricsOptions(\"currentYear\"), value = \"timeDate\",            na_drop = TRUE, ...)  ChristmasEve(year = getRmetricsOptions(\"currentYear\"),               value = \"timeDate\", na_drop = TRUE, ...)  ChristmasDay(year = getRmetricsOptions(\"currentYear\"),               value = \"timeDate\", na_drop = TRUE, ...)  BoxingDay(year = getRmetricsOptions(\"currentYear\"), value = \"timeDate\",            na_drop = TRUE, ...)  NewYearsDay(year = getRmetricsOptions(\"currentYear\"),              value = \"timeDate\", na_drop = TRUE, ...)  SolemnityOfMary(year = getRmetricsOptions(\"currentYear\"),                  value = \"timeDate\", na_drop = TRUE, ...)  Epiphany(year = getRmetricsOptions(\"currentYear\"), value = \"timeDate\",           na_drop = TRUE, ...)  PresentationOfLord(year = getRmetricsOptions(\"currentYear\"),                     value = \"timeDate\", na_drop = TRUE, ...)  Annunciation(year = getRmetricsOptions(\"currentYear\"),               value = \"timeDate\", na_drop = TRUE, ...)  TransfigurationOfLord(year = getRmetricsOptions(\"currentYear\"),                        value = \"timeDate\", na_drop = TRUE, ...)  AssumptionOfMary(year = getRmetricsOptions(\"currentYear\"),                   value = \"timeDate\", na_drop = TRUE, ...)  BirthOfVirginMary(year = getRmetricsOptions(\"currentYear\"),                    value = \"timeDate\", na_drop = TRUE, ...)  CelebrationOfHolyCross(year = getRmetricsOptions(\"currentYear\"),                         value = \"timeDate\", na_drop = TRUE, ...)  MassOfArchangels(year = getRmetricsOptions(\"currentYear\"),                   value = \"timeDate\", na_drop = TRUE, ...)  AllSaints(year = getRmetricsOptions(\"currentYear\"), value = \"timeDate\",            na_drop = TRUE, ...)  AllSouls(year = getRmetricsOptions(\"currentYear\"), value = \"timeDate\",           na_drop = TRUE, ...)  LaborDay(year = getRmetricsOptions(\"currentYear\"), value = \"timeDate\",           na_drop = TRUE, ...)  CHBerchtoldsDay(year = getRmetricsOptions(\"currentYear\"),                  value = \"timeDate\", na_drop = TRUE, ...)  CHSechselaeuten(year = getRmetricsOptions(\"currentYear\"),                  value = \"timeDate\", na_drop = TRUE, ...)  CHAscension(year = getRmetricsOptions(\"currentYear\"),              value = \"timeDate\", na_drop = TRUE, ...)  CHConfederationDay(year = getRmetricsOptions(\"currentYear\"),                     value = \"timeDate\", na_drop = TRUE, ...)  CHKnabenschiessen(year = getRmetricsOptions(\"currentYear\"),                    value = \"timeDate\", na_drop = TRUE, ...)  GBMayDay(year = getRmetricsOptions(\"currentYear\"), value = \"timeDate\",           na_drop = TRUE, ...)  GBEarlyMayBankHoliday(year = getRmetricsOptions(\"currentYear\"),                        value = \"timeDate\", na_drop = TRUE, ...)  GBBankHoliday(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  GBSpringBankHoliday(year = getRmetricsOptions(\"currentYear\"),                      value = \"timeDate\", na_drop = TRUE, ...)  GBSummerBankHoliday(year = getRmetricsOptions(\"currentYear\"),                      value = \"timeDate\", na_drop = TRUE, ...)  GBMilleniumDay(year = getRmetricsOptions(\"currentYear\"),                 value = \"timeDate\", na_drop = TRUE, ...)  DEAscension(year = getRmetricsOptions(\"currentYear\"),              value = \"timeDate\", na_drop = TRUE, ...)  DECorpusChristi(year = getRmetricsOptions(\"currentYear\"),                  value = \"timeDate\", na_drop = TRUE, ...)  DEGermanUnity(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  DEChristmasEve(year = getRmetricsOptions(\"currentYear\"),                 value = \"timeDate\", na_drop = TRUE, ...)  DENewYearsEve(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  FRFetDeLaVictoire1945(year = getRmetricsOptions(\"currentYear\"),                        value = \"timeDate\", na_drop = TRUE, ...)  FRAscension(year = getRmetricsOptions(\"currentYear\"),              value = \"timeDate\", na_drop = TRUE, ...)  FRBastilleDay(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  FRAssumptionVirginMary(year = getRmetricsOptions(\"currentYear\"),                         value = \"timeDate\", na_drop = TRUE, ...)  FRAllSaints(year = getRmetricsOptions(\"currentYear\"),              value = \"timeDate\", na_drop = TRUE, ...)  FRArmisticeDay(year = getRmetricsOptions(\"currentYear\"),                 value = \"timeDate\", na_drop = TRUE, ...)  ITEpiphany(year = getRmetricsOptions(\"currentYear\"),             value = \"timeDate\", na_drop = TRUE, ...)  ITLiberationDay(year = getRmetricsOptions(\"currentYear\"),                  value = \"timeDate\", na_drop = TRUE, ...)  ITAssumptionOfVirginMary(year = getRmetricsOptions(\"currentYear\"),                           value = \"timeDate\", na_drop = TRUE, ...)  ITAllSaints(year = getRmetricsOptions(\"currentYear\"),              value = \"timeDate\", na_drop = TRUE, ...)  ITStAmrose(year = getRmetricsOptions(\"currentYear\"),             value = \"timeDate\", na_drop = TRUE, ...)  ITImmaculateConception(year = getRmetricsOptions(\"currentYear\"),                         value = \"timeDate\", na_drop = TRUE, ...)  USDecorationMemorialDay(year = getRmetricsOptions(\"currentYear\"),                          value = \"timeDate\", na_drop = TRUE, ...)  USPresidentsDay(year = getRmetricsOptions(\"currentYear\"),                  value = \"timeDate\", na_drop = TRUE, ...)  USNewYearsDay(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  USInaugurationDay(year = getRmetricsOptions(\"currentYear\"),                    value = \"timeDate\", na_drop = TRUE, ...)  USMLKingsBirthday(year = getRmetricsOptions(\"currentYear\"),                    value = \"timeDate\", na_drop = TRUE, ...)  USLincolnsBirthday(year = getRmetricsOptions(\"currentYear\"),                     value = \"timeDate\", na_drop = TRUE, ...)  USWashingtonsBirthday(year = getRmetricsOptions(\"currentYear\"),                        value = \"timeDate\", na_drop = TRUE, ...)  USMemorialDay(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  USIndependenceDay(year = getRmetricsOptions(\"currentYear\"),                    value = \"timeDate\", na_drop = TRUE, ...)  USLaborDay(year = getRmetricsOptions(\"currentYear\"),             value = \"timeDate\", na_drop = TRUE, ...)  USColumbusDay(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  USElectionDay(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  USVeteransDay(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  USThanksgivingDay(year = getRmetricsOptions(\"currentYear\"),                    value = \"timeDate\", na_drop = TRUE, ...)  USChristmasDay(year = getRmetricsOptions(\"currentYear\"),                 value = \"timeDate\", na_drop = TRUE, ...)  USCPulaskisBirthday(year = getRmetricsOptions(\"currentYear\"),                      value = \"timeDate\", na_drop = TRUE, ...)  USGoodFriday(year = getRmetricsOptions(\"currentYear\"),               value = \"timeDate\", na_drop = TRUE, ...)  USJuneteenthNationalIndependenceDay(                                     year = getRmetricsOptions(\"currentYear\"),                                      value = \"timeDate\", na_drop = TRUE,                                      ...)  CAVictoriaDay(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  CACanadaDay(year = getRmetricsOptions(\"currentYear\"),              value = \"timeDate\", na_drop = TRUE, ...)  CACivicProvincialHoliday(year = getRmetricsOptions(\"currentYear\"),                           value = \"timeDate\", na_drop = TRUE, ...)  CALabourDay(year = getRmetricsOptions(\"currentYear\"),              value = \"timeDate\", na_drop = TRUE, ...)  CAThanksgivingDay(year = getRmetricsOptions(\"currentYear\"),                    value = \"timeDate\", na_drop = TRUE, ...)  CaRemembranceDay(year = getRmetricsOptions(\"currentYear\"),                   value = \"timeDate\", na_drop = TRUE, ...)  JPVernalEquinox(year = getRmetricsOptions(\"currentYear\"),                  value = \"timeDate\", na_drop = TRUE, ...)  JPNewYearsDay(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  JPGantan(year = getRmetricsOptions(\"currentYear\"), value = \"timeDate\",           na_drop = TRUE, ...)  JPBankHolidayJan2(year = getRmetricsOptions(\"currentYear\"),                    value = \"timeDate\", na_drop = TRUE, ...)  JPBankHolidayJan3(year = getRmetricsOptions(\"currentYear\"),                    value = \"timeDate\", na_drop = TRUE, ...)  JPComingOfAgeDay(year = getRmetricsOptions(\"currentYear\"),                   value = \"timeDate\", na_drop = TRUE, ...)  JPSeijinNoHi(year = getRmetricsOptions(\"currentYear\"),               value = \"timeDate\", na_drop = TRUE, ...)  JPNatFoundationDay(year = getRmetricsOptions(\"currentYear\"),                     value = \"timeDate\", na_drop = TRUE, ...)  JPKenkokuKinenNoHi(year = getRmetricsOptions(\"currentYear\"),                     value = \"timeDate\", na_drop = TRUE, ...)  JPGreeneryDay(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  JPMidoriNoHi(year = getRmetricsOptions(\"currentYear\"),               value = \"timeDate\", na_drop = TRUE, ...)  JPConstitutionDay(year = getRmetricsOptions(\"currentYear\"),                    value = \"timeDate\", na_drop = TRUE, ...)  JPKenpouKinenBi(year = getRmetricsOptions(\"currentYear\"),                  value = \"timeDate\", na_drop = TRUE, ...)  JPNationHoliday(year = getRmetricsOptions(\"currentYear\"),                  value = \"timeDate\", na_drop = TRUE, ...)  JPKokuminNoKyujitu(year = getRmetricsOptions(\"currentYear\"),                     value = \"timeDate\", na_drop = TRUE, ...)  JPChildrensDay(year = getRmetricsOptions(\"currentYear\"),                 value = \"timeDate\", na_drop = TRUE, ...)  JPKodomoNoHi(year = getRmetricsOptions(\"currentYear\"),               value = \"timeDate\", na_drop = TRUE, ...)  JPMarineDay(year = getRmetricsOptions(\"currentYear\"),              value = \"timeDate\", na_drop = TRUE, ...)  JPUmiNoHi(year = getRmetricsOptions(\"currentYear\"), value = \"timeDate\",            na_drop = TRUE, ...)  JPRespectForTheAgedDay(year = getRmetricsOptions(\"currentYear\"),                         value = \"timeDate\", na_drop = TRUE, ...)  JPKeirouNOhi(year = getRmetricsOptions(\"currentYear\"),               value = \"timeDate\", na_drop = TRUE, ...)  JPMountainDay(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  JPAutumnalEquinox(year = getRmetricsOptions(\"currentYear\"),                    value = \"timeDate\", na_drop = TRUE, ...)  JPShuubunNoHi(year = getRmetricsOptions(\"currentYear\"),                value = \"timeDate\", na_drop = TRUE, ...)  JPHealthandSportsDay(year = getRmetricsOptions(\"currentYear\"),                       value = \"timeDate\", na_drop = TRUE, ...)  JPTaiikuNoHi(year = getRmetricsOptions(\"currentYear\"),               value = \"timeDate\", na_drop = TRUE, ...)  JPNationalCultureDay(year = getRmetricsOptions(\"currentYear\"),                       value = \"timeDate\", na_drop = TRUE, ...)  JPBunkaNoHi(year = getRmetricsOptions(\"currentYear\"),              value = \"timeDate\", na_drop = TRUE, ...)  JPThanksgivingDay(year = getRmetricsOptions(\"currentYear\"),                    value = \"timeDate\", na_drop = TRUE, ...)  JPKinrouKanshaNoHi(year = getRmetricsOptions(\"currentYear\"),                     value = \"timeDate\", na_drop = TRUE, ...)  JPEmperorsBirthday(year = getRmetricsOptions(\"currentYear\"),                     value = \"timeDate\", na_drop = TRUE, ...)  JPTennouTanjyouBi(year = getRmetricsOptions(\"currentYear\"),                    value = \"timeDate\", na_drop = TRUE, ...)  JPBankHolidayDec31(year = getRmetricsOptions(\"currentYear\"),                     value = \"timeDate\", na_drop = TRUE, ...)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-Dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Public and ecclesiastical holidays — holidayDate","text":"year integer value vector year numbers including     century. integers form CCYY, e.g.     2000.  value class returned value. \"timeDate\", default,     return \"timeDate\" object, otherwise return character     vector.  na_drop treat NAs, TRUE, FALSE character     string, see section ‘Details’.  ... arguments format.timeDate, notably     \"format\". Ignored value = \"timeDate\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-Dates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Public and ecclesiastical holidays — holidayDate","text":"help page discusses public ecclesiastical holidays per   se. holidays fall definition working day particular   day week. holidays fall weekends many countries   rules declare close weekday holiday. functions   consider issues handled   holidayXXX functions (e.g., holidayLONDON), see   help pages. Public holidays change time new ones introduced, dropped   move different days.  holiday date requested   year exist, returned? question   arises information available package. ecclesiastical holidays computed traditional rules   practice correct years. Traditionally, package timeDate computing dates   holidays according current rules.  versions package   timeDate greater 4022.108 historical information added   England Japan holidays. updated functions return dates   according rules particular years. future years returned dates always computed accoding   current rules. years first available rules, default use   rules, whether holiday existed . Argument na_drop can used control . na_drop   TRUE, entry incuded result .    na_drop FALSE value years holiday   exist NA.  character string,   default, closest available rules used. functions respect argument na_drop. case   act na_drop character string. deprecated GBMayDay GBBankHoliday still   available strongly discouraged. Instead, use   GBEarlyMayBankHoliday GBSpringBankHoliday,   respectively.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-Dates.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Public and ecclesiastical holidays — holidayDate","text":"holiday information countries incomplete.   Contributions welcome. Please include references sources,   whenever possible.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-Dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Public and ecclesiastical holidays — holidayDate","text":"date requested holiday \"timeDate\" object","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-Dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Public and ecclesiastical holidays — holidayDate","text":"","code":"## CHSechselaeuten -    # Sechselaeuten a half Day Bank Holiday in Switzerland    CHSechselaeuten(2000:2010) #> GMT #>  [1] [2000-04-17] [2001-04-16] [2002-04-15] [2003-04-21] [2004-04-19] #>  [6] [2005-04-18] [2006-04-17] [2007-04-16] [2008-04-21] [2009-04-20] #> [11] [2010-04-19]    CHSechselaeuten(getRmetricsOptions(\"currentYear\")) #> GMT #> [1] [2023-04-17]  ## German Unification Day:    DEGermanUnity(getRmetricsOptions(\"currentYear\")) #> GMT #> [1] [2023-10-03]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-LONDON.html","id":null,"dir":"Reference","previous_headings":"","what":"London Bank Holidays — holidayLONDON","title":"London Bank Holidays — holidayLONDON","text":"Returns bank holidays London.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-LONDON.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"London Bank Holidays — holidayLONDON","text":"","code":"holidayLONDON(year = getRmetricsOptions(\"currentYear\"))"},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-LONDON.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"London Bank Holidays — holidayLONDON","text":"year integer value vector years, formatted YYYY.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-LONDON.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"London Bank Holidays — holidayLONDON","text":"object class \"timeDate\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-LONDON.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"London Bank Holidays — holidayLONDON","text":"currently 8 bank holidays Britain every year: New Year's   Day, Good Friday, Easter Monday, Early Spring Holiday (first Monday   May), Spring Holiday (Last Monday May), Summer Holiday (Last   Monday August), Christmas Day Boxing Day. holidays referred also alternative names may   names past. Also rules according   dates calculated changed time. Occasionaly one-special holidays, usually related   significant Royal events. Also one-, dates holidays   sometimes moved. example, Early spring holiday moved   several times 8th May coincide Victory day big   anniversaries.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-LONDON.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"London Bank Holidays — holidayLONDON","text":"Original function contributed Menon Murali;   amended, corrected rewritten Georgi N. Boshnakov","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-LONDON.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"London Bank Holidays — holidayLONDON","text":"","code":"## holidayLONDON -    holidayLONDON() #> Europe/London #> [1] [2023-01-02] [2023-04-07] [2023-04-10] [2023-05-01] [2023-05-08] #> [6] [2023-05-29] [2023-08-28] [2023-12-25] [2023-12-26]    holidayLONDON(2008:2010) #> Europe/London #>  [1] [2008-01-01] [2008-03-21] [2008-03-24] [2008-05-05] [2008-05-26] #>  [6] [2008-08-25] [2008-12-25] [2008-12-26] [2009-01-01] [2009-04-10] #> [11] [2009-04-13] [2009-05-04] [2009-05-25] [2009-08-31] [2009-12-25] #> [16] [2009-12-28] [2010-01-01] [2010-04-02] [2010-04-05] [2010-05-03] #> [21] [2010-05-31] [2010-08-30] [2010-12-27] [2010-12-28]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-Listing.html","id":null,"dir":"Reference","previous_headings":"","what":"List of holidays — listHolidays","title":"List of holidays — listHolidays","text":"Returns list holidays.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-Listing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of holidays — listHolidays","text":"","code":"listHolidays(pattern = \".*\")"},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-Listing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of holidays — listHolidays","text":"pattern pattern character string required grep     function.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-Listing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List of holidays — listHolidays","text":"Returns character vector containing names supported holidays   matching pattern. default return holidays.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-Listing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of holidays — listHolidays","text":"character vector","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-Listing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of holidays — listHolidays","text":"","code":"## listHolidays -     # All Holidays:    listHolidays() #>   [1] \"Advent1st\"                           #>   [2] \"Advent2nd\"                           #>   [3] \"Advent3rd\"                           #>   [4] \"Advent4th\"                           #>   [5] \"AllSaints\"                           #>   [6] \"AllSouls\"                            #>   [7] \"Annunciation\"                        #>   [8] \"Ascension\"                           #>   [9] \"AshWednesday\"                        #>  [10] \"AssumptionOfMary\"                    #>  [11] \"BirthOfVirginMary\"                   #>  [12] \"BoxingDay\"                           #>  [13] \"CACanadaDay\"                         #>  [14] \"CACivicProvincialHoliday\"            #>  [15] \"CAFamilyDay\"                         #>  [16] \"CALabourDay\"                         #>  [17] \"CAThanksgivingDay\"                   #>  [18] \"CAVictoriaDay\"                       #>  [19] \"CHAscension\"                         #>  [20] \"CHBerchtoldsDay\"                     #>  [21] \"CHConfederationDay\"                  #>  [22] \"CHKnabenschiessen\"                   #>  [23] \"CHSechselaeuten\"                     #>  [24] \"CaRemembranceDay\"                    #>  [25] \"CelebrationOfHolyCross\"              #>  [26] \"ChristTheKing\"                       #>  [27] \"ChristmasDay\"                        #>  [28] \"ChristmasEve\"                        #>  [29] \"CorpusChristi\"                       #>  [30] \"DEAscension\"                         #>  [31] \"DEChristmasEve\"                      #>  [32] \"DECorpusChristi\"                     #>  [33] \"DEGermanUnity\"                       #>  [34] \"DENewYearsEve\"                       #>  [35] \"Easter\"                              #>  [36] \"EasterMonday\"                        #>  [37] \"EasterSunday\"                        #>  [38] \"Epiphany\"                            #>  [39] \"FRAllSaints\"                         #>  [40] \"FRArmisticeDay\"                      #>  [41] \"FRAscension\"                         #>  [42] \"FRAssumptionVirginMary\"              #>  [43] \"FRBastilleDay\"                       #>  [44] \"FRFetDeLaVictoire1945\"               #>  [45] \"GBEarlyMayBankHoliday\"               #>  [46] \"GBSpringBankHoliday\"                 #>  [47] \"GBSummerBankHoliday\"                 #>  [48] \"GoodFriday\"                          #>  [49] \"ITAllSaints\"                         #>  [50] \"ITAssumptionOfVirginMary\"            #>  [51] \"ITEpiphany\"                          #>  [52] \"ITImmaculateConception\"              #>  [53] \"ITLiberationDay\"                     #>  [54] \"ITStAmrose\"                          #>  [55] \"JPAutumnalEquinox\"                   #>  [56] \"JPBankHolidayDec31\"                  #>  [57] \"JPBankHolidayJan2\"                   #>  [58] \"JPBankHolidayJan3\"                   #>  [59] \"JPBunkaNoHi\"                         #>  [60] \"JPChildrensDay\"                      #>  [61] \"JPComingOfAgeDay\"                    #>  [62] \"JPConstitutionDay\"                   #>  [63] \"JPEmperorsBirthday\"                  #>  [64] \"JPGantan\"                            #>  [65] \"JPGreeneryDay\"                       #>  [66] \"JPHealthandSportsDay\"                #>  [67] \"JPKeirouNoHi\"                        #>  [68] \"JPKenkokuKinenNoHi\"                  #>  [69] \"JPKenpouKinenBi\"                     #>  [70] \"JPKinrouKanshaNoHi\"                  #>  [71] \"JPKodomoNoHi\"                        #>  [72] \"JPKokuminNoKyujitu\"                  #>  [73] \"JPMarineDay\"                         #>  [74] \"JPMidoriNoHi\"                        #>  [75] \"JPMountainDay\"                       #>  [76] \"JPNatFoundationDay\"                  #>  [77] \"JPNationHoliday\"                     #>  [78] \"JPNationalCultureDay\"                #>  [79] \"JPNewYearsDay\"                       #>  [80] \"JPRespectForTheAgedDay\"              #>  [81] \"JPSeijinNoHi\"                        #>  [82] \"JPShuubunNoHi\"                       #>  [83] \"JPTaiikuNoHi\"                        #>  [84] \"JPTennouTanjyouBi\"                   #>  [85] \"JPThanksgivingDay\"                   #>  [86] \"JPUmiNoHi\"                           #>  [87] \"JPVernalEquinox\"                     #>  [88] \"LaborDay\"                            #>  [89] \"MassOfArchangels\"                    #>  [90] \"NewYearsDay\"                         #>  [91] \"PalmSunday\"                          #>  [92] \"Pentecost\"                           #>  [93] \"PentecostMonday\"                     #>  [94] \"PresentationOfLord\"                  #>  [95] \"Quinquagesima\"                       #>  [96] \"RogationSunday\"                      #>  [97] \"Septuagesima\"                        #>  [98] \"SolemnityOfMary\"                     #>  [99] \"TransfigurationOfLord\"               #> [100] \"TrinitySunday\"                       #> [101] \"USCPulaskisBirthday\"                 #> [102] \"USChristmasDay\"                      #> [103] \"USColumbusDay\"                       #> [104] \"USDecorationMemorialDay\"             #> [105] \"USElectionDay\"                       #> [106] \"USGoodFriday\"                        #> [107] \"USInaugurationDay\"                   #> [108] \"USIndependenceDay\"                   #> [109] \"USJuneteenthNationalIndependenceDay\" #> [110] \"USLaborDay\"                          #> [111] \"USLincolnsBirthday\"                  #> [112] \"USMLKingsBirthday\"                   #> [113] \"USMemorialDay\"                       #> [114] \"USNewYearsDay\"                       #> [115] \"USPresidentsDay\"                     #> [116] \"USThanksgivingDay\"                   #> [117] \"USVeteransDay\"                       #> [118] \"USWashingtonsBirthday\"               #> [119] \"specialHolidayGB\"                           # Local Swiss Holidays:    listHolidays(\"CH\")  #> [1] \"CHAscension\"        \"CHBerchtoldsDay\"    \"CHConfederationDay\" #> [4] \"CHKnabenschiessen\"  \"CHSechselaeuten\""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-NERC.html","id":null,"dir":"Reference","previous_headings":"","what":"NERC holiday calendar — holidayNERC","title":"NERC holiday calendar — holidayNERC","text":"Returns holiday calendar NERC, North American Reliability     Council.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-NERC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NERC holiday calendar — holidayNERC","text":"","code":"holidayNERC(year = getRmetricsOptions(\"currentYear\"), FinCenter = \"Eastern\")"},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-NERC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NERC holiday calendar — holidayNERC","text":"year integer value vector years, formatted YYYY. FinCenter character value, name financial center use.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-NERC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NERC holiday calendar — holidayNERC","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-NERC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"NERC holiday calendar — holidayNERC","text":"Joe W. Byers","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-NERC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"NERC holiday calendar — holidayNERC","text":"http://www.nerc.com/~oc/offpeaks.html","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-NERC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NERC holiday calendar — holidayNERC","text":"","code":"## holidayNERC -    holidayNERC() #> Eastern #> [1] [2023-01-02] [2023-05-29] [2023-07-04] [2023-09-04] [2023-11-23] #> [6] [2023-12-25]    holidayNERC(2008:2010) #> Eastern #>  [1] [2008-01-01] [2008-05-26] [2008-07-04] [2008-09-01] [2008-11-27] #>  [6] [2008-12-25] [2009-01-01] [2009-05-25] [2009-07-04] [2009-09-07] #> [11] [2009-11-26] [2009-12-25] [2010-01-01] [2010-05-31] [2010-07-05] #> [16] [2010-09-06] [2010-11-25] [2010-12-25]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-NYSE.html","id":null,"dir":"Reference","previous_headings":"","what":"NYSE holiday calendar — holidayNYSE","title":"NYSE holiday calendar — holidayNYSE","text":"Returns holiday (closing days) calendar New York Stock     Exchange.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-NYSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NYSE holiday calendar — holidayNYSE","text":"","code":"holidayNYSE(year = getRmetricsOptions(\"currentYear\"),              type = c(\"\", \"standard\", \"special\"))"},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-NYSE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NYSE holiday calendar — holidayNYSE","text":"holidayNYSE generates list clossing days   exchange requested years. default return closing days (holidays   specials). type = \"standard\" requests closings associated   standard public holidays, type = \"special\" gives   special closings .","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-NYSE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NYSE holiday calendar — holidayNYSE","text":"year integer value vector years, formatted YYYY. type include, character string. default return     closing days (holidays specials). \"standard\" requests     closings associated standard public holidays,     \"special\" gives special closings .","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-NYSE.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NYSE holiday calendar — holidayNYSE","text":"list closing days returned holidayNYSE changed   timeDate version 4021.105, previously include   special closing days. perceived users buggy. Also,   intent authors package seems   return closing days. Indeed, default isisBizday()   drop weekends days returned holidayNYSE. Argument type also included version 4021.105. old   behaviour can obtained using type = \"standard\". default argument type currently empty string,   since come another string universally   easy remember. Suggestions welcome change   feasible come soon.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-NYSE.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"NYSE holiday calendar — holidayNYSE","text":"Diethelm Wuertz (original author);   Yohan Chalabi improved speed handling time zone;   Georgi N. Boshnakov added special closings argument   ‘type’.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-NYSE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NYSE holiday calendar — holidayNYSE","text":"object class \"timeDate\"","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-NYSE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NYSE holiday calendar — holidayNYSE","text":"","code":"## holidayNYSE - holidayNYSE() ## current year #> NewYork #>  [1] [2023-01-02] [2023-01-16] [2023-02-20] [2023-04-07] [2023-05-29] #>  [6] [2023-06-19] [2023-07-04] [2023-09-04] [2023-11-23] [2023-12-25] holidayNYSE(2008:2010) #> NewYork #>  [1] [2008-01-01] [2008-01-21] [2008-02-18] [2008-03-21] [2008-05-26] #>  [6] [2008-07-04] [2008-09-01] [2008-11-27] [2008-12-25] [2009-01-01] #> [11] [2009-01-19] [2009-02-16] [2009-04-10] [2009-05-25] [2009-07-03] #> [16] [2009-09-07] [2009-11-26] [2009-12-25] [2010-01-01] [2010-01-18] #> [21] [2010-02-15] [2010-04-02] [2010-05-31] [2010-07-05] [2010-09-06] #> [26] [2010-11-25] [2010-12-24]  ## January 2, 2007 was a memorial day for president G.R. Ford, ##    not a regular public holiday holidayNYSE(2007) #> NewYork #>  [1] [2007-01-01] [2007-01-02] [2007-01-15] [2007-02-19] [2007-04-06] #>  [6] [2007-05-28] [2007-07-04] [2007-09-03] [2007-11-22] [2007-12-25] holidayNYSE(2007, type = \"standard\") #> NewYork #> [1] [2007-01-01] [2007-01-15] [2007-02-19] [2007-04-06] [2007-05-28] #> [6] [2007-07-04] [2007-09-03] [2007-11-22] [2007-12-25] holidayNYSE(2007, type = \"special\") #> New_York #> [1] [2007-01-02]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-TSX.html","id":null,"dir":"Reference","previous_headings":"","what":"TSX holiday calendar — holidayTSX","title":"TSX holiday calendar — holidayTSX","text":"Returns holiday calendar Toronto Stock Exchange.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-TSX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TSX holiday calendar — holidayTSX","text":"","code":"holidayTSX(year = getRmetricsOptions(\"currentYear\"))"},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-TSX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TSX holiday calendar — holidayTSX","text":"year integer value vector years, formatted YYYY.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-TSX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TSX holiday calendar — holidayTSX","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-TSX.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TSX holiday calendar — holidayTSX","text":"","code":"## holidayTSX -    holidayTSX() #> Toronto #>   2023-01-01   2023-02-20   2023-04-07   2023-05-22   2023-07-01   2023-08-07  #> [2023-01-02] [2023-02-20] [2023-04-07] [2023-05-22] [2023-07-03] [2023-08-07]  #>   2023-09-04   2023-10-09   2023-12-25   2023-12-26  #> [2023-09-04] [2023-10-09] [2023-12-25] [2023-12-26]     holidayTSX(2008:2010) #> Toronto #>   2008-01-01   2008-02-18   2008-02-18   2008-02-18   2008-03-21   2008-05-19  #> [2008-01-01] [2008-02-18] [2008-02-18] [2008-02-18] [2008-03-21] [2008-05-19]  #>   2008-07-01   2008-08-04   2008-09-01   2008-10-13   2008-12-25   2008-12-26  #> [2008-07-01] [2008-08-04] [2008-09-01] [2008-10-13] [2008-12-25] [2008-12-26]  #>   2009-01-01   2009-02-16   2009-02-16   2009-02-16   2009-04-10   2009-05-18  #> [2009-01-01] [2009-02-16] [2009-02-16] [2009-02-16] [2009-04-10] [2009-05-18]  #>   2009-07-01   2009-08-03   2009-09-07   2009-10-12   2009-12-25   2009-12-26  #> [2009-07-01] [2009-08-03] [2009-09-07] [2009-10-12] [2009-12-25] [2009-12-28]  #>   2010-01-01   2010-02-15   2010-02-15   2010-02-15   2010-04-02   2010-05-24  #> [2010-01-01] [2010-02-15] [2010-02-15] [2010-02-15] [2010-04-02] [2010-05-24]  #>   2010-07-01   2010-08-02   2010-09-06   2010-10-11   2010-12-25   2010-12-26  #> [2010-07-01] [2010-08-02] [2010-09-06] [2010-10-11] [2010-12-27] [2010-12-27]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-ZURICH.html","id":null,"dir":"Reference","previous_headings":"","what":"Zurich holiday calendar — holidayZURICH","title":"Zurich holiday calendar — holidayZURICH","text":"Returns holiday calendar Zurich.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-ZURICH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zurich holiday calendar — holidayZURICH","text":"","code":"holidayZURICH(year = getRmetricsOptions(\"currentYear\"))"},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-ZURICH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zurich holiday calendar — holidayZURICH","text":"year integer value vector years, formatted YYYY.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-ZURICH.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zurich holiday calendar — holidayZURICH","text":"Zurich holiday calendar includes following holidays:     NewYearsDay, GoodFriday, EasterMonday,      LaborDay, PentecostMonday, ChristmasDay,      BoxingDay, CHBerchtoldsDay, CHSechselaeuten,      CHAscension, CHConfederationDay, CHKnabenschiessen.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-ZURICH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zurich holiday calendar — holidayZURICH","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday-ZURICH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zurich holiday calendar — holidayZURICH","text":"","code":"## holidayZURICH -    holidayZURICH() #> Zurich #>  [1] [2023-01-02] [2023-04-07] [2023-04-10] [2023-04-17] [2023-05-01] #>  [6] [2023-05-18] [2023-05-29] [2023-08-01] [2023-09-11] [2023-12-25] #> [11] [2023-12-26]    holidayZURICH(2008:2010) #> Zurich #>  [1] [2008-01-01] [2008-01-02] [2008-03-21] [2008-03-24] [2008-04-21] #>  [6] [2008-05-01] [2008-05-01] [2008-05-12] [2008-08-01] [2008-09-08] #> [11] [2008-12-25] [2008-12-26] [2009-01-01] [2009-01-02] [2009-04-10] #> [16] [2009-04-13] [2009-04-20] [2009-05-01] [2009-05-21] [2009-06-01] #> [21] [2009-09-14] [2009-12-25] [2010-01-01] [2010-04-02] [2010-04-05] #> [26] [2010-04-19] [2010-05-13] [2010-05-24] [2010-09-13]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday.html","id":null,"dir":"Reference","previous_headings":"","what":"Holiday dates — holiday","title":"Holiday dates — holiday","text":"Returns date holiday.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Holiday dates — holiday","text":"","code":"holiday(year = getRmetricsOptions(\"currentYear\"), Holiday = \"Easter\")"},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Holiday dates — holiday","text":"Holiday function name (character string unquoted)     ecclesiastical public holiday G7 countries Switzerland,     see list . Can also character vector specify     several holidays.  year integer value vector years, formatted YYYY.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Holiday dates — holiday","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Holiday dates — holiday","text":"Easter central ecclesiastical holiday. Many holidays     related feast. function Easter computes     dates Easter related ecclesiastical holidays      requested year vector. holiday calculates dates      ecclesiastical publich holidays G7 countries, e.g.      holiday(2003, \"GoodFriday\"). Rmetrics contains holiday      functions automatically loaded startup time. user can      add easily additional holiday functions. information      holidays collected several web pages holiday      calendars.     following ecclesiastical public [HOLIDAY] functions      G7 countries Switzerland available: Holidays Related Easter: Septuagesima, Quinquagesima, AshWednesday, PalmSunday,     GoodFriday,  EasterSunday, Easter, EasterMonday,      RogationSunday, Ascension, Pentecost, PentecostMonday,      TrinitySunday CorpusChristi. Holidays Related Christmas: ChristTheKing, Advent1st, Advent1st, Advent3rd,      Advent4th, ChristmasEve, ChristmasDay, BoxingDay,      NewYearsDay. Ecclestical Feasts: SolemnityOfMary, Epiphany, PresentationOfLord,      Annunciation, TransfigurationOfLord, AssumptionOfMary,      AssumptionOfMary, BirthOfVirginMary, CelebrationOfHolyCross,      MassOfArchangels, AllSaints, AllSouls. CHZurich - Public Holidays: CHBerchtoldsDay, CHSechselaeuten, CHAscension,      CHConfederationDay, CHKnabenschiessen. GBLondon - Public Holidays: GBEarlyMayBankHoliday, GBSpringBankHoliday     GBSummerBankHoliday, GBNewYearsEve. (deprecated GBMayDay GBBankHoliday still available     strongly discouraged. Instead, use GBEarlyMayBankHoliday     GBSpringBankHoliday, respectively) DEFrankfurt - Public Holidays: DEAscension, DECorpusChristi, DEGermanUnity, DEChristmasEve,     DENewYearsEve. FRParis - Public Holidays: FRFetDeLaVictoire1945, FRAscension, FRBastilleDay,      FRAssumptionVirginMary, FRAllSaints, FRArmisticeDay. ITMilano - Public Holidays: ITEpiphany, ITLiberationDay, ITRepublicAnniversary,      ITAssumptionOfVirginMary, ITAllSaints, ITWWIVictoryAnniversary,      ITStAmrose, ITImmaculateConception. USNewYork/USChicago - Public Holidays: USNewYearsDay, USInaugurationDay, USMLKingsBirthday,      USLincolnsBirthday, USWashingtonsBirthday, USMemorialDay,      USIndependenceDay, USLaborDay,  USColumbusDay, USElectionDay,      USVeteransDay, USThanksgivingDay, USChristmasDay,      USCPulaskisBirthday, USGoodFriday,     USJuneteenthNationalIndependenceDay. CAToronto/CAMontreal - Public Holidays: CAVictoriaDay, CACanadaDay, CACivicProvincialHoliday,      CALabourDay, CAThanksgivingDay, CaRemembranceDay. JPTokyo/JPOsaka - Public Holidays: JPNewYearsDay, JPGantan, JPBankHolidayJan2, JPBankHolidayJan3,     JPComingOfAgeDay, JPSeijinNoHi, JPNatFoundationDay,     JPKenkokuKinenNoHi, JPGreeneryDay, JPMidoriNoHi,      JPConstitutionDay, JPKenpouKinenBi, JPNationHoliday,      JPKokuminNoKyujitu, JPChildrensDay, JPKodomoNoHi,      JPMarineDay, JPUmiNoHi, JPRespectForTheAgedDay,     JPKeirouNoHi, JPAutumnalEquinox, JPShuubun--hi,      JPHealthandSportsDay, JPTaiikuNoHi, JPNationalCultureDay,      JPBunkaNoHi, JPThanksgivingDay, JPKinrouKanshaNohi,      JPKinrou-kansha--hi, JPEmperorsBirthday,     JPTennou-tanjyou-bi, JPTennou-tanjyou-bi.      JPMountainDay","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/holiday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Holiday dates — holiday","text":"","code":"## holiday -    # Dates for GoodFriday from 2000 until 2005:    holiday(2000:2005, \"GoodFriday\")                   #> GMT #> [1] [2000-04-21] [2001-04-13] [2002-03-29] [2003-04-18] [2004-04-09] #> [6] [2005-03-25]    holiday(2000:2005, GoodFriday) # same (GoodFriday is a function) #> GMT #> [1] [2000-04-21] [2001-04-13] [2002-03-29] [2003-04-18] [2004-04-09] #> [6] [2005-03-25]     # Good Friday and Easter    holiday(2000:2005, c(\"GoodFriday\", \"Easter\"))                   #> GMT #>  [1] [2000-04-21] [2001-04-13] [2002-03-29] [2003-04-18] [2004-04-09] #>  [6] [2005-03-25] [2000-04-23] [2001-04-15] [2002-03-31] [2003-04-20] #> [11] [2004-04-11] [2005-03-27]    holiday(2000:2005, c(GoodFriday, Easter))                   #> GMT #>  [1] [2000-04-21] [2001-04-13] [2002-03-29] [2003-04-18] [2004-04-09] #>  [6] [2005-03-25] [2000-04-23] [2001-04-15] [2002-03-31] [2003-04-20] #> [11] [2004-04-11] [2005-03-27]     ## Easter -       Easter(2000:2005) #> GMT #> [1] [2000-04-23] [2001-04-15] [2002-03-31] [2003-04-20] [2004-04-11] #> [6] [2005-03-27]  ## GoodFriday -                               GoodFriday(2000:2005) #> GMT #> [1] [2000-04-21] [2001-04-13] [2002-03-29] [2003-04-18] [2004-04-09] #> [6] [2005-03-25]    Easter(2000:2005, -2)  #> GMT #> [1] [2000-04-21] [2001-04-13] [2002-03-29] [2003-04-18] [2004-04-09] #> [6] [2005-03-25]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-as.html","id":null,"dir":"Reference","previous_headings":"","what":"Coercion from/to 'timeDate' — as.timeDate","title":"Coercion from/to 'timeDate' — as.timeDate","text":"Coerce transform objects class \"timeDate\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-as.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coercion from/to 'timeDate' — as.timeDate","text":"","code":"## methods for base R functions # S3 method for timeDate as.character(x, ...)  # S3 method for timeDate as.double(x,      units = c(\"auto\", \"secs\", \"mins\", \"hours\", \"days\", \"weeks\"), ...)  # S3 method for timeDate as.data.frame(x, ...)  # S3 method for timeDate as.POSIXct(x, tz = \"\", ...)  # S3 method for timeDate as.POSIXlt(x, tz = \"\", ...)  # S3 method for timeDate as.Date(x, method = c(\"trunc\", \"round\", \"next\"), ...)  ## methods for as.timeDate # S3 method for default as.timeDate(x, zone = \"\", FinCenter = \"\")    # S3 method for POSIXt as.timeDate(x, zone = \"\", FinCenter = \"\")  # S3 method for Date as.timeDate(x, zone = \"\", FinCenter = \"\")  # S3 method for timeDate as.timeDate(x, zone = x@FinCenter, FinCenter = \"\")"},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-as.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coercion from/to 'timeDate' — as.timeDate","text":"FinCenter character location       financial center named \"continent/city\". method character string denoting method determine     dates. tz inputs time zone POSIX objects, .e. time zone,      zone, financial center string, FinCenter,      used \"timeDate\" objects. units character string denoting date/time units      results desired. x object class \"timeDate\". zone time zone financial center data recorded. ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-as.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coercion from/to 'timeDate' — as.timeDate","text":".timeDate.POSIXt, object class \"timeDate\", .timeDate.Date, object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-as.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coercion from/to 'timeDate' — as.timeDate","text":"","code":"## timeDate -     tC = timeCalendar()  ## Convert 'timeDate' to a character strings:    as.character(tC) #>  [1] \"2023-01-01\" \"2023-02-01\" \"2023-03-01\" \"2023-04-01\" \"2023-05-01\" #>  [6] \"2023-06-01\" \"2023-07-01\" \"2023-08-01\" \"2023-09-01\" \"2023-10-01\" #> [11] \"2023-11-01\" \"2023-12-01\"     ## Coerce a 'Date' object into a 'timeDate' object:    as.timeDate(Sys.Date()) #> GMT #> [1] [2023-12-15]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-mathOps.html","id":null,"dir":"Reference","previous_headings":"","what":"Mathematical operations with 'timeDate' objects — timeDateMathOps","title":"Mathematical operations with 'timeDate' objects — timeDateMathOps","text":"Functions mathematical logical operations \"timeDate\"   objects.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-mathOps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mathematical operations with 'timeDate' objects — timeDateMathOps","text":"","code":"# S4 method for timeDate,timeDate Ops(e1, e2)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-mathOps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mathematical operations with 'timeDate' objects — timeDateMathOps","text":"e1, e2 objects class \"timeDate\". case addition     subtraction one may class numeric, specifying     number seconds add subtract.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-mathOps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mathematical operations with 'timeDate' objects — timeDateMathOps","text":"Group \"Ops\" represents binary mathematical operators.   Methods defined operations one arguments   class \"timeDate\". Operations make sense, addition two   \"timeDate\" objects, throw error. plus operator \"+\" performs arithmetic \"+\" operation    \"timeDate\" objects, minus operator \"-\" returns    difftime object arguments e1 e2    \"timeDate\" objects, returns \"timeDate\" object    e2 seconds earlier e1.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-mathOps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mathematical operations with 'timeDate' objects — timeDateMathOps","text":"addition numeric \"timeDate\" returns \"timeDate\", subtraction numeric \"timeDate\" returns \"timeDate\", subtraction two \"timeDate\" objects returns \"difftime\", operations two \"timeDate\" objects applied   underlying times (slot \"Date\"). result   operation converted \"timeDate\" represents time   returned otherwise.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-mathOps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mathematical operations with 'timeDate' objects — timeDateMathOps","text":"","code":"## Create Character Vectors:    dts = c(\"1989-09-28\", \"2001-01-15\", \"2004-08-30\", \"1990-02-09\")    dts #> [1] \"1989-09-28\" \"2001-01-15\" \"2004-08-30\" \"1990-02-09\"    tms = c(  \"23:12:55\",   \"10:34:02\",   \"08:30:00\",   \"11:18:23\")    tms #> [1] \"23:12:55\" \"10:34:02\" \"08:30:00\" \"11:18:23\"     ## \"+/-\" -     # Add One Day to a Given timeDate Object:    GMT = timeDate(dts, zone = \"GMT\", FinCenter = \"GMT\")    GMT #> GMT #> [1] [1989-09-28] [2001-01-15] [2004-08-30] [1990-02-09]    ZUR = timeDate(dts, zone = \"GMT\", FinCenter = \"Europe/Zurich\")    ZUR #> Europe/Zurich #> [1] [1989-09-28 01:00:00] [2001-01-15 01:00:00] [2004-08-30 02:00:00] #> [4] [1990-02-09 01:00:00]    GMT + 24*3600 #> GMT #> [1] [1989-09-29] [2001-01-16] [2004-08-31] [1990-02-10]    ZUR[2] - ZUR[1]  #> Time difference of 4127 days"},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-names.html","id":null,"dir":"Reference","previous_headings":"","what":"The names of a 'timeDate' object — names-methods","title":"The names of a 'timeDate' object — names-methods","text":"Functions get set names \"timeDate\" object.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The names of a 'timeDate' object — names-methods","text":"","code":"# S4 method for timeDate names(x) # S4 method for timeDate names(x) <- value"},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The names of a 'timeDate' object — names-methods","text":"x object class \"timeDate\". value character vector length 'x', 'NULL'.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The names of a 'timeDate' object — names-methods","text":"","code":"td <- timeCalendar() td #> GMT #>  [1] [2023-01-01] [2023-02-01] [2023-03-01] [2023-04-01] [2023-05-01] #>  [6] [2023-06-01] [2023-07-01] [2023-08-01] [2023-09-01] [2023-10-01] #> [11] [2023-11-01] [2023-12-01] names(td) <- LETTERS[seq_along(td)] td #> GMT #>            A            B            C            D            E            F  #> [2023-01-01] [2023-02-01] [2023-03-01] [2023-04-01] [2023-05-01] [2023-06-01]  #>            G            H            I            J            K            L  #> [2023-07-01] [2023-08-01] [2023-09-01] [2023-10-01] [2023-11-01] [2023-12-01]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-show.html","id":null,"dir":"Reference","previous_headings":"","what":"Show methods — show-methods","title":"Show methods — show-methods","text":"Show methods \"timeDate\" objects.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-show.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Show methods — show-methods","text":"object = \"\" Generic function. object = \"timeDate\" Print function objects class \"timeDate\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/methods-show.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show methods — show-methods","text":"","code":"## print | show -    print(timeCalendar()) #> GMT #>  [1] [2023-01-01] [2023-02-01] [2023-03-01] [2023-04-01] [2023-05-01] #>  [6] [2023-06-01] [2023-07-01] [2023-08-01] [2023-09-01] [2023-10-01] #> [11] [2023-11-01] [2023-12-01]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/options-RmetricsOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Rmetrics option settings — RmetricsOptions","title":"Rmetrics option settings — RmetricsOptions","text":"Allow user set examine variety global options   affect way Rmetrics functions compute display   results.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/options-RmetricsOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rmetrics option settings — RmetricsOptions","text":"","code":"setRmetricsOptions(...) getRmetricsOption(x, unset = \"\")"},{"path":"https://geobosh.github.io/timeDateDoc/reference/options-RmetricsOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rmetrics option settings — RmetricsOptions","text":"unset character string holding return value x set. x character string holding option name. ... options can defined, using name = value     passing list tagged values.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/options-currentYear.html","id":null,"dir":"Reference","previous_headings":"","what":"Current year — currentYear","title":"Current year — currentYear","text":"variable containing current year.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/options-currentYear.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Current year — currentYear","text":"allowed change variable.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/options-currentYear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current year — currentYear","text":"","code":"## currentYear -    getRmetricsOptions(\"currentYear\") #> currentYear  #>        2023"},{"path":"https://geobosh.github.io/timeDateDoc/reference/options-myFinCenter.html","id":null,"dir":"Reference","previous_headings":"","what":"myFinCenter variable — myFinCenter","title":"myFinCenter variable — myFinCenter","text":"character string name financial center.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/options-myFinCenter.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"myFinCenter variable — myFinCenter","text":"Can modified user /financial     center. default \"GMT\".  list supported     financial centers use function listFinCenter.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeDateDoc/reference/options-myFinCenter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"myFinCenter variable — myFinCenter","text":"","code":"## myFinCenter - the global setting currently used:    getRmetricsOptions(\"myFinCenter\") #> myFinCenter  #>       \"GMT\"      ## Change to another Financial center:    # setRmetricsOptions(myFinCenter = \"Zurich\")     ## Do not care about DST ...    # setRmetricsOptions(myFinCenter = \"GMT\")"},{"path":"https://geobosh.github.io/timeDateDoc/reference/options-myUnits.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequency of date/time units — myUnits","title":"Frequency of date/time units — myUnits","text":"variable frequency date/units.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/options-myUnits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frequency of date/time units — myUnits","text":"date/time units, character value, yy default \"days\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/options-myUnits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frequency of date/time units — myUnits","text":"","code":"## myUnits -    getRmetricsOptions(\"myUnits\") #> myUnits  #>  \"days\""},{"path":"https://geobosh.github.io/timeDateDoc/reference/specialHolidayGB.html","id":null,"dir":"Reference","previous_headings":"","what":"Dates of special one-off holidays in the UK — specialHolidayGB","title":"Dates of special one-off holidays in the UK — specialHolidayGB","text":"Gives dates special one-holidays UK.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/specialHolidayGB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dates of special one-off holidays in the UK — specialHolidayGB","text":"","code":"specialHolidayGB(year = getRmetricsOptions(\"currentYear\"),                      value = \"timeDate\", named = FALSE, ...)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/specialHolidayGB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dates of special one-off holidays in the UK — specialHolidayGB","text":"year year(s) special holidays required, vector     containing four-digit integer number(s) form CCYY,     e.g. 2023.  value class returned value. \"timeDate\", default,     return \"timeDate\" object, \"\" return character     vector.  named TRUE, dates named, otherwise unnamed.  ... arguments .character value = \"\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/specialHolidayGB.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dates of special one-off holidays in the UK — specialHolidayGB","text":"specialHolidayGB gives special Bank holidays England   years specified argument year, Millenium day   end 1999 significant Royal events. assume   one special holiday given year, 2022 two. Years contain special Bank holidays omitted.   special holidays specified year(s) results   \"timeDate\" \"character\" object length zero. holidays sorted increasing time order. Argument value controls class result. default   \"timeDate\". result character vector value =   \"\" (empty string). latter case, arguments   transformation character can passed argument   \"...\" (e.g., format). argument named TRUE, dates get names   asssociated , one can see date represents   holiday.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/specialHolidayGB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dates of special one-off holidays in the UK — specialHolidayGB","text":"\"timeDate\" character vector, requested argument  value.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/specialHolidayGB.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dates of special one-off holidays in the UK — specialHolidayGB","text":"Georgi N. Boshnakov","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/specialHolidayGB.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Dates of special one-off holidays in the UK — specialHolidayGB","text":"holidays given functions prefix   GBxxx valid UK whole ()   fully correct England, variations Scotland, Wales   Northern Ireland. Functions containing 'London' name refer London Stock   Exchange. Currently, Bank holidays given functions   England. Actually, 'official' holidays   1834 1870 set Bank England. first Act   Parlament issue 1871.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeDateDoc/reference/specialHolidayGB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dates of special one-off holidays in the UK — specialHolidayGB","text":"","code":"## UK Millenium day specialHolidayGB(1999)     # as a dateTime object #> GMT #> [1] [1999-12-31] specialHolidayGB(1999, \"\") # as a character string #> [1] \"1999-12-31\"  ## 2 special holidays in UK in 2022 specialHolidayGB(2022)     # [2022-06-03] [2022-09-19] #> GMT #> [1] [2022-06-03] [2022-09-19] ## what are their names? specialHolidayGB(2022, named = TRUE) #> GMT #> GBQueensPlatinumJubileeDay         GBQueensFuneralDay  #>               [2022-06-03]               [2022-09-19]   ## the Spring BH is usually on last Monday of May, but not in 2022 dayOfWeek(GBSpringBankHoliday(2020:2024)) #> 2020-05-25 2021-05-31 2022-06-02 2023-05-29 2024-05-27  #>      \"Mon\"      \"Mon\"      \"Thu\"      \"Mon\"      \"Mon\"   ## the above formed a nice 4-day weekend in early June 2022 ## (look at the Thu-Fri sequence on 2-3 June) dayOfWeek(holidayLONDON(2022)) #> 2022-01-03 2022-04-15 2022-04-18 2022-05-02 2022-06-02 2022-06-03 2022-08-29  #>      \"Mon\"      \"Fri\"      \"Mon\"      \"Mon\"      \"Thu\"      \"Fri\"      \"Mon\"  #> 2022-09-19 2022-12-26 2022-12-27  #>      \"Mon\"      \"Mon\"      \"Tue\""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-blockStart.html","id":null,"dir":"Reference","previous_headings":"","what":"Equally sized 'timeDate' blocks — blockStart","title":"Equally sized 'timeDate' blocks — blockStart","text":"Creates start (end) dates equally sized \"timeDate\" blocks.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-blockStart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equally sized 'timeDate' blocks — blockStart","text":"","code":"blockStart(x, block = 20) blockEnd(x, block = 20)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-blockStart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equally sized 'timeDate' blocks — blockStart","text":"block integer value specifying length number records     numerically sized blocks dates. x object class \"timeDate\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-blockStart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Equally sized 'timeDate' blocks — blockStart","text":"functions blockStart blockEnd create vectors   start end values equally sized \"timeDate\" blocks. Note,   functions event counters time counter   measuring time intervals start end dates! equally   sized blocks time one align time stamps equal   time differences.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-blockStart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equally sized 'timeDate' blocks — blockStart","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-blockStart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equally sized 'timeDate' blocks — blockStart","text":"","code":"## timeSequence    # 360 Days Series:    tS <- timeSequence(to = \"2022-09-23 09:39:23\", length.out = 360)      ## blockStart | blockEnd -    Start <- blockStart(tS, 30)    End <- blockEnd(tS, 30)    Start #> GMT #>  [1] [2022-08-25 09:39:23] [2022-09-24 09:39:23] [2022-10-24 09:39:23] #>  [4] [2022-11-23 09:39:23] [2022-12-23 09:39:23] [2023-01-22 09:39:23] #>  [7] [2023-02-21 09:39:23] [2023-03-23 09:39:23] [2023-04-22 09:39:23] #> [10] [2023-05-22 09:39:23] [2023-06-21 09:39:23] [2023-07-21 09:39:23]    End #> GMT #>  [1] [2022-09-23 09:39:23] [2022-10-23 09:39:23] [2022-11-22 09:39:23] #>  [4] [2022-12-22 09:39:23] [2023-01-21 09:39:23] [2023-02-20 09:39:23] #>  [7] [2023-03-22 09:39:23] [2023-04-21 09:39:23] [2023-05-21 09:39:23] #> [10] [2023-06-20 09:39:23] [2023-07-20 09:39:23] [2023-08-19 09:39:23]    End - Start #> Time differences in days #>  [1] 29 29 29 29 29 29 29 29 29 29 29 29"},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-kurtosis.html","id":null,"dir":"Reference","previous_headings":"","what":"Kurtosis — kurtosis","title":"Kurtosis — kurtosis","text":"Generic function computation kurtosis.   methods defined package timeDate described .","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-kurtosis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kurtosis — kurtosis","text":"","code":"kurtosis(x, ...)  # S3 method for default kurtosis(x, na.rm = FALSE,                   method = c(\"excess\", \"moment\", \"fisher\"), ...)  # S3 method for data.frame kurtosis(x, na.rm = FALSE,                   method = c(\"excess\", \"moment\", \"fisher\"), ...)  # S3 method for POSIXct kurtosis(x, ...)  # S3 method for POSIXlt kurtosis(x, ...)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-kurtosis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kurtosis — kurtosis","text":"x numeric vector object. na.rm logical. missing values removed? method character string, method computation, see section     ‘Details’.  ... arguments passed.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-kurtosis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kurtosis — kurtosis","text":"kurtosis S3 generic function.  page describes   methods defined package dateTime. Argument \"method\" can one \"moment\",   \"fisher\", \"excess\".  \"excess\" selected,   value kurtosis computed \"moment\"   method value 3 subtracted.  \"moment\"   method based definitions kurtosis distributions   method used resampling (bootstrap   jackknife). \"fisher\" method correspond usual   \"unbiased\" definition sample variance, although case   kurtosis exact unbiasedness possible. x numeric kurtosis computed according   description given argument method. logical vector   treated vector 1's 0's. data.frame method applies kurtosis recursively   column. POSIXlt method computes kurtosis   underlying numerical representation date/times. method   POSIXct converting argument   POSIXlt. default method returns NA, warning,   handle argument x.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-kurtosis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kurtosis — kurtosis","text":"numeric value vector attribute \"method\" indicating     method.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-kurtosis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kurtosis — kurtosis","text":"","code":"## mean - ## var -    # Mean, Variance:    r = rnorm(100)    mean(r) #> [1] 0.1377274    var(r) #> [1] 0.9890214     ## kurtosis -     kurtosis(r) #> [1] 0.3031735 #> attr(,\"method\") #> [1] \"excess\"     kurtosis(data.frame(r = r, r2 = r^2)) #>         r        r2  #> 0.3031735 7.6385426  #> attr(,\"method\") #> [1] \"excess\""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-na-fail.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for 'is.na' — is.na-methods","title":"Methods for 'is.na' — is.na-methods","text":".na methods \"timeDate\" objects.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-na-fail.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for 'is.na' — is.na-methods","text":"","code":"# Create a timeCalendar sequence (td <- timeCalendar()) #> GMT #>  [1] [2023-01-01] [2023-02-01] [2023-03-01] [2023-04-01] [2023-05-01] #>  [6] [2023-06-01] [2023-07-01] [2023-08-01] [2023-09-01] [2023-10-01] #> [11] [2023-11-01] [2023-12-01] is.na(td) #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  # insert NA's is.na(td) <- 2:3 td #> GMT #>  [1] [2023-01-01] [NA]         [NA]         [2023-04-01] [2023-05-01] #>  [6] [2023-06-01] [2023-07-01] [2023-08-01] [2023-09-01] [2023-10-01] #> [11] [2023-11-01] [2023-12-01]  # test of NA's is.na(td) #>  [1] FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE"},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-skewness.html","id":null,"dir":"Reference","previous_headings":"","what":"Skewness — skewness","title":"Skewness — skewness","text":"Functions compute skewness.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-skewness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skewness — skewness","text":"","code":"skewness(x, ...)  # S3 method for default skewness(x, na.rm = FALSE, method = c(\"moment\", \"fisher\"), ...)  # S3 method for data.frame skewness(x, na.rm = FALSE, method = c(\"moment\", \"fisher\"), ...)  # S3 method for POSIXct skewness(x, ...)  # S3 method for POSIXlt skewness(x, ...)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-skewness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skewness — skewness","text":"x numeric vector object. na.rm logical. missing values removed? method character string, method computation, see section     ‘Detaials’.  ... arguments passed.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-skewness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skewness — skewness","text":"Argument method can one \"moment\"   \"fisher\".  \"moment\" method based   definitions skewness distributions used   resampling (bootstrap jackknife). \"fisher\" method   correspond usual \"unbiased\" definition sample variance,   although case skewness exact unbiasedness possible.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-skewness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skewness — skewness","text":"numeric value vector attribute \"method\" indicating   method.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-skewness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skewness — skewness","text":"","code":"## mean - ## var -    # Mean, Variance:    r = rnorm(100)    mean(r) #> [1] 0.02388186    var(r) #> [1] 1.000822     ## skewness -    skewness(r)   #> [1] 0.07497603 #> attr(,\"method\") #> [1] \"moment\""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-window.html","id":null,"dir":"Reference","previous_headings":"","what":"Time windows — window","title":"Time windows — window","text":"Extract subset \"timeDate\" object observed two   time stamps.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time windows — window","text":"","code":"# S3 method for timeDate window(x, start , end, ...)  # S3 method for timeDate cut(x, from , to, ...)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time windows — window","text":", starting date, required, end date, optional. supplied      must . start, end starting date, required, end date, optional. supplied      must . x object class \"timeDate\". ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time windows — window","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-window.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Time windows — window","text":"method cut discouraged sources   long time (recommendation use window).   officially deprecated next release later removed   replaced method consistent methods   cut base R,","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/stats-window.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time windows — window","text":"","code":"## timeCalendar -     # Monthly Dates in Current Year:    tS = timeCalendar()    tS  #> GMT #>  [1] [2023-01-01] [2023-02-01] [2023-03-01] [2023-04-01] [2023-05-01] #>  [6] [2023-06-01] [2023-07-01] [2023-08-01] [2023-09-01] [2023-10-01] #> [11] [2023-11-01] [2023-12-01]     ## window -    # 2nd Quarter Window:    tS[4:6] #> GMT #> [1] [2023-04-01] [2023-05-01] [2023-06-01]    window(tS, tS[4], tS[6]) #> GMT #> [1] [2023-04-01] [2023-05-01] [2023-06-01]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-Calendar.html","id":null,"dir":"Reference","previous_headings":"","what":"'timeDate' from calendar atoms — timeCalendar","title":"'timeDate' from calendar atoms — timeCalendar","text":"Create \"timeDate\" object calendar atoms.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-Calendar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'timeDate' from calendar atoms — timeCalendar","text":"","code":"timeCalendar(y = getRmetricsOptions(\"currentYear\"), m = 1:12, d = 1,     h = 0, min = 0, s = 0,     zone = \"\", FinCenter = \"\")"},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-Calendar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'timeDate' from calendar atoms — timeCalendar","text":"y, m, d calendar years (e.g. 1997), defaults 1960,     calendar months (1-12), defaults 1,     calendar days (1-31), defaults 1, h, min, s hours days (0-23), defaults 0,     minutes days (0-59), defaults 0,     seconds days (0-59), defaults 0. zone character string, denoting time zone financial      center data recorded. FinCenter character location     financial center named \"continent/city\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-Calendar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'timeDate' from calendar atoms — timeCalendar","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-Calendar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'timeDate' from calendar atoms — timeCalendar","text":"","code":"## timeCalendar -        # Current Year:    getRmetricsOptions(\"currentYear\") #> currentYear  #>        2023         # 12 months of current year    timeCalendar()  #> GMT #>  [1] [2023-01-01] [2023-02-01] [2023-03-01] [2023-04-01] [2023-05-01] #>  [6] [2023-06-01] [2023-07-01] [2023-08-01] [2023-09-01] [2023-10-01] #> [11] [2023-11-01] [2023-12-01]        timeCalendar(m = c(9, 1, 8, 2), d = c(28, 15, 30, 9),                 y = c(1989, 2001, 2004, 1990), FinCenter = \"GMT\") #> GMT #> [1] [1989-09-28] [2001-01-15] [2004-08-30] [1990-02-09]        timeCalendar(m = c(9, 1, 8, 2), d = c(28, 15, 30, 9),                 y = c(1989, 2001, 2004, 1990), FinCenter = \"Europe/Zurich\") #> Europe/Zurich #> [1] [1989-09-28 01:00:00] [2001-01-15 01:00:00] [2004-08-30 02:00:00] #> [4] [1990-02-09 01:00:00]                     timeCalendar(h = c(9, 14), min = c(15, 23)) #> GMT #>  [1] [2023-01-01 09:15:00] [2023-02-01 14:23:00] [2023-03-01 09:15:00] #>  [4] [2023-04-01 14:23:00] [2023-05-01 09:15:00] [2023-06-01 14:23:00] #>  [7] [2023-07-01 09:15:00] [2023-08-01 14:23:00] [2023-09-01 09:15:00] #> [10] [2023-10-01 14:23:00] [2023-11-01 09:15:00] [2023-12-01 14:23:00]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-DaylightSavingTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Daylight Saving Time Rules — DaylightSavingTime","title":"Daylight Saving Time Rules — DaylightSavingTime","text":"Functions 400 cities regions return daylight   saving time rules time zone offsets.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-DaylightSavingTime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Daylight Saving Time Rules — DaylightSavingTime","text":"selection functions: Adelaide Algiers Amsterdam Anchorage Andorra Athens Auckland Bahrain   Bangkok Beirut Belfast Belgrade Berlin Bogota Bratislava Brisbane   Brussels Bucharest Budapest BuenosAires Cairo Calcutta Caracas   Casablanca Cayman Chicago Copenhagen Darwin Denver Detroit Dubai   Dublin Eastern Edmonton Frankfurt Helsinki HongKong Honolulu   Indianapolis Istanbul Jakarta Jerusalem Johannesburg Kiev   KualaLumpur Kuwait Lagos Lisbon Ljubljana London LosAngeles   Luxembourg Madrid Manila Melbourne MexicoCity Monaco Montreal Moscow   Nairobi Nassau NewYork Nicosia Oslo Pacific Paris Perth Prague Riga   Riyadh Rome Seoul Shanghai Singapore Sofia Stockholm Sydney Taipei   Tallinn Tehran Tokyo Tunis Vaduz Vancouver Vienna Vilnius Warsaw   Winnipeg Zagreb Zurich, ...","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-DaylightSavingTime.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Daylight Saving Time Rules — DaylightSavingTime","text":"currently two synonyms available \"Pacific\" Los Angeles   \"Eastern\" New York. Specific time zones (AST, CET, CST, EET,   EST, MST PST) also available. Note leave space double named cities like New York    Hong Kong use underscore . entries retrieved tzdata library    available GNU GPL licence.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-DaylightSavingTime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Daylight Saving Time Rules — DaylightSavingTime","text":"","code":"## DST Rules for Zurich:    head(Zurich()) #>                Zurich offSet isdst TimeZone     numeric #> 1 1853-07-15 23:25:52   1786     0      BMT -3675198848 #> 2 1894-05-31 23:30:14   3600     0      CET -2385246586 #> 3 1941-05-05 00:00:00   7200     1     CEST  -904435200 #> 4 1941-10-06 00:00:00   3600     0      CET  -891129600 #> 5 1942-05-04 00:00:00   7200     1     CEST  -872985600 #> 6 1942-10-05 00:00:00   3600     0      CET  -859680000    tail(Zurich()) #>                  Zurich offSet isdst TimeZone    numeric #> 239 2097-03-31 01:00:00   7200     1     CEST 4015530000 #> 240 2097-10-27 01:00:00   3600     0      CET 4033674000 #> 241 2098-03-30 01:00:00   7200     1     CEST 4046979600 #> 242 2098-10-26 01:00:00   3600     0      CET 4065123600 #> 243 2099-03-29 01:00:00   7200     1     CEST 4078429200 #> 244 2099-10-25 01:00:00   3600     0      CET 4096573200  ## list all available centers listFinCenter() #>   [1] \"Africa/Abidjan\"                 \"Africa/Algiers\"                 #>   [3] \"Africa/Bissau\"                  \"Africa/Cairo\"                   #>   [5] \"Africa/Casablanca\"              \"Africa/Ceuta\"                   #>   [7] \"Africa/El_Aaiun\"                \"Africa/Johannesburg\"            #>   [9] \"Africa/Juba\"                    \"Africa/Khartoum\"                #>  [11] \"Africa/Lagos\"                   \"Africa/Maputo\"                  #>  [13] \"Africa/Monrovia\"                \"Africa/Nairobi\"                 #>  [15] \"Africa/Ndjamena\"                \"Africa/Sao_Tome\"                #>  [17] \"Africa/Tripoli\"                 \"Africa/Tunis\"                   #>  [19] \"Africa/Windhoek\"                \"America/Adak\"                   #>  [21] \"America/Anchorage\"              \"America/Araguaina\"              #>  [23] \"America/Argentina/Buenos_Aires\" \"America/Argentina/Catamarca\"    #>  [25] \"America/Argentina/Cordoba\"      \"America/Argentina/Jujuy\"        #>  [27] \"America/Argentina/La_Rioja\"     \"America/Argentina/Mendoza\"      #>  [29] \"America/Argentina/Rio_Gallegos\" \"America/Argentina/Salta\"        #>  [31] \"America/Argentina/San_Juan\"     \"America/Argentina/San_Luis\"     #>  [33] \"America/Argentina/Tucuman\"      \"America/Argentina/Ushuaia\"      #>  [35] \"America/Asuncion\"               \"America/Bahia\"                  #>  [37] \"America/Bahia_Banderas\"         \"America/Barbados\"               #>  [39] \"America/Belem\"                  \"America/Belize\"                 #>  [41] \"America/Boa_Vista\"              \"America/Bogota\"                 #>  [43] \"America/Boise\"                  \"America/Cambridge_Bay\"          #>  [45] \"America/Campo_Grande\"           \"America/Cancun\"                 #>  [47] \"America/Caracas\"                \"America/Cayenne\"                #>  [49] \"America/Chicago\"                \"America/Chihuahua\"              #>  [51] \"America/Costa_Rica\"             \"America/Cuiaba\"                 #>  [53] \"America/Danmarkshavn\"           \"America/Dawson\"                 #>  [55] \"America/Dawson_Creek\"           \"America/Denver\"                 #>  [57] \"America/Detroit\"                \"America/Edmonton\"               #>  [59] \"America/Eirunepe\"               \"America/El_Salvador\"            #>  [61] \"America/Fort_Nelson\"            \"America/Fortaleza\"              #>  [63] \"America/Glace_Bay\"              \"America/Goose_Bay\"              #>  [65] \"America/Grand_Turk\"             \"America/Guatemala\"              #>  [67] \"America/Guayaquil\"              \"America/Guyana\"                 #>  [69] \"America/Halifax\"                \"America/Havana\"                 #>  [71] \"America/Hermosillo\"             \"America/Indiana/Indianapolis\"   #>  [73] \"America/Indiana/Knox\"           \"America/Indiana/Marengo\"        #>  [75] \"America/Indiana/Petersburg\"     \"America/Indiana/Tell_City\"      #>  [77] \"America/Indiana/Vevay\"          \"America/Indiana/Vincennes\"      #>  [79] \"America/Indiana/Winamac\"        \"America/Inuvik\"                 #>  [81] \"America/Iqaluit\"                \"America/Jamaica\"                #>  [83] \"America/Juneau\"                 \"America/Kentucky/Louisville\"    #>  [85] \"America/Kentucky/Monticello\"    \"America/La_Paz\"                 #>  [87] \"America/Lima\"                   \"America/Los_Angeles\"            #>  [89] \"America/Maceio\"                 \"America/Managua\"                #>  [91] \"America/Manaus\"                 \"America/Martinique\"             #>  [93] \"America/Matamoros\"              \"America/Mazatlan\"               #>  [95] \"America/Menominee\"              \"America/Merida\"                 #>  [97] \"America/Metlakatla\"             \"America/Mexico_City\"            #>  [99] \"America/Miquelon\"               \"America/Moncton\"                #> [101] \"America/Monterrey\"              \"America/Montevideo\"             #> [103] \"America/New_York\"               \"America/Nome\"                   #> [105] \"America/Noronha\"                \"America/North_Dakota/Beulah\"    #> [107] \"America/North_Dakota/Center\"    \"America/North_Dakota/New_Salem\" #> [109] \"America/Nuuk\"                   \"America/Ojinaga\"                #> [111] \"America/Panama\"                 \"America/Paramaribo\"             #> [113] \"America/Phoenix\"                \"America/Port-au-Prince\"         #> [115] \"America/Porto_Velho\"            \"America/Puerto_Rico\"            #> [117] \"America/Punta_Arenas\"           \"America/Rankin_Inlet\"           #> [119] \"America/Recife\"                 \"America/Regina\"                 #> [121] \"America/Resolute\"               \"America/Rio_Branco\"             #> [123] \"America/Santarem\"               \"America/Santiago\"               #> [125] \"America/Santo_Domingo\"          \"America/Sao_Paulo\"              #> [127] \"America/Scoresbysund\"           \"America/Sitka\"                  #> [129] \"America/St_Johns\"               \"America/Swift_Current\"          #> [131] \"America/Tegucigalpa\"            \"America/Thule\"                  #> [133] \"America/Tijuana\"                \"America/Toronto\"                #> [135] \"America/Vancouver\"              \"America/Whitehorse\"             #> [137] \"America/Winnipeg\"               \"America/Yakutat\"                #> [139] \"America/Yellowknife\"            \"Antarctica/Casey\"               #> [141] \"Antarctica/Davis\"               \"Antarctica/Macquarie\"           #> [143] \"Antarctica/Mawson\"              \"Antarctica/Palmer\"              #> [145] \"Antarctica/Rothera\"             \"Antarctica/Troll\"               #> [147] \"Asia/Almaty\"                    \"Asia/Amman\"                     #> [149] \"Asia/Anadyr\"                    \"Asia/Aqtau\"                     #> [151] \"Asia/Aqtobe\"                    \"Asia/Ashgabat\"                  #> [153] \"Asia/Atyrau\"                    \"Asia/Baghdad\"                   #> [155] \"Asia/Baku\"                      \"Asia/Bangkok\"                   #> [157] \"Asia/Barnaul\"                   \"Asia/Beirut\"                    #> [159] \"Asia/Bishkek\"                   \"Asia/Chita\"                     #> [161] \"Asia/Choibalsan\"                \"Asia/Colombo\"                   #> [163] \"Asia/Damascus\"                  \"Asia/Dhaka\"                     #> [165] \"Asia/Dili\"                      \"Asia/Dubai\"                     #> [167] \"Asia/Dushanbe\"                  \"Asia/Famagusta\"                 #> [169] \"Asia/Gaza\"                      \"Asia/Hebron\"                    #> [171] \"Asia/Ho_Chi_Minh\"               \"Asia/Hong_Kong\"                 #> [173] \"Asia/Hovd\"                      \"Asia/Irkutsk\"                   #> [175] \"Asia/Jakarta\"                   \"Asia/Jayapura\"                  #> [177] \"Asia/Jerusalem\"                 \"Asia/Kabul\"                     #> [179] \"Asia/Kamchatka\"                 \"Asia/Karachi\"                   #> [181] \"Asia/Kathmandu\"                 \"Asia/Khandyga\"                  #> [183] \"Asia/Kolkata\"                   \"Asia/Krasnoyarsk\"               #> [185] \"Asia/Kuching\"                   \"Asia/Macau\"                     #> [187] \"Asia/Magadan\"                   \"Asia/Makassar\"                  #> [189] \"Asia/Manila\"                    \"Asia/Nicosia\"                   #> [191] \"Asia/Novokuznetsk\"              \"Asia/Novosibirsk\"               #> [193] \"Asia/Omsk\"                      \"Asia/Oral\"                      #> [195] \"Asia/Pontianak\"                 \"Asia/Pyongyang\"                 #> [197] \"Asia/Qatar\"                     \"Asia/Qostanay\"                  #> [199] \"Asia/Qyzylorda\"                 \"Asia/Riyadh\"                    #> [201] \"Asia/Sakhalin\"                  \"Asia/Samarkand\"                 #> [203] \"Asia/Seoul\"                     \"Asia/Shanghai\"                  #> [205] \"Asia/Singapore\"                 \"Asia/Srednekolymsk\"             #> [207] \"Asia/Taipei\"                    \"Asia/Tashkent\"                  #> [209] \"Asia/Tbilisi\"                   \"Asia/Tehran\"                    #> [211] \"Asia/Thimphu\"                   \"Asia/Tokyo\"                     #> [213] \"Asia/Tomsk\"                     \"Asia/Ulaanbaatar\"               #> [215] \"Asia/Urumqi\"                    \"Asia/Ust-Nera\"                  #> [217] \"Asia/Vladivostok\"               \"Asia/Yakutsk\"                   #> [219] \"Asia/Yangon\"                    \"Asia/Yekaterinburg\"             #> [221] \"Asia/Yerevan\"                   \"Atlantic/Azores\"                #> [223] \"Atlantic/Bermuda\"               \"Atlantic/Canary\"                #> [225] \"Atlantic/Cape_Verde\"            \"Atlantic/Faroe\"                 #> [227] \"Atlantic/Madeira\"               \"Atlantic/South_Georgia\"         #> [229] \"Atlantic/Stanley\"               \"Australia/Adelaide\"             #> [231] \"Australia/Brisbane\"             \"Australia/Broken_Hill\"          #> [233] \"Australia/Darwin\"               \"Australia/Eucla\"                #> [235] \"Australia/Hobart\"               \"Australia/Lindeman\"             #> [237] \"Australia/Lord_Howe\"            \"Australia/Melbourne\"            #> [239] \"Australia/Perth\"                \"Australia/Sydney\"               #> [241] \"Europe/Andorra\"                 \"Europe/Astrakhan\"               #> [243] \"Europe/Athens\"                  \"Europe/Belgrade\"                #> [245] \"Europe/Berlin\"                  \"Europe/Brussels\"                #> [247] \"Europe/Bucharest\"               \"Europe/Budapest\"                #> [249] \"Europe/Chisinau\"                \"Europe/Dublin\"                  #> [251] \"Europe/Gibraltar\"               \"Europe/Helsinki\"                #> [253] \"Europe/Istanbul\"                \"Europe/Kaliningrad\"             #> [255] \"Europe/Kirov\"                   \"Europe/Kyiv\"                    #> [257] \"Europe/Lisbon\"                  \"Europe/London\"                  #> [259] \"Europe/Madrid\"                  \"Europe/Malta\"                   #> [261] \"Europe/Minsk\"                   \"Europe/Moscow\"                  #> [263] \"Europe/Paris\"                   \"Europe/Prague\"                  #> [265] \"Europe/Riga\"                    \"Europe/Rome\"                    #> [267] \"Europe/Samara\"                  \"Europe/Saratov\"                 #> [269] \"Europe/Simferopol\"              \"Europe/Sofia\"                   #> [271] \"Europe/Tallinn\"                 \"Europe/Tirane\"                  #> [273] \"Europe/Ulyanovsk\"               \"Europe/Vienna\"                  #> [275] \"Europe/Vilnius\"                 \"Europe/Volgograd\"               #> [277] \"Europe/Warsaw\"                  \"Europe/Zurich\"                  #> [279] \"Indian/Chagos\"                  \"Indian/Maldives\"                #> [281] \"Indian/Mauritius\"               \"Pacific/Apia\"                   #> [283] \"Pacific/Auckland\"               \"Pacific/Bougainville\"           #> [285] \"Pacific/Chatham\"                \"Pacific/Easter_Island\"          #> [287] \"Pacific/Efate\"                  \"Pacific/Fakaofo\"                #> [289] \"Pacific/Fiji\"                   \"Pacific/Galapagos\"              #> [291] \"Pacific/Gambier\"                \"Pacific/Guadalcanal\"            #> [293] \"Pacific/Guam\"                   \"Pacific/Honolulu\"               #> [295] \"Pacific/Kanton\"                 \"Pacific/Kiritimati\"             #> [297] \"Pacific/Kosrae\"                 \"Pacific/Kwajalein\"              #> [299] \"Pacific/Marquesas\"              \"Pacific/Nauru\"                  #> [301] \"Pacific/Niue\"                   \"Pacific/Norfolk\"                #> [303] \"Pacific/Noumea\"                 \"Pacific/Pago_Pago\"              #> [305] \"Pacific/Palau\"                  \"Pacific/Pitcairn\"               #> [307] \"Pacific/Port_Moresby\"           \"Pacific/Rarotonga\"              #> [309] \"Pacific/Tahiti\"                 \"Pacific/Tarawa\"                 #> [311] \"Pacific/Tongatapu\""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-Sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Regularly spaced 'timeDate' objects — timeSequence","title":"Regularly spaced 'timeDate' objects — timeSequence","text":"Create regularly spaced object class \"timeDate\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-Sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regularly spaced 'timeDate' objects — timeSequence","text":"","code":"timeSequence(from, to = Sys.timeDate(), by, length.out = NULL,             format = NULL, zone = \"\", FinCenter = \"\")  # S3 method for timeDate seq(from, to, by, length.out = NULL, along.with = NULL, ...)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-Sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regularly spaced 'timeDate' objects — timeSequence","text":", starting date, required, end date, optional.  supplied,     must (later ) .  character string, containing one \"sec\", \"min\",       \"hour\", \"day\", \"week\", \"month\" \"year\". can       optionally preceded integer       space, followed \"s\". character string \"quarter\" equivalent \"3 months\". number, taken seconds. object class 'difftime' character string \"DSTday\" gives sequence taken       clock time every day. Note days DST       changes, requested time may exist ambiguous, see       examples.  length.integer, optional. Desired length     sequence, specified \"\" ignored. along.Take length length argument. format format specification input character vector. zone time zone financial center data recorded. FinCenter character location     financial center named \"continent/city\". ... arguments passed methods.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-Sequence.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Regularly spaced 'timeDate' objects — timeSequence","text":"timeSequence() wrapper \"timeDate\" method   seq(), closely modeled base R's   POSIXt method, seq.POSIXt.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-Sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regularly spaced 'timeDate' objects — timeSequence","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-Sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regularly spaced 'timeDate' objects — timeSequence","text":"","code":"## timeSequence -  ## autodetection of format : (t1 <- timeSequence(from = \"2004-03-12\", to = \"2004-04-11\")) #> GMT #>  [1] [2004-03-12] [2004-03-13] [2004-03-14] [2004-03-15] [2004-03-16] #>  [6] [2004-03-17] [2004-03-18] [2004-03-19] [2004-03-20] [2004-03-21] #> [11] [2004-03-22] [2004-03-23] [2004-03-24] [2004-03-25] [2004-03-26] #> [16] [2004-03-27] [2004-03-28] [2004-03-29] [2004-03-30] [2004-03-31] #> [21] [2004-04-01] [2004-04-02] [2004-04-03] [2004-04-04] [2004-04-05] #> [26] [2004-04-06] [2004-04-07] [2004-04-08] [2004-04-09] [2004-04-10] #> [31] [2004-04-11]  stopifnot( ## different formats even:   identical(t1, timeSequence(from = \"2004-03-12\", to = \"11-Apr-2004\")),   identical(t1, ## explicit format and FinCenter :       timeSequence(from = \"2004-03-12\", to = \"2004-04-11\",                    format = \"%Y-%m-%d\", FinCenter = \"GMT\")))  ## observe \"switch to summer time\": timeSequence(from = \"2004-03-26 05:00:00\", to = \"2004-04-02 05:00:00\",              zone = \"Europe/Zurich\", FinCenter = \"Europe/Zurich\") #> Europe/Zurich #> [1] [2004-03-26 05:00:00] [2004-03-27 05:00:00] [2004-03-28 06:00:00] #> [4] [2004-03-29 06:00:00] [2004-03-30 06:00:00] [2004-03-31 06:00:00] #> [7] [2004-04-01 06:00:00]  ## ensure fixed clock time: timeSequence(from = \"2004-03-26 05:00:00\", to = \"2004-04-01 05:00:00\",              by = \"DSTday\", zone = \"Europe/Zurich\", FinCenter = \"Europe/Zurich\") #> Europe/Zurich #> [1] [2004-03-26 05:00:00] [2004-03-27 05:00:00] [2004-03-28 05:00:00] #> [4] [2004-03-29 05:00:00] [2004-03-30 05:00:00] [2004-03-31 05:00:00] #> [7] [2004-04-01 05:00:00]  ## on the day of DST change the time may not exist (notice 2004-03-28 00:00:00): timeSequence(from = \"2004-03-26 01:00:00\", to = \"2004-04-01 01:00:00\",              by = \"DSTday\", zone = \"Europe/Zurich\", FinCenter = \"Europe/Zurich\") #> Europe/Zurich #> [1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 02:00:00] #> [4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00] #> [7] [2004-04-01 01:00:00]"},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-Sys.timeDate.html","id":null,"dir":"Reference","previous_headings":"","what":"System time as 'timeDate' object — Sys.timeDate","title":"System time as 'timeDate' object — Sys.timeDate","text":"Returns system time object class \"timeDate\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-Sys.timeDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"System time as 'timeDate' object — Sys.timeDate","text":"","code":"Sys.timeDate(FinCenter = \"\")"},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-Sys.timeDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"System time as 'timeDate' object — Sys.timeDate","text":"FinCenter character string location financial center named     \"continent/city\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-Sys.timeDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"System time as 'timeDate' object — Sys.timeDate","text":"\"timeDate\" object","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-Sys.timeDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"System time as 'timeDate' object — Sys.timeDate","text":"","code":"if (FALSE) { ## direct    Sys.timeDate()     # Local Time in Zurich    Sys.timeDate(FinCenter = \"Zurich\")    ## transformed from \"POSIX(c)t\" with timeDate()    timeDate(Sys.time())       # Local Time in Zurich    timeDate(Sys.time(), FinCenter = \"Zurich\")   }"},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-finCenter.html","id":null,"dir":"Reference","previous_headings":"","what":"Financial Center of a timeDate object — finCenter","title":"Financial Center of a timeDate object — finCenter","text":"Get set financial center \"timeDate\" object.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-finCenter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Financial Center of a timeDate object — finCenter","text":"","code":"# S4 method for timeDate finCenter(x) # S4 method for timeDate finCenter(x) <- value"},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-finCenter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Financial Center of a timeDate object — finCenter","text":"x timeSeries object. value character location  financial center named      \"continent/city\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-finCenter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Financial Center of a timeDate object — finCenter","text":"\"timeDate\" objects store time GMT time zone.   financial center specifies location whose local time used   format object, e.g., printing. finCenter gives financial center associated   ‘timeDate’ object. assignment form changes   specified value.  functions S4 generics. page describes   methods defined package ‘timeDate’.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-finCenter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Financial Center of a timeDate object — finCenter","text":"","code":"date <- timeDate(\"2008-01-01\") finCenter(date) <- \"GMT\" date #> GMT #> [1] [2008-01-01] format(date) #> [1] \"2008-01-01\"  finCenter(date) <- \"Zurich\" date #> Zurich #> [1] [2008-01-01 01:00:00] format(date) #> [1] \"2008-01-01 01:00:00\""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-listFinCenter.html","id":null,"dir":"Reference","previous_headings":"","what":"List of financial centers — listFinCenter","title":"List of financial centers — listFinCenter","text":"Lists supported financial centers.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-listFinCenter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of financial centers — listFinCenter","text":"","code":"listFinCenter(pattern = \".*\")"},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-listFinCenter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of financial centers — listFinCenter","text":"pattern pattern character string required grep     function. default, \".*\", gives supported financial     centers","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-listFinCenter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List of financial centers — listFinCenter","text":"list returned listFinCenter contain   financial centers supported timeDate. Rather contains   currently supported ‘standard names’ time zones defined   tz (.k.. Zoneinfo) database.  Names supported previous   versions timeDate recognised, even though   list.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-listFinCenter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of financial centers — listFinCenter","text":"character vector listing financial centers whose names match  pattern.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-listFinCenter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of financial centers — listFinCenter","text":"","code":"## myFinCenter - the global setting currently used:    getRmetricsOptions(\"myFinCenter\") #> myFinCenter  #>       \"GMT\"   ## Other Financial Centers:    listFinCenter(\"Asia/\") #>  [1] \"Asia/Almaty\"        \"Asia/Amman\"         \"Asia/Anadyr\"        #>  [4] \"Asia/Aqtau\"         \"Asia/Aqtobe\"        \"Asia/Ashgabat\"      #>  [7] \"Asia/Atyrau\"        \"Asia/Baghdad\"       \"Asia/Baku\"          #> [10] \"Asia/Bangkok\"       \"Asia/Barnaul\"       \"Asia/Beirut\"        #> [13] \"Asia/Bishkek\"       \"Asia/Chita\"         \"Asia/Choibalsan\"    #> [16] \"Asia/Colombo\"       \"Asia/Damascus\"      \"Asia/Dhaka\"         #> [19] \"Asia/Dili\"          \"Asia/Dubai\"         \"Asia/Dushanbe\"      #> [22] \"Asia/Famagusta\"     \"Asia/Gaza\"          \"Asia/Hebron\"        #> [25] \"Asia/Ho_Chi_Minh\"   \"Asia/Hong_Kong\"     \"Asia/Hovd\"          #> [28] \"Asia/Irkutsk\"       \"Asia/Jakarta\"       \"Asia/Jayapura\"      #> [31] \"Asia/Jerusalem\"     \"Asia/Kabul\"         \"Asia/Kamchatka\"     #> [34] \"Asia/Karachi\"       \"Asia/Kathmandu\"     \"Asia/Khandyga\"      #> [37] \"Asia/Kolkata\"       \"Asia/Krasnoyarsk\"   \"Asia/Kuching\"       #> [40] \"Asia/Macau\"         \"Asia/Magadan\"       \"Asia/Makassar\"      #> [43] \"Asia/Manila\"        \"Asia/Nicosia\"       \"Asia/Novokuznetsk\"  #> [46] \"Asia/Novosibirsk\"   \"Asia/Omsk\"          \"Asia/Oral\"          #> [49] \"Asia/Pontianak\"     \"Asia/Pyongyang\"     \"Asia/Qatar\"         #> [52] \"Asia/Qostanay\"      \"Asia/Qyzylorda\"     \"Asia/Riyadh\"        #> [55] \"Asia/Sakhalin\"      \"Asia/Samarkand\"     \"Asia/Seoul\"         #> [58] \"Asia/Shanghai\"      \"Asia/Singapore\"     \"Asia/Srednekolymsk\" #> [61] \"Asia/Taipei\"        \"Asia/Tashkent\"      \"Asia/Tbilisi\"       #> [64] \"Asia/Tehran\"        \"Asia/Thimphu\"       \"Asia/Tokyo\"         #> [67] \"Asia/Tomsk\"         \"Asia/Ulaanbaatar\"   \"Asia/Urumqi\"        #> [70] \"Asia/Ust-Nera\"      \"Asia/Vladivostok\"   \"Asia/Yakutsk\"       #> [73] \"Asia/Yangon\"        \"Asia/Yekaterinburg\" \"Asia/Yerevan\"          listFinCenter(\"^A\")    # all beginning with \"A\" #>   [1] \"Africa/Abidjan\"                 \"Africa/Algiers\"                 #>   [3] \"Africa/Bissau\"                  \"Africa/Cairo\"                   #>   [5] \"Africa/Casablanca\"              \"Africa/Ceuta\"                   #>   [7] \"Africa/El_Aaiun\"                \"Africa/Johannesburg\"            #>   [9] \"Africa/Juba\"                    \"Africa/Khartoum\"                #>  [11] \"Africa/Lagos\"                   \"Africa/Maputo\"                  #>  [13] \"Africa/Monrovia\"                \"Africa/Nairobi\"                 #>  [15] \"Africa/Ndjamena\"                \"Africa/Sao_Tome\"                #>  [17] \"Africa/Tripoli\"                 \"Africa/Tunis\"                   #>  [19] \"Africa/Windhoek\"                \"America/Adak\"                   #>  [21] \"America/Anchorage\"              \"America/Araguaina\"              #>  [23] \"America/Argentina/Buenos_Aires\" \"America/Argentina/Catamarca\"    #>  [25] \"America/Argentina/Cordoba\"      \"America/Argentina/Jujuy\"        #>  [27] \"America/Argentina/La_Rioja\"     \"America/Argentina/Mendoza\"      #>  [29] \"America/Argentina/Rio_Gallegos\" \"America/Argentina/Salta\"        #>  [31] \"America/Argentina/San_Juan\"     \"America/Argentina/San_Luis\"     #>  [33] \"America/Argentina/Tucuman\"      \"America/Argentina/Ushuaia\"      #>  [35] \"America/Asuncion\"               \"America/Bahia\"                  #>  [37] \"America/Bahia_Banderas\"         \"America/Barbados\"               #>  [39] \"America/Belem\"                  \"America/Belize\"                 #>  [41] \"America/Boa_Vista\"              \"America/Bogota\"                 #>  [43] \"America/Boise\"                  \"America/Cambridge_Bay\"          #>  [45] \"America/Campo_Grande\"           \"America/Cancun\"                 #>  [47] \"America/Caracas\"                \"America/Cayenne\"                #>  [49] \"America/Chicago\"                \"America/Chihuahua\"              #>  [51] \"America/Costa_Rica\"             \"America/Cuiaba\"                 #>  [53] \"America/Danmarkshavn\"           \"America/Dawson\"                 #>  [55] \"America/Dawson_Creek\"           \"America/Denver\"                 #>  [57] \"America/Detroit\"                \"America/Edmonton\"               #>  [59] \"America/Eirunepe\"               \"America/El_Salvador\"            #>  [61] \"America/Fort_Nelson\"            \"America/Fortaleza\"              #>  [63] \"America/Glace_Bay\"              \"America/Goose_Bay\"              #>  [65] \"America/Grand_Turk\"             \"America/Guatemala\"              #>  [67] \"America/Guayaquil\"              \"America/Guyana\"                 #>  [69] \"America/Halifax\"                \"America/Havana\"                 #>  [71] \"America/Hermosillo\"             \"America/Indiana/Indianapolis\"   #>  [73] \"America/Indiana/Knox\"           \"America/Indiana/Marengo\"        #>  [75] \"America/Indiana/Petersburg\"     \"America/Indiana/Tell_City\"      #>  [77] \"America/Indiana/Vevay\"          \"America/Indiana/Vincennes\"      #>  [79] \"America/Indiana/Winamac\"        \"America/Inuvik\"                 #>  [81] \"America/Iqaluit\"                \"America/Jamaica\"                #>  [83] \"America/Juneau\"                 \"America/Kentucky/Louisville\"    #>  [85] \"America/Kentucky/Monticello\"    \"America/La_Paz\"                 #>  [87] \"America/Lima\"                   \"America/Los_Angeles\"            #>  [89] \"America/Maceio\"                 \"America/Managua\"                #>  [91] \"America/Manaus\"                 \"America/Martinique\"             #>  [93] \"America/Matamoros\"              \"America/Mazatlan\"               #>  [95] \"America/Menominee\"              \"America/Merida\"                 #>  [97] \"America/Metlakatla\"             \"America/Mexico_City\"            #>  [99] \"America/Miquelon\"               \"America/Moncton\"                #> [101] \"America/Monterrey\"              \"America/Montevideo\"             #> [103] \"America/New_York\"               \"America/Nome\"                   #> [105] \"America/Noronha\"                \"America/North_Dakota/Beulah\"    #> [107] \"America/North_Dakota/Center\"    \"America/North_Dakota/New_Salem\" #> [109] \"America/Nuuk\"                   \"America/Ojinaga\"                #> [111] \"America/Panama\"                 \"America/Paramaribo\"             #> [113] \"America/Phoenix\"                \"America/Port-au-Prince\"         #> [115] \"America/Porto_Velho\"            \"America/Puerto_Rico\"            #> [117] \"America/Punta_Arenas\"           \"America/Rankin_Inlet\"           #> [119] \"America/Recife\"                 \"America/Regina\"                 #> [121] \"America/Resolute\"               \"America/Rio_Branco\"             #> [123] \"America/Santarem\"               \"America/Santiago\"               #> [125] \"America/Santo_Domingo\"          \"America/Sao_Paulo\"              #> [127] \"America/Scoresbysund\"           \"America/Sitka\"                  #> [129] \"America/St_Johns\"               \"America/Swift_Current\"          #> [131] \"America/Tegucigalpa\"            \"America/Thule\"                  #> [133] \"America/Tijuana\"                \"America/Toronto\"                #> [135] \"America/Vancouver\"              \"America/Whitehorse\"             #> [137] \"America/Winnipeg\"               \"America/Yakutat\"                #> [139] \"America/Yellowknife\"            \"Antarctica/Casey\"               #> [141] \"Antarctica/Davis\"               \"Antarctica/Macquarie\"           #> [143] \"Antarctica/Mawson\"              \"Antarctica/Palmer\"              #> [145] \"Antarctica/Rothera\"             \"Antarctica/Troll\"               #> [147] \"Asia/Almaty\"                    \"Asia/Amman\"                     #> [149] \"Asia/Anadyr\"                    \"Asia/Aqtau\"                     #> [151] \"Asia/Aqtobe\"                    \"Asia/Ashgabat\"                  #> [153] \"Asia/Atyrau\"                    \"Asia/Baghdad\"                   #> [155] \"Asia/Baku\"                      \"Asia/Bangkok\"                   #> [157] \"Asia/Barnaul\"                   \"Asia/Beirut\"                    #> [159] \"Asia/Bishkek\"                   \"Asia/Chita\"                     #> [161] \"Asia/Choibalsan\"                \"Asia/Colombo\"                   #> [163] \"Asia/Damascus\"                  \"Asia/Dhaka\"                     #> [165] \"Asia/Dili\"                      \"Asia/Dubai\"                     #> [167] \"Asia/Dushanbe\"                  \"Asia/Famagusta\"                 #> [169] \"Asia/Gaza\"                      \"Asia/Hebron\"                    #> [171] \"Asia/Ho_Chi_Minh\"               \"Asia/Hong_Kong\"                 #> [173] \"Asia/Hovd\"                      \"Asia/Irkutsk\"                   #> [175] \"Asia/Jakarta\"                   \"Asia/Jayapura\"                  #> [177] \"Asia/Jerusalem\"                 \"Asia/Kabul\"                     #> [179] \"Asia/Kamchatka\"                 \"Asia/Karachi\"                   #> [181] \"Asia/Kathmandu\"                 \"Asia/Khandyga\"                  #> [183] \"Asia/Kolkata\"                   \"Asia/Krasnoyarsk\"               #> [185] \"Asia/Kuching\"                   \"Asia/Macau\"                     #> [187] \"Asia/Magadan\"                   \"Asia/Makassar\"                  #> [189] \"Asia/Manila\"                    \"Asia/Nicosia\"                   #> [191] \"Asia/Novokuznetsk\"              \"Asia/Novosibirsk\"               #> [193] \"Asia/Omsk\"                      \"Asia/Oral\"                      #> [195] \"Asia/Pontianak\"                 \"Asia/Pyongyang\"                 #> [197] \"Asia/Qatar\"                     \"Asia/Qostanay\"                  #> [199] \"Asia/Qyzylorda\"                 \"Asia/Riyadh\"                    #> [201] \"Asia/Sakhalin\"                  \"Asia/Samarkand\"                 #> [203] \"Asia/Seoul\"                     \"Asia/Shanghai\"                  #> [205] \"Asia/Singapore\"                 \"Asia/Srednekolymsk\"             #> [207] \"Asia/Taipei\"                    \"Asia/Tashkent\"                  #> [209] \"Asia/Tbilisi\"                   \"Asia/Tehran\"                    #> [211] \"Asia/Thimphu\"                   \"Asia/Tokyo\"                     #> [213] \"Asia/Tomsk\"                     \"Asia/Ulaanbaatar\"               #> [215] \"Asia/Urumqi\"                    \"Asia/Ust-Nera\"                  #> [217] \"Asia/Vladivostok\"               \"Asia/Yakutsk\"                   #> [219] \"Asia/Yangon\"                    \"Asia/Yekaterinburg\"             #> [221] \"Asia/Yerevan\"                   \"Atlantic/Azores\"                #> [223] \"Atlantic/Bermuda\"               \"Atlantic/Canary\"                #> [225] \"Atlantic/Cape_Verde\"            \"Atlantic/Faroe\"                 #> [227] \"Atlantic/Madeira\"               \"Atlantic/South_Georgia\"         #> [229] \"Atlantic/Stanley\"               \"Australia/Adelaide\"             #> [231] \"Australia/Brisbane\"             \"Australia/Broken_Hill\"          #> [233] \"Australia/Darwin\"               \"Australia/Eucla\"                #> [235] \"Australia/Hobart\"               \"Australia/Lindeman\"             #> [237] \"Australia/Lord_Howe\"            \"Australia/Melbourne\"            #> [239] \"Australia/Perth\"                \"Australia/Sydney\"                  listFinCenter(\"^[^A]\") # all *not* beginning with \"A\" #>  [1] \"Europe/Andorra\"        \"Europe/Astrakhan\"      \"Europe/Athens\"         #>  [4] \"Europe/Belgrade\"       \"Europe/Berlin\"         \"Europe/Brussels\"       #>  [7] \"Europe/Bucharest\"      \"Europe/Budapest\"       \"Europe/Chisinau\"       #> [10] \"Europe/Dublin\"         \"Europe/Gibraltar\"      \"Europe/Helsinki\"       #> [13] \"Europe/Istanbul\"       \"Europe/Kaliningrad\"    \"Europe/Kirov\"          #> [16] \"Europe/Kyiv\"           \"Europe/Lisbon\"         \"Europe/London\"         #> [19] \"Europe/Madrid\"         \"Europe/Malta\"          \"Europe/Minsk\"          #> [22] \"Europe/Moscow\"         \"Europe/Paris\"          \"Europe/Prague\"         #> [25] \"Europe/Riga\"           \"Europe/Rome\"           \"Europe/Samara\"         #> [28] \"Europe/Saratov\"        \"Europe/Simferopol\"     \"Europe/Sofia\"          #> [31] \"Europe/Tallinn\"        \"Europe/Tirane\"         \"Europe/Ulyanovsk\"      #> [34] \"Europe/Vienna\"         \"Europe/Vilnius\"        \"Europe/Volgograd\"      #> [37] \"Europe/Warsaw\"         \"Europe/Zurich\"         \"Indian/Chagos\"         #> [40] \"Indian/Maldives\"       \"Indian/Mauritius\"      \"Pacific/Apia\"          #> [43] \"Pacific/Auckland\"      \"Pacific/Bougainville\"  \"Pacific/Chatham\"       #> [46] \"Pacific/Easter_Island\" \"Pacific/Efate\"         \"Pacific/Fakaofo\"       #> [49] \"Pacific/Fiji\"          \"Pacific/Galapagos\"     \"Pacific/Gambier\"       #> [52] \"Pacific/Guadalcanal\"   \"Pacific/Guam\"          \"Pacific/Honolulu\"      #> [55] \"Pacific/Kanton\"        \"Pacific/Kiritimati\"    \"Pacific/Kosrae\"        #> [58] \"Pacific/Kwajalein\"     \"Pacific/Marquesas\"     \"Pacific/Nauru\"         #> [61] \"Pacific/Niue\"          \"Pacific/Norfolk\"       \"Pacific/Noumea\"        #> [64] \"Pacific/Pago_Pago\"     \"Pacific/Palau\"         \"Pacific/Pitcairn\"      #> [67] \"Pacific/Port_Moresby\"  \"Pacific/Rarotonga\"     \"Pacific/Tahiti\"        #> [70] \"Pacific/Tarawa\"        \"Pacific/Tongatapu\"        listFinCenter(\".*/L\")  # cities with L* #>  [1] \"Africa/Lagos\"                \"America/Argentina/La_Rioja\"  #>  [3] \"America/Kentucky/Louisville\" \"America/La_Paz\"              #>  [5] \"America/Lima\"                \"America/Los_Angeles\"         #>  [7] \"Australia/Lindeman\"          \"Australia/Lord_Howe\"         #>  [9] \"Europe/Lisbon\"               \"Europe/London\"                   stopifnot(identical(sort(listFinCenter()), ## 'A' and 'not A' == everything:         sort(union(listFinCenter(\"^A\"),             listFinCenter(\"^[^A]\")))))"},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-midnightStandard.html","id":null,"dir":"Reference","previous_headings":"","what":"Midnight standard — midnightStandard","title":"Midnight standard — midnightStandard","text":"Corrects \"timeDate\" objects fulfill ISO8601   midnight standard. midnightStandard2() relies strptime wherever   possible, simply returns   .POSIXct(strptime(charvec, format, tz = \"GMT\")).","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-midnightStandard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Midnight standard — midnightStandard","text":"","code":"midnightStandard (charvec, format) midnightStandard2(charvec, format)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-midnightStandard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Midnight standard — midnightStandard","text":"charvec character string vector dates times. format string, format specification input character vector.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-midnightStandard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Midnight standard — midnightStandard","text":"midnightStandard returns character  midnightStandard2 POSIXct object.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-midnightStandard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Midnight standard — midnightStandard","text":"","code":"ch <- \"2007-12-31 24:00\"    midnightStandard(ch) #> [1] \"2008-01-01 00:00:00\"    (ms2 <- midnightStandard2(ch)) #> [1] \"2008-01-01 GMT\"    class(ms2) #> [1] \"POSIXct\" \"POSIXt\""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-rulesFinCenter.html","id":null,"dir":"Reference","previous_headings":"","what":"Financial centers DST rules — rulesFinCenter","title":"Financial centers DST rules — rulesFinCenter","text":"Returns DST rules financial center.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-rulesFinCenter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Financial centers DST rules — rulesFinCenter","text":"","code":"rulesFinCenter(FinCenter = \"\")"},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-rulesFinCenter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Financial centers DST rules — rulesFinCenter","text":"FinCenter character string location financial center named     \"continent/city\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-rulesFinCenter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Financial centers DST rules — rulesFinCenter","text":"list time zones DST rules available database","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-rulesFinCenter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Financial centers DST rules — rulesFinCenter","text":"function rulesFinCenter lists daylight saving rules   selected financial center. dependency POSIX implementation operating   system timeDate comes database containing   necessary time zone day light saving time information.","code":""},{"path":[]},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-rulesFinCenter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Financial centers DST rules — rulesFinCenter","text":"","code":"## rulesFinCenter -     rulesFinCenter(\"Zurich\") #>                  Zurich offSet isdst TimeZone     numeric #> 1   1853-07-15 23:25:52   1786     0      BMT -3675198848 #> 2   1894-05-31 23:30:14   3600     0      CET -2385246586 #> 3   1941-05-05 00:00:00   7200     1     CEST  -904435200 #> 4   1941-10-06 00:00:00   3600     0      CET  -891129600 #> 5   1942-05-04 00:00:00   7200     1     CEST  -872985600 #> 6   1942-10-05 00:00:00   3600     0      CET  -859680000 #> 7   1981-03-29 01:00:00   7200     1     CEST   354675600 #> 8   1981-09-27 01:00:00   3600     0      CET   370400400 #> 9   1982-03-28 01:00:00   7200     1     CEST   386125200 #> 10  1982-09-26 01:00:00   3600     0      CET   401850000 #> 11  1983-03-27 01:00:00   7200     1     CEST   417574800 #> 12  1983-09-25 01:00:00   3600     0      CET   433299600 #> 13  1984-03-25 01:00:00   7200     1     CEST   449024400 #> 14  1984-09-30 01:00:00   3600     0      CET   465354000 #> 15  1985-03-31 01:00:00   7200     1     CEST   481078800 #> 16  1985-09-29 01:00:00   3600     0      CET   496803600 #> 17  1986-03-30 01:00:00   7200     1     CEST   512528400 #> 18  1986-09-28 01:00:00   3600     0      CET   528253200 #> 19  1987-03-29 01:00:00   7200     1     CEST   543978000 #> 20  1987-09-27 01:00:00   3600     0      CET   559702800 #> 21  1988-03-27 01:00:00   7200     1     CEST   575427600 #> 22  1988-09-25 01:00:00   3600     0      CET   591152400 #> 23  1989-03-26 01:00:00   7200     1     CEST   606877200 #> 24  1989-09-24 01:00:00   3600     0      CET   622602000 #> 25  1990-03-25 01:00:00   7200     1     CEST   638326800 #> 26  1990-09-30 01:00:00   3600     0      CET   654656400 #> 27  1991-03-31 01:00:00   7200     1     CEST   670381200 #> 28  1991-09-29 01:00:00   3600     0      CET   686106000 #> 29  1992-03-29 01:00:00   7200     1     CEST   701830800 #> 30  1992-09-27 01:00:00   3600     0      CET   717555600 #> 31  1993-03-28 01:00:00   7200     1     CEST   733280400 #> 32  1993-09-26 01:00:00   3600     0      CET   749005200 #> 33  1994-03-27 01:00:00   7200     1     CEST   764730000 #> 34  1994-09-25 01:00:00   3600     0      CET   780454800 #> 35  1995-03-26 01:00:00   7200     1     CEST   796179600 #> 36  1995-09-24 01:00:00   3600     0      CET   811904400 #> 37  1996-03-31 01:00:00   7200     1     CEST   828234000 #> 38  1996-10-27 01:00:00   3600     0      CET   846378000 #> 39  1997-03-30 01:00:00   7200     1     CEST   859683600 #> 40  1997-10-26 01:00:00   3600     0      CET   877827600 #> 41  1998-03-29 01:00:00   7200     1     CEST   891133200 #> 42  1998-10-25 01:00:00   3600     0      CET   909277200 #> 43  1999-03-28 01:00:00   7200     1     CEST   922582800 #> 44  1999-10-31 01:00:00   3600     0      CET   941331600 #> 45  2000-03-26 01:00:00   7200     1     CEST   954032400 #> 46  2000-10-29 01:00:00   3600     0      CET   972781200 #> 47  2001-03-25 01:00:00   7200     1     CEST   985482000 #> 48  2001-10-28 01:00:00   3600     0      CET  1004230800 #> 49  2002-03-31 01:00:00   7200     1     CEST  1017536400 #> 50  2002-10-27 01:00:00   3600     0      CET  1035680400 #> 51  2003-03-30 01:00:00   7200     1     CEST  1048986000 #> 52  2003-10-26 01:00:00   3600     0      CET  1067130000 #> 53  2004-03-28 01:00:00   7200     1     CEST  1080435600 #> 54  2004-10-31 01:00:00   3600     0      CET  1099184400 #> 55  2005-03-27 01:00:00   7200     1     CEST  1111885200 #> 56  2005-10-30 01:00:00   3600     0      CET  1130634000 #> 57  2006-03-26 01:00:00   7200     1     CEST  1143334800 #> 58  2006-10-29 01:00:00   3600     0      CET  1162083600 #> 59  2007-03-25 01:00:00   7200     1     CEST  1174784400 #> 60  2007-10-28 01:00:00   3600     0      CET  1193533200 #> 61  2008-03-30 01:00:00   7200     1     CEST  1206838800 #> 62  2008-10-26 01:00:00   3600     0      CET  1224982800 #> 63  2009-03-29 01:00:00   7200     1     CEST  1238288400 #> 64  2009-10-25 01:00:00   3600     0      CET  1256432400 #> 65  2010-03-28 01:00:00   7200     1     CEST  1269738000 #> 66  2010-10-31 01:00:00   3600     0      CET  1288486800 #> 67  2011-03-27 01:00:00   7200     1     CEST  1301187600 #> 68  2011-10-30 01:00:00   3600     0      CET  1319936400 #> 69  2012-03-25 01:00:00   7200     1     CEST  1332637200 #> 70  2012-10-28 01:00:00   3600     0      CET  1351386000 #> 71  2013-03-31 01:00:00   7200     1     CEST  1364691600 #> 72  2013-10-27 01:00:00   3600     0      CET  1382835600 #> 73  2014-03-30 01:00:00   7200     1     CEST  1396141200 #> 74  2014-10-26 01:00:00   3600     0      CET  1414285200 #> 75  2015-03-29 01:00:00   7200     1     CEST  1427590800 #> 76  2015-10-25 01:00:00   3600     0      CET  1445734800 #> 77  2016-03-27 01:00:00   7200     1     CEST  1459040400 #> 78  2016-10-30 01:00:00   3600     0      CET  1477789200 #> 79  2017-03-26 01:00:00   7200     1     CEST  1490490000 #> 80  2017-10-29 01:00:00   3600     0      CET  1509238800 #> 81  2018-03-25 01:00:00   7200     1     CEST  1521939600 #> 82  2018-10-28 01:00:00   3600     0      CET  1540688400 #> 83  2019-03-31 01:00:00   7200     1     CEST  1553994000 #> 84  2019-10-27 01:00:00   3600     0      CET  1572138000 #> 85  2020-03-29 01:00:00   7200     1     CEST  1585443600 #> 86  2020-10-25 01:00:00   3600     0      CET  1603587600 #> 87  2021-03-28 01:00:00   7200     1     CEST  1616893200 #> 88  2021-10-31 01:00:00   3600     0      CET  1635642000 #> 89  2022-03-27 01:00:00   7200     1     CEST  1648342800 #> 90  2022-10-30 01:00:00   3600     0      CET  1667091600 #> 91  2023-03-26 01:00:00   7200     1     CEST  1679792400 #> 92  2023-10-29 01:00:00   3600     0      CET  1698541200 #> 93  2024-03-31 01:00:00   7200     1     CEST  1711846800 #> 94  2024-10-27 01:00:00   3600     0      CET  1729990800 #> 95  2025-03-30 01:00:00   7200     1     CEST  1743296400 #> 96  2025-10-26 01:00:00   3600     0      CET  1761440400 #> 97  2026-03-29 01:00:00   7200     1     CEST  1774746000 #> 98  2026-10-25 01:00:00   3600     0      CET  1792890000 #> 99  2027-03-28 01:00:00   7200     1     CEST  1806195600 #> 100 2027-10-31 01:00:00   3600     0      CET  1824944400 #> 101 2028-03-26 01:00:00   7200     1     CEST  1837645200 #> 102 2028-10-29 01:00:00   3600     0      CET  1856394000 #> 103 2029-03-25 01:00:00   7200     1     CEST  1869094800 #> 104 2029-10-28 01:00:00   3600     0      CET  1887843600 #> 105 2030-03-31 01:00:00   7200     1     CEST  1901149200 #> 106 2030-10-27 01:00:00   3600     0      CET  1919293200 #> 107 2031-03-30 01:00:00   7200     1     CEST  1932598800 #> 108 2031-10-26 01:00:00   3600     0      CET  1950742800 #> 109 2032-03-28 01:00:00   7200     1     CEST  1964048400 #> 110 2032-10-31 01:00:00   3600     0      CET  1982797200 #> 111 2033-03-27 01:00:00   7200     1     CEST  1995498000 #> 112 2033-10-30 01:00:00   3600     0      CET  2014246800 #> 113 2034-03-26 01:00:00   7200     1     CEST  2026947600 #> 114 2034-10-29 01:00:00   3600     0      CET  2045696400 #> 115 2035-03-25 01:00:00   7200     1     CEST  2058397200 #> 116 2035-10-28 01:00:00   3600     0      CET  2077146000 #> 117 2036-03-30 01:00:00   7200     1     CEST  2090451600 #> 118 2036-10-26 01:00:00   3600     0      CET  2108595600 #> 119 2037-03-29 01:00:00   7200     1     CEST  2121901200 #> 120 2037-10-25 01:00:00   3600     0      CET  2140045200 #> 121 2038-03-28 01:00:00   7200     1     CEST  2153350800 #> 122 2038-10-31 01:00:00   3600     0      CET  2172099600 #> 123 2039-03-27 01:00:00   7200     1     CEST  2184800400 #> 124 2039-10-30 01:00:00   3600     0      CET  2203549200 #> 125 2040-03-25 01:00:00   7200     1     CEST  2216250000 #> 126 2040-10-28 01:00:00   3600     0      CET  2234998800 #> 127 2041-03-31 01:00:00   7200     1     CEST  2248304400 #> 128 2041-10-27 01:00:00   3600     0      CET  2266448400 #> 129 2042-03-30 01:00:00   7200     1     CEST  2279754000 #> 130 2042-10-26 01:00:00   3600     0      CET  2297898000 #> 131 2043-03-29 01:00:00   7200     1     CEST  2311203600 #> 132 2043-10-25 01:00:00   3600     0      CET  2329347600 #> 133 2044-03-27 01:00:00   7200     1     CEST  2342653200 #> 134 2044-10-30 01:00:00   3600     0      CET  2361402000 #> 135 2045-03-26 01:00:00   7200     1     CEST  2374102800 #> 136 2045-10-29 01:00:00   3600     0      CET  2392851600 #> 137 2046-03-25 01:00:00   7200     1     CEST  2405552400 #> 138 2046-10-28 01:00:00   3600     0      CET  2424301200 #> 139 2047-03-31 01:00:00   7200     1     CEST  2437606800 #> 140 2047-10-27 01:00:00   3600     0      CET  2455750800 #> 141 2048-03-29 01:00:00   7200     1     CEST  2469056400 #> 142 2048-10-25 01:00:00   3600     0      CET  2487200400 #> 143 2049-03-28 01:00:00   7200     1     CEST  2500506000 #> 144 2049-10-31 01:00:00   3600     0      CET  2519254800 #> 145 2050-03-27 01:00:00   7200     1     CEST  2531955600 #> 146 2050-10-30 01:00:00   3600     0      CET  2550704400 #> 147 2051-03-26 01:00:00   7200     1     CEST  2563405200 #> 148 2051-10-29 01:00:00   3600     0      CET  2582154000 #> 149 2052-03-31 01:00:00   7200     1     CEST  2595459600 #> 150 2052-10-27 01:00:00   3600     0      CET  2613603600 #> 151 2053-03-30 01:00:00   7200     1     CEST  2626909200 #> 152 2053-10-26 01:00:00   3600     0      CET  2645053200 #> 153 2054-03-29 01:00:00   7200     1     CEST  2658358800 #> 154 2054-10-25 01:00:00   3600     0      CET  2676502800 #> 155 2055-03-28 01:00:00   7200     1     CEST  2689808400 #> 156 2055-10-31 01:00:00   3600     0      CET  2708557200 #> 157 2056-03-26 01:00:00   7200     1     CEST  2721258000 #> 158 2056-10-29 01:00:00   3600     0      CET  2740006800 #> 159 2057-03-25 01:00:00   7200     1     CEST  2752707600 #> 160 2057-10-28 01:00:00   3600     0      CET  2771456400 #> 161 2058-03-31 01:00:00   7200     1     CEST  2784762000 #> 162 2058-10-27 01:00:00   3600     0      CET  2802906000 #> 163 2059-03-30 01:00:00   7200     1     CEST  2816211600 #> 164 2059-10-26 01:00:00   3600     0      CET  2834355600 #> 165 2060-03-28 01:00:00   7200     1     CEST  2847661200 #> 166 2060-10-31 01:00:00   3600     0      CET  2866410000 #> 167 2061-03-27 01:00:00   7200     1     CEST  2879110800 #> 168 2061-10-30 01:00:00   3600     0      CET  2897859600 #> 169 2062-03-26 01:00:00   7200     1     CEST  2910560400 #> 170 2062-10-29 01:00:00   3600     0      CET  2929309200 #> 171 2063-03-25 01:00:00   7200     1     CEST  2942010000 #> 172 2063-10-28 01:00:00   3600     0      CET  2960758800 #> 173 2064-03-30 01:00:00   7200     1     CEST  2974064400 #> 174 2064-10-26 01:00:00   3600     0      CET  2992208400 #> 175 2065-03-29 01:00:00   7200     1     CEST  3005514000 #> 176 2065-10-25 01:00:00   3600     0      CET  3023658000 #> 177 2066-03-28 01:00:00   7200     1     CEST  3036963600 #> 178 2066-10-31 01:00:00   3600     0      CET  3055712400 #> 179 2067-03-27 01:00:00   7200     1     CEST  3068413200 #> 180 2067-10-30 01:00:00   3600     0      CET  3087162000 #> 181 2068-03-25 01:00:00   7200     1     CEST  3099862800 #> 182 2068-10-28 01:00:00   3600     0      CET  3118611600 #> 183 2069-03-31 01:00:00   7200     1     CEST  3131917200 #> 184 2069-10-27 01:00:00   3600     0      CET  3150061200 #> 185 2070-03-30 01:00:00   7200     1     CEST  3163366800 #> 186 2070-10-26 01:00:00   3600     0      CET  3181510800 #> 187 2071-03-29 01:00:00   7200     1     CEST  3194816400 #> 188 2071-10-25 01:00:00   3600     0      CET  3212960400 #> 189 2072-03-27 01:00:00   7200     1     CEST  3226266000 #> 190 2072-10-30 01:00:00   3600     0      CET  3245014800 #> 191 2073-03-26 01:00:00   7200     1     CEST  3257715600 #> 192 2073-10-29 01:00:00   3600     0      CET  3276464400 #> 193 2074-03-25 01:00:00   7200     1     CEST  3289165200 #> 194 2074-10-28 01:00:00   3600     0      CET  3307914000 #> 195 2075-03-31 01:00:00   7200     1     CEST  3321219600 #> 196 2075-10-27 01:00:00   3600     0      CET  3339363600 #> 197 2076-03-29 01:00:00   7200     1     CEST  3352669200 #> 198 2076-10-25 01:00:00   3600     0      CET  3370813200 #> 199 2077-03-28 01:00:00   7200     1     CEST  3384118800 #> 200 2077-10-31 01:00:00   3600     0      CET  3402867600 #> 201 2078-03-27 01:00:00   7200     1     CEST  3415568400 #> 202 2078-10-30 01:00:00   3600     0      CET  3434317200 #> 203 2079-03-26 01:00:00   7200     1     CEST  3447018000 #> 204 2079-10-29 01:00:00   3600     0      CET  3465766800 #> 205 2080-03-31 01:00:00   7200     1     CEST  3479072400 #> 206 2080-10-27 01:00:00   3600     0      CET  3497216400 #> 207 2081-03-30 01:00:00   7200     1     CEST  3510522000 #> 208 2081-10-26 01:00:00   3600     0      CET  3528666000 #> 209 2082-03-29 01:00:00   7200     1     CEST  3541971600 #> 210 2082-10-25 01:00:00   3600     0      CET  3560115600 #> 211 2083-03-28 01:00:00   7200     1     CEST  3573421200 #> 212 2083-10-31 01:00:00   3600     0      CET  3592170000 #> 213 2084-03-26 01:00:00   7200     1     CEST  3604870800 #> 214 2084-10-29 01:00:00   3600     0      CET  3623619600 #> 215 2085-03-25 01:00:00   7200     1     CEST  3636320400 #> 216 2085-10-28 01:00:00   3600     0      CET  3655069200 #> 217 2086-03-31 01:00:00   7200     1     CEST  3668374800 #> 218 2086-10-27 01:00:00   3600     0      CET  3686518800 #> 219 2087-03-30 01:00:00   7200     1     CEST  3699824400 #> 220 2087-10-26 01:00:00   3600     0      CET  3717968400 #> 221 2088-03-28 01:00:00   7200     1     CEST  3731274000 #> 222 2088-10-31 01:00:00   3600     0      CET  3750022800 #> 223 2089-03-27 01:00:00   7200     1     CEST  3762723600 #> 224 2089-10-30 01:00:00   3600     0      CET  3781472400 #> 225 2090-03-26 01:00:00   7200     1     CEST  3794173200 #> 226 2090-10-29 01:00:00   3600     0      CET  3812922000 #> 227 2091-03-25 01:00:00   7200     1     CEST  3825622800 #> 228 2091-10-28 01:00:00   3600     0      CET  3844371600 #> 229 2092-03-30 01:00:00   7200     1     CEST  3857677200 #> 230 2092-10-26 01:00:00   3600     0      CET  3875821200 #> 231 2093-03-29 01:00:00   7200     1     CEST  3889126800 #> 232 2093-10-25 01:00:00   3600     0      CET  3907270800 #> 233 2094-03-28 01:00:00   7200     1     CEST  3920576400 #> 234 2094-10-31 01:00:00   3600     0      CET  3939325200 #> 235 2095-03-27 01:00:00   7200     1     CEST  3952026000 #> 236 2095-10-30 01:00:00   3600     0      CET  3970774800 #> 237 2096-03-25 01:00:00   7200     1     CEST  3983475600 #> 238 2096-10-28 01:00:00   3600     0      CET  4002224400 #> 239 2097-03-31 01:00:00   7200     1     CEST  4015530000 #> 240 2097-10-27 01:00:00   3600     0      CET  4033674000 #> 241 2098-03-30 01:00:00   7200     1     CEST  4046979600 #> 242 2098-10-26 01:00:00   3600     0      CET  4065123600 #> 243 2099-03-29 01:00:00   7200     1     CEST  4078429200 #> 244 2099-10-25 01:00:00   3600     0      CET  4096573200"},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-whichFormat.html","id":null,"dir":"Reference","previous_headings":"","what":"Format recognation — whichFormat","title":"Format recognation — whichFormat","text":"Tries recognize date/time format.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-whichFormat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format recognation — whichFormat","text":"","code":"whichFormat(charvec, silent = FALSE)"},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-whichFormat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format recognation — whichFormat","text":"charvec character string vector dates times. silent logical flag. warning printed format     recognized?","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-whichFormat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format recognation — whichFormat","text":"format string","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate-whichFormat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format recognation — whichFormat","text":"","code":"## midnightStandard -      whichFormat(\"2007-12-31 24:00\") #> [1] \"%Y-%m-%d %H:%M\""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create 'timeDate' objects from scratch — timeDate","title":"Create 'timeDate' objects from scratch — timeDate","text":"Create \"timeDate\" object scratch character     vector suitable objects.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create 'timeDate' objects from scratch — timeDate","text":"","code":"timeDate(charvec, format = NULL, zone = \"\", FinCenter = \"\", ...)  # S4 method for character timeDate(charvec, format = NULL, zone = \"\", FinCenter = \"\",           dst_gap = \"+\")  strptimeDate(x, format = whichFormat(x), tz = \"\")"},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create 'timeDate' objects from scratch — timeDate","text":"charvec character string vector dates times. format format specification input character vector. tz character location financial center      named \"continent/city\", short \"city\". zone time zone financial center data recorded. x character string vector dates times. FinCenter character location financial center named     \"continent/city\".  dst_gap character string specifying non-existent times     falling DST gap: add hour (\"+\"), subtract hour     (\"-\"), set NA (\"NA\"), ignore     (\"\"). ‘ignore’ option used code     check kind faulty times skipped result     equivalent \"+\" \"-\" one     defined. useful certain     times DST gaps care dealt .  ... arguments methods.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create 'timeDate' objects from scratch — timeDate","text":"timeDate creates objects class \"timeDate\"   character vectors, objects several date/time classes,   suitable objects.. S4 generic function page   describes methods defined package timeDate, see section   ‘Methods’. Note zone time zone input,   FinCenter ‘current’ time zone, typically   necessarilly code run. change one   time zones existing \"timeDate\" object, call   timeDate() , see method charvec = \"timeDate\"   section ‘Methods’. strptimeDate wrapper timeDate, suitable   zone FinCenter ,   arguments strptime. format missing   tries deduce . tz missing sets value   Rmetrics option \"myFinCenter\".","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create 'timeDate' objects from scratch — timeDate","text":"object class \"timeDate\"","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Create 'timeDate' objects from scratch — timeDate","text":"following methods timeDate defined package   timeDate.  signature(charvec = \"\") Converts charvec character calls       timeDate result. signature(charvec = \"character\") ... signature(charvec = \"Date\") ... signature(charvec = \"missing\") Returns current time \"timeDate\" object. signature(charvec = \"numeric\") ... signature(charvec = \"POSIXt\") ... signature(charvec = \"timeDate\") Changes time zone /financial center charvec       requested ones. zone missing equal       empty string, just changes financial center.","code":""},{"path":"https://geobosh.github.io/timeDateDoc/reference/timeDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create 'timeDate' objects from scratch — timeDate","text":"","code":"## timeDate -     # Character Vector Strings:    dts = c(\"1989-09-28\", \"2001-01-15\", \"2004-08-30\", \"1990-02-09\")    tms = c(  \"23:12:55\",   \"10:34:02\",   \"08:30:00\",   \"11:18:23\")     dts; tms #> [1] \"1989-09-28\" \"2001-01-15\" \"2004-08-30\" \"1990-02-09\" #> [1] \"23:12:55\" \"10:34:02\" \"08:30:00\" \"11:18:23\"     t1 <- timeDate(dts, format = \"%Y-%m-%d\", FinCenter = \"GMT\" )    t1 #> GMT #> [1] [1989-09-28] [2001-01-15] [2004-08-30] [1990-02-09]        stopifnot(identical(t1, timeDate(dts, FinC = \"GMT\"))) # auto-format        timeDate(dts, format = \"%Y-%m-%d\", FinCenter = \"Europe/Zurich\") #> Europe/Zurich #> [1] [1989-09-28 01:00:00] [2001-01-15 01:00:00] [2004-08-30 02:00:00] #> [4] [1990-02-09 01:00:00]        timeDate(paste(dts, tms), format = \"%Y-%m-%d %H:%M:%S\",         zone = \"GMT\", FinCenter = \"GMT\") #> GMT #> [1] [1989-09-28 23:12:55] [2001-01-15 10:34:02] [2004-08-30 08:30:00] #> [4] [1990-02-09 11:18:23]        timeDate(paste(dts, tms),          zone = \"Europe/Zurich\", FinCenter = \"Europe/Zurich\") #> Europe/Zurich #> [1] [1989-09-28 23:12:55] [2001-01-15 10:34:02] [2004-08-30 08:30:00] #> [4] [1990-02-09 11:18:23]        timeDate(paste(dts, tms), format = \"%Y-%m-%d %H:%M:%S\",         zone = \"GMT\", FinCenter = \"Europe/Zurich\") #> Europe/Zurich #> [1] [1989-09-29 00:12:55] [2001-01-15 11:34:02] [2004-08-30 10:30:00] #> [4] [1990-02-09 12:18:23]     ## Non Standard Format:    timeDate(paste(20:31, \"03.2005\", sep=\".\"), format = \"%d.%m.%Y\") #> GMT #>  [1] [2005-03-20] [2005-03-21] [2005-03-22] [2005-03-23] [2005-03-24] #>  [6] [2005-03-25] [2005-03-26] [2005-03-27] [2005-03-28] [2005-03-29] #> [11] [2005-03-30] [2005-03-31]     ## Note, ISO and American Formats are Auto-Detected:    timeDate(\"2004-12-31\", FinCenter = \"GMT\") #> GMT #> [1] [2004-12-31]    timeDate(\"12/11/2004\", FinCenter = \"GMT\") #> GMT #> [1] [2004-12-11]    timeDate(\"1/31/2004\") # auto-detect American format #> GMT #> [1] [2004-01-31]     ## From POSIX?t, and using NAs    ## lsec <- as.POSIXlt(.leap.seconds) ; lsec[c(2,4:6)] <- NA    ## timeDate(lsec)     ## dtms <- paste(dts,tms)    ## dtms[2:3] <- NA    ## timeDate(dtms, FinCenter = \"Europe/Zurich\") # but in GMT"}]
